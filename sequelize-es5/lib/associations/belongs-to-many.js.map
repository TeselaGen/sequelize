{"version":3,"sources":["../../../sequelize-es6/lib/associations/belongs-to-many.js"],"names":["Utils","require","Helpers","_","Association","BelongsTo","HasMany","HasOne","AssociationError","BelongsToMany","source","target","options","through","undefined","model","associationType","targetAssociation","sequelize","assign","isMultiAssociation","doubleLinked","as","isSelfAssociation","isAliased","isPlainObject","name","plural","singular","singularize","combinedTableName","combineTableNames","tableName","isObject","foreignKey","foreignKeyAttribute","fieldName","foreignKeyDefault","camelizeIf","underscoredIf","underscored","primaryKeyAttribute","join","otherKey","otherKeyAttribute","otherKeyDefault","each","associations","association","paired","isDefined","define","extend","indexes","paranoid","validate","Object","pick","rawAttributes","foreignIdentifier","foreignIdentifierField","throughModel","combinedName","associationAccessor","uppercaseFirst","accessors","get","set","addMultiple","add","create","remove","removeMultiple","hasSingle","hasAll","count","identifier","attribute","attributeName","primaryKey","_autoGenerated","primaryKeyDeleted","sourceKey","sourceKeyType","type","sourceKeyField","field","targetKey","targetKeyType","targetKeyField","sourceAttribute","defaults","targetAttribute","unique","uniqueKey","constraints","references","getTableName","key","onDelete","onUpdate","identifierField","refreshAttributes","toSource","manyFromSource","oneFromSource","toTarget","manyFromTarget","oneFromTarget","checkNamingCollision","obj","methods","aliases","mixinMethods","instance","cloneDeep","scopeWhere","throughWhere","scope","clone","where","$and","include","push","attributes","joinTableAttributes","required","hasOwnProperty","unscoped","schema","schemaDelimiter","findAll","fn","col","raw","plain","then","parseInt","result","sourceInstance","instances","Array","isArray","$or","map","associatedObjects","length","newAssociatedObjects","toInstanceArray","obsoleteAssociations","promises","defaultAttributes","omit","unassociatedObjects","filter","find","currentRows","currentRow","newObj","throughAttributes","keys","update","obsoleteAssociation","destroy","bulk","unassociatedObject","bulkCreate","Promise","all","newInstances","resolve","newInstance","changedAssociations","existingAssociation","current","some","assoc","oldAssociatedObjects","values","fields","concat","newAssociatedObject","return","module","exports","default"],"mappings":"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","file":"belongs-to-many.js","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst BelongsTo = require('./belongs-to');\nconst HasMany = require('./has-many');\nconst HasOne = require('./has-one');\nconst AssociationError = require('../errors').AssociationError;\n\n/**\n * Many-to-many association with a join table.\n *\n * When the join table has additional attributes, these can be passed in the options object:\n *\n * ```js\n * UserProject = sequelize.define('user_project', {\n *   role: Sequelize.STRING\n * });\n * User.belongsToMany(Project, { through: UserProject });\n * Project.belongsToMany(User, { through: UserProject });\n * // through is required!\n *\n * user.addProject(project, { through: { role: 'manager' }});\n * ```\n *\n * All methods allow you to pass either a persisted instance, its primary key, or a mixture:\n *\n * ```js\n * Project.create({ id: 11 }).then(function (project) {\n *   user.addProjects([project, 12]);\n * });\n * ```\n *\n * If you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:\n *\n * ```js\n * p1.UserProjects = {\n *   started: true\n * }\n * user.setProjects([p1, p2], { through: { started: false }}) // The default value is false, but p1 overrides that.\n * ```\n *\n * Similarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.\n * ```js\n * user.getProjects().then(function (projects) {\n   *   let p1 = projects[0]\n   *   p1.UserProjects.started // Is this project started yet?\n   * })\n * ```\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsToMany(Project)` the getter will be `user.getProjects()`.\n *\n * @see {@link Model.belongsToMany}\n */\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === undefined || this.options.through === true || this.options.through === null) {\n      throw new AssociationError('belongsToMany must be given a through option, either a string or a model');\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = 'BelongsToMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = _.assign({}, this.options.through);\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError('\\'as\\' must be defined for many-to-many self-associations');\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (Utils._.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(\n      this.source.tableName,\n      this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName\n    );\n\n    /*\n    * If self association, this is the target association - Unless we find a pairing association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    /*\n    * Default/generated foreign/other keys\n    */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      if (!this.options.foreignKey) {\n        this.foreignKeyDefault = true;\n      }\n\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.source.options.name.singular, this.source.options.underscored),\n          this.source.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelizeIf(\n        [\n          Utils.underscoredIf(\n            this.isSelfAssociation ?\n              Utils.singularize(this.as) :\n              this.target.options.name.singular,\n            this.target.options.underscored\n          ),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.target.options.underscored\n      );\n    }\n\n    /*\n    * Find paired association (if exists)\n    */\n    _.each(this.target.associations, association => {\n      if (association.associationType !== 'BelongsToMany') return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n\n    if (typeof this.through.model === 'string') {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, _.extend(this.options, {\n          tableName: this.through.model,\n          indexes: [], //we don't want indexes here (as referenced in #2416)\n          paranoid: false,  // A paranoid join table does not make sense\n          validate: {} // Don't propagate model-level validations\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    this.options = Object.assign(this.options, _.pick(this.through.model.options, [\n      'timestamps', 'createdAt', 'updatedAt', 'deletedAt', 'paranoid'\n    ]));\n\n    if (this.paired) {\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n      if (this.paired.otherKeyDefault) {\n        // If paired otherKey was inferred we should make sure to clean it up before adding a new one that matches the foreignKey\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n        }\n        this.paired.otherKey = this.foreignKey;\n        this.paired.foreignIdentifier = this.foreignKey;\n        delete this.paired.foreignIdentifierField;\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n\n    this.associationAccessor = this.as;\n\n    // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it\n    const plural = Utils.uppercaseFirst(this.options.name.plural);\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + plural,\n      set: 'set' + plural,\n      addMultiple: 'add' + plural,\n      add: 'add' + singular,\n      create: 'create' + singular,\n      remove: 'remove' + singular,\n      removeMultiple: 'remove' + plural,\n      hasSingle: 'has' + singular,\n      hasAll: 'has' + plural,\n      count: 'count' + plural\n    };\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  injectAttributes() {\n\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n\n    // remove any PKs previously defined by sequelize\n    // but ignore any keys that are part of this association (#5865)\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if (attributeName === this.foreignKey || attributeName === this.otherKey) {\n          // this key is still needed as it's part of the association\n          // so just set primaryKey to false\n          attribute.primaryKey = false;\n        }\n        else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.source.primaryKeyAttribute];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = sourceKey.field || this.source.primaryKeyAttribute;\n    const targetKey = this.target.rawAttributes[this.target.primaryKeyAttribute];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = targetKey.field || this.target.primaryKeyAttribute;\n    const sourceAttribute = _.defaults({}, this.foreignKeyAttribute, { type: sourceKeyType });\n    const targetAttribute = _.defaults({}, this.otherKeyAttribute, { type: targetKeyType });\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      const uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, 'unique'].join('_');\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key:   sourceKeyField\n      };\n      // For the source attribute the passed option is the priority\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = 'CASCADE';\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = 'CASCADE';\n\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key:   targetKeyField\n      };\n      // But the for target attribute the previously defined option is the priority (since it could've been set by another belongsToMany call)\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = 'CASCADE';\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = 'CASCADE';\n    }\n\n    this.through.model.rawAttributes[this.foreignKey] = _.extend(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    this.through.model.rawAttributes[this.otherKey] = _.extend(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.through.model.refreshAttributes();\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      as: this.through.model.name\n    });\n\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param {Object} [options]\n   * @param {Object} [options.where] An optional where clause to limit the associated models\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findAll}  for a full explanation of options\n   * @return {Promise<Array<Model>>}\n   */\n  get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n\n    const association = this;\n    const through = association.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (association.scope) {\n      scopeWhere = _.clone(association.scope);\n    }\n\n    options.where = {\n      $and: [\n        scopeWhere,\n        options.where\n      ]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[association.foreignKey] = instance.get(association.source.primaryKeyAttribute);\n\n      if (through.scope) {\n        _.assign(throughWhere, through.scope);\n      }\n\n      //If a user pass a where on the options through options, make an \"and\" with the current throughWhere\n      if (options.through && options.through.where) {\n        throughWhere = {\n          $and: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: association.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        where: throughWhere\n      });\n    }\n\n    let model = association.target;\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Object} [options]\n   * @param {Object} [options.where] An optional where clause to limit the associated models\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @return {Promise<Integer>}\n   */\n  count(instance, options) {\n    const association = this;\n    const model = association.target;\n    const sequelize = model.sequelize;\n\n    options = Utils.cloneDeep(options);\n    options.attributes = [\n      [sequelize.fn('COUNT', sequelize.col([association.target.name, model.primaryKeyAttribute].join('.'))), 'count']\n    ];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n\n    return association.get(instance, options).then(result => parseInt(result.count, 10));\n  }\n\n  /**\n   * Check if one or more instance(s) are associated with this. If a list of instances is passed, the function returns true if _all_ instances are associated\n   *\n   * @param {Model[]|Model|string[]|String|number[]|Number} [instance(s)] Can be an array of instances or their primary keys\n   * @param {Object} [options] Options passed to getAssociations\n   * @return {Promise<boolean>}\n   */\n  has(sourceInstance, instances, options) {\n    const association = this;\n    const where = {};\n\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = _.assign({\n      raw: true\n    }, options, {\n      scope: false\n    });\n\n    where.$or = instances.map(instance => {\n      if (instance instanceof association.target) {\n        return instance.where();\n      } else {\n        const where = {};\n        where[association.target.primaryKeyAttribute] = instance;\n        return where;\n      }\n    });\n\n    options.where = {\n      $and: [\n        where,\n        options.where\n      ]\n    };\n\n    return association.get(sourceInstance, options).then(associatedObjects => associatedObjects.length === instances.length);\n  }\n\n  /**\n   * Set the associated models by passing an array of instances or their primary keys. Everything that it not in the passed array will be un-associated.\n   *\n   * @param {Array<Model|String|Number>} [newAssociations] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.\n   * @param {Object} [options] Options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`\n   * @param {Object} [options.validate] Run validation for the join model\n   * @param {Object} [options.through] Additional attributes for the join table.\n   * @return {Promise}\n   */\n  set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n\n    const association = this;\n    const sourceKey = association.source.primaryKeyAttribute;\n    const targetKey = association.target.primaryKeyAttribute;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const where = {};\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = association.toInstanceArray(newAssociatedObjects);\n    }\n\n    where[identifier] = sourceInstance.get(sourceKey);\n    _.assign(where, association.through.scope);\n\n    return association.through.model.findAll(_.defaults({where, raw: true}, options)).then(currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      let defaultAttributes = options.through || {};\n\n      // Don't try to insert the transaction as an attribute in the through table\n      defaultAttributes = _.omit(defaultAttributes, ['transaction', 'hooks', 'individualHooks', 'ignoreDuplicates', 'validate', 'fields', 'logging']);\n\n      const unassociatedObjects = newAssociatedObjects.filter(obj =>\n        !_.find(currentRows, currentRow => currentRow[foreignIdentifier] === obj.get(targetKey))\n      );\n\n      for (const currentRow of currentRows) {\n        const newObj = _.find(newAssociatedObjects, obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[association.through.model.name];\n          // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n          if (throughAttributes instanceof association.through.model) {\n            throughAttributes = {};\n          }\n\n          const where = {};\n          const attributes = _.defaults({}, throughAttributes, defaultAttributes);\n\n          where[identifier] = sourceInstance.get(sourceKey);\n          where[foreignIdentifier] = newObj.get(targetKey);\n\n          if (Object.keys(attributes).length) {\n            promises.push(association.through.model.update(attributes, _.extend(options, {where})));\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        const where = {};\n        where[identifier] = sourceInstance.get(sourceKey);\n        where[foreignIdentifier] = obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier]);\n\n        promises.push(association.through.model.destroy(_.defaults({where}, options)));\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          let attributes = {};\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n\n          attributes = _.defaults(attributes, unassociatedObject[association.through.model.name], defaultAttributes);\n\n          _.assign(attributes, association.through.scope);\n\n          return attributes;\n        });\n\n        promises.push(association.through.model.bulkCreate(bulk, _.assign({ validate: true }, options)));\n      }\n\n      return Utils.Promise.all(promises);\n    });\n  }\n\n  /**\n   * Associate one ore several rows with `this`.\n   *\n   * @param {Model[]|Model|string[]|string|number[]|Number} [newAssociation(s)] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {Object} [options] Options passed to `through.findAll`, `bulkCreate` and `update`\n   * @param {Object} [options.validate] Run validation for the join model.\n   * @param {Object} [options.through] Additional attributes for the join table.\n   * @return {Promise}\n   */\n  add(sourceInstance, newInstances, options) {\n    // If newInstances is null or undefined, no-op\n    if (!newInstances) return Utils.Promise.resolve();\n\n    options = _.clone(options) || {};\n\n    const association = this;\n    const sourceKey = association.source.primaryKeyAttribute;\n    const targetKey = association.target.primaryKeyAttribute;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = _.omit(options.through || {}, ['transaction', 'hooks', 'individualHooks', 'ignoreDuplicates', 'validate', 'fields', 'logging']);\n\n    newInstances = association.toInstanceArray(newInstances);\n\n    const where = {};\n    where[identifier] = sourceInstance.get(sourceKey);\n    where[foreignIdentifier] = newInstances.map(newInstance => newInstance.get(targetKey));\n\n    _.assign(where, association.through.scope);\n\n    return association.through.model.findAll(_.defaults({where, raw: true}, options)).then(currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n      for (const obj of newInstances) {\n        const existingAssociation = _.find(currentRows, current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n          const attributes = _.defaults({}, throughAttributes, defaultAttributes);\n\n          if (_.some(Object.keys(attributes), attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n          const attributes = _.defaults({}, throughAttributes, defaultAttributes);\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n\n          _.assign(attributes, association.through.scope);\n\n          return attributes;\n        });\n\n        promises.push(association.through.model.bulkCreate(bulk, _.assign({ validate: true }, options)));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n        const attributes = _.defaults({}, throughAttributes, defaultAttributes);\n        const where = {};\n        // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        where[identifier] = sourceInstance.get(sourceKey);\n        where[foreignIdentifier] = assoc.get(targetKey);\n\n        promises.push(association.through.model.update(attributes, _.extend(options, {where})));\n      }\n\n      return Utils.Promise.all(promises);\n    });\n  }\n\n  /**\n   * Un-associate one or more instance(s).\n   *\n   * @param {Model|String|Number} [oldAssociated] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {Object} [options] Options passed to `through.destroy`\n   * @return {Promise}\n   */\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n\n    options = options || {};\n\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n\n    const where = {};\n    where[association.identifier] = sourceInstance.get(association.source.primaryKeyAttribute);\n    where[association.foreignIdentifier] = oldAssociatedObjects.map(newInstance => newInstance.get(association.target.primaryKeyAttribute));\n\n    return association.through.model.destroy(_.defaults({where}, options));\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to create and add\n   * @param {Object} [options.through] Additional attributes for the join table\n   * @return {Promise}\n   */\n  create(sourceInstance, values, options) {\n    const association = this;\n\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      _.assign(values, association.scope);\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    }\n\n    // Create the related model instance\n    return association.target.create(values, options).then(newAssociatedObject =>\n      sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, ['fields'])).return(newAssociatedObject)\n    );\n  }\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;\n"]}