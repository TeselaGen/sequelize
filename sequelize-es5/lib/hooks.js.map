{"version":3,"sources":["../../sequelize-es6/lib/hooks.js"],"names":["Utils","require","Promise","debug","getLogger","debugContext","hookTypes","beforeValidate","params","afterValidate","validationFailed","beforeCreate","afterCreate","beforeDestroy","afterDestroy","beforeRestore","afterRestore","beforeUpdate","afterUpdate","beforeSave","proxies","afterSave","beforeUpsert","afterUpsert","beforeBulkCreate","afterBulkCreate","beforeBulkDestroy","afterBulkDestroy","beforeBulkRestore","afterBulkRestore","beforeBulkUpdate","afterBulkUpdate","beforeFind","beforeFindAfterExpandIncludeAll","beforeFindAfterOptions","afterFind","beforeCount","beforeDefine","sync","afterDefine","beforeInit","afterInit","beforeConnect","afterConnect","beforeSync","afterSync","beforeBulkSync","afterBulkSync","exports","hooks","hookAliases","beforeDelete","afterDelete","beforeBulkDelete","afterBulkDelete","beforeConnection","getProxiedHooks","hookType","concat","Hooks","replaceHookAliases","_","each","hooksArray","name","realHookName","runHooks","Error","hookArgs","sliceArgs","arguments","options","sequelize","Array","isArray","hook","fn","apply","resolve","return","addHook","type","push","removeHook","isReference","hasHook","filter","length","hasHooks","applyTo","target","mixin","allHooks","Object","keys","callback"],"mappings":"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","file":"hooks.js","sourcesContent":["'use strict';\n\nconst Utils = require('./utils');\nconst Promise = require('./promise');\nconst debug = Utils.getLogger().debugContext('hooks');\n\nconst hookTypes = {\n  beforeValidate: {params: 2},\n  afterValidate: {params: 2},\n  validationFailed: {params: 3},\n  beforeCreate: {params: 2},\n  afterCreate: {params: 2},\n  beforeDestroy: {params: 2},\n  afterDestroy: {params: 2},\n  beforeRestore: {params: 2},\n  afterRestore: {params: 2},\n  beforeUpdate: {params: 2},\n  afterUpdate: {params: 2},\n  beforeSave: {params: 2, proxies: ['beforeUpdate', 'beforeCreate']},\n  afterSave: {params: 2, proxies: ['afterUpdate', 'afterCreate']},\n  beforeUpsert: {params: 2},\n  afterUpsert: {params: 2},\n  beforeBulkCreate: {params: 2},\n  afterBulkCreate: {params: 2},\n  beforeBulkDestroy: {params: 1},\n  afterBulkDestroy: {params: 1},\n  beforeBulkRestore: {params: 1},\n  afterBulkRestore: {params: 1},\n  beforeBulkUpdate: {params: 1},\n  afterBulkUpdate: {params: 1},\n  beforeFind: {params: 1},\n  beforeFindAfterExpandIncludeAll: {params: 1},\n  beforeFindAfterOptions: {params: 1},\n  afterFind: {params: 2},\n  beforeCount: {params: 1},\n  beforeDefine: {params: 2, sync: true},\n  afterDefine: {params: 1, sync: true},\n  beforeInit: {params: 2, sync: true},\n  afterInit: {params: 1, sync: true},\n  beforeConnect: {params: 1},\n  afterConnect: {params: 2},\n  beforeSync: {params: 1},\n  afterSync: {params: 1},\n  beforeBulkSync: {params: 1},\n  afterBulkSync: {params: 1}\n};\nexports.hooks = hookTypes;\n\nconst hookAliases = {\n  beforeDelete: 'beforeDestroy',\n  afterDelete: 'afterDestroy',\n  beforeBulkDelete: 'beforeBulkDestroy',\n  afterBulkDelete: 'afterBulkDestroy',\n  beforeConnection: 'beforeConnect'\n};\nexports.hookAliases = hookAliases;\n\n/**\n * get array of current hook and its proxied hooks combined\n * @private\n */\nconst getProxiedHooks = hookType =>\n  hookTypes[hookType].proxies\n    ? hookTypes[hookType].proxies.concat(hookType)\n    : [hookType]\n;\n\nconst Hooks = {\n  replaceHookAliases(hooks) {\n    Utils._.each(hooks, (hooksArray, name) => {\n      // Does an alias for this hook name exist?\n      const realHookName = hookAliases[name];\n      if (realHookName) {\n        // Add the hooks to the actual hook\n        hooks[realHookName] = (hooks[realHookName] || []).concat(hooksArray);\n\n        // Delete the alias\n        delete hooks[name];\n      }\n    });\n\n    return hooks;\n  },\n\n  runHooks(hooks) {\n    if (!hooks) throw new Error('runHooks requires atleast 1 argument');\n\n    const hookArgs = Utils.sliceArgs(arguments, 1);\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = this.options.hooks[hookType] || [];\n      if (this.sequelize) hooks = hooks.concat(this.sequelize.options.hooks[hookType] || []);\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    // synchronous hooks\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n\n    // asynchronous hooks (default)\n    return Promise.each(hooks, hook => {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      return Promise.resolve(hook.apply(this, hookArgs));\n    }).return();\n  },\n\n  hook() {\n    return Hooks.addHook.apply(this, arguments);\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {String}    hookType\n   * @param {String}    [name]    Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}  fn        The hook function\n   *\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    hookType = hookAliases[hookType] || hookType;\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    Utils._.each(hookType, type => {\n      this.options.hooks[type] = this.options.hooks[type] || [];\n      this.options.hooks[type].push(name ? {name, fn} : fn);\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {String} hookType\n   * @param {String|Function} name\n   *\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    hookType = hookAliases[hookType] || hookType;\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    Utils.debug(`removing hook ${hookType}`);\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        } else {\n          return typeof hook === 'object' && hook.name !== name;\n        }\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {String}  hookType\n   *\n   * @alias hasHooks\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\n\n\nfunction applyTo(target) {\n  Utils._.mixin(target, Hooks);\n\n  const allHooks = Object.keys(hookTypes).concat(Object.keys(hookAliases));\n  for (const hook of allHooks) {\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n\n/**\n * A hook that is run before validation\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterUpsert\n * @memberOf Sequelize.Model\n */\n\n /**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n  * @param {String}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberOf Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @alias beforeDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @alias afterDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @alias beforeBulkDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @alias afterBulkDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after a define call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with the connection object and thye config passed to connection\n * @name afterConnect\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberOf Sequelize\n */\n\n /**\n  * A hook that is run before sequelize.sync call\n  * @param {String}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberOf Sequelize\n  */\n\n /**\n  * A hook that is run after sequelize.sync call\n  * @param {String}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberOf Sequelize\n  */\n"]}