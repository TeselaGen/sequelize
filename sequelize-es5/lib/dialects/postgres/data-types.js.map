{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/postgres/data-types.js"],"names":["_","require","wkx","inherits","module","exports","warn","BaseTypes","ABSTRACT","bind","undefined","UUID","types","postgres","oids","array_oids","JSON","JSONB","TIME","DATEONLY","apply","arguments","parse","value","DECIMAL","precision","scale","STRING","length","binary","prototype","toSql","_binary","call","TEXT","_length","CHAR","BOOLEAN","DATE","INTEGER","options","_unsigned","_zerofill","parseInt","BIGINT","REAL","decimals","DOUBLE","FLOAT","_decimals","BLOB","_hexify","hex","GEOMETRY","type","srid","result","key","b","Buffer","Geometry","toGeoJSON","_stringify","escape","stringify","GEOGRAPHY","hstore","HSTORE","RANGE","subtype","oid_map","range","oid","getTypeParser","parser","values","Array","isArray","toCastType","valuesStringified","map","inclusive","ARRAY","str","join","forIn","DataType","extend","oldType"],"mappings":"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","file":"data-types.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst wkx = require('wkx');\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'http://www.postgresql.org/docs/9.4/static/datatype.html');\n\n  BaseTypes.UUID.types.postgres = {\n    oids: [2950],\n    array_oids: [2951]\n  };\n\n  BaseTypes.JSON.types.postgres = {\n    oids: [114],\n    array_oids: [199]\n  };\n\n  BaseTypes.JSONB.types.postgres = {\n    oids: [3802],\n    array_oids: [3807]\n  };\n\n  BaseTypes.TIME.types.postgres = {\n    oids: [1083],\n    array_oids: [1183]\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function parse(value) {\n    return value;\n  };\n\n  BaseTypes.DATEONLY.types.postgres = {\n    oids: [1082],\n    array_oids: [1182]\n  };\n\n  function DECIMAL(precision, scale) {\n    if (!(this instanceof DECIMAL)) return new DECIMAL(precision, scale);\n    BaseTypes.DECIMAL.apply(this, arguments);\n  }\n  inherits(DECIMAL, BaseTypes.DECIMAL);\n\n  DECIMAL.parse = function parse(value) {\n    return value;\n  };\n\n  // numeric\n  BaseTypes.DECIMAL.types.postgres = {\n    oids: [1700],\n    array_oids: [1231]\n  };\n\n  function STRING(length, binary) {\n    if (!(this instanceof STRING)) return new STRING(length, binary);\n    BaseTypes.STRING.apply(this, arguments);\n  }\n  inherits(STRING, BaseTypes.STRING);\n\n  STRING.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'BYTEA';\n    }\n    return BaseTypes.STRING.prototype.toSql.call(this);\n  };\n\n  BaseTypes.STRING.types.postgres = {\n    oids: [1043],\n    array_oids: [1015]\n  };\n\n  function TEXT(length) {\n    if (!(this instanceof TEXT)) return new TEXT(length);\n    BaseTypes.TEXT.apply(this, arguments);\n  }\n  inherits(TEXT, BaseTypes.TEXT);\n\n  TEXT.prototype.toSql = function toSql() {\n    if (this._length) {\n      warn('PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.');\n      this._length = undefined;\n    }\n    return 'TEXT';\n  };\n\n  BaseTypes.TEXT.types.postgres = {\n    oids: [25],\n    array_oids: [1009]\n  };\n\n  function CHAR(length, binary) {\n    if (!(this instanceof CHAR)) return new CHAR(length, binary);\n    BaseTypes.CHAR.apply(this, arguments);\n  }\n  inherits(CHAR, BaseTypes.CHAR);\n\n  CHAR.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'BYTEA';\n    }\n    return BaseTypes.CHAR.prototype.toSql.call(this);\n  };\n\n  BaseTypes.CHAR.types.postgres = {\n    oids: [18, 1042],\n    array_oids: [1002, 1014]\n  };\n\n  function BOOLEAN() {\n    if (!(this instanceof BOOLEAN)) return new BOOLEAN();\n    BaseTypes.BOOLEAN.apply(this, arguments);\n  }\n  inherits(BOOLEAN, BaseTypes.BOOLEAN);\n\n  BOOLEAN.prototype.toSql = function toSql() {\n    return 'BOOLEAN';\n  };\n\n  BaseTypes.BOOLEAN.types.postgres = {\n    oids: [16],\n    array_oids: [1000]\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.prototype.toSql = function toSql() {\n    return 'TIMESTAMP WITH TIME ZONE';\n  };\n\n  BaseTypes.DATE.types.postgres = {\n    oids: [1184],\n    array_oids: [1185]\n  };\n\n  function INTEGER(length) {\n    if (!(this instanceof INTEGER)) return new INTEGER(length);\n    BaseTypes.INTEGER.apply(this, arguments);\n\n    // POSTGRES does not support any parameters for integer\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support INTEGER with options. Plain `INTEGER` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(INTEGER, BaseTypes.INTEGER);\n\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  };\n\n  // int4\n  BaseTypes.INTEGER.types.postgres = {\n    oids: [23],\n    array_oids: [1007]\n  };\n\n  function BIGINT(length) {\n    if (!(this instanceof BIGINT)) return new BIGINT(length);\n    BaseTypes.BIGINT.apply(this, arguments);\n\n    // POSTGRES does not support any parameters for bigint\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support BIGINT with options. Plain `BIGINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(BIGINT, BaseTypes.BIGINT);\n\n  // int8\n  BaseTypes.BIGINT.types.postgres = {\n    oids: [20],\n    array_oids: [1016]\n  };\n\n  function REAL(length, decimals) {\n    if (!(this instanceof REAL)) return new REAL(length, decimals);\n    BaseTypes.REAL.apply(this, arguments);\n\n    // POSTGRES does not support any parameters for real\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support REAL with options. Plain `REAL` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(REAL, BaseTypes.REAL);\n\n  // float4\n  BaseTypes.REAL.types.postgres = {\n    oids: [700],\n    array_oids: [1021]\n  };\n\n  function DOUBLE(length, decimals) {\n    if (!(this instanceof DOUBLE)) return new DOUBLE(length, decimals);\n    BaseTypes.DOUBLE.apply(this, arguments);\n\n    // POSTGRES does not support any parameters for double\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support DOUBLE with options. Plain `DOUBLE` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(DOUBLE, BaseTypes.DOUBLE);\n\n  // float8\n  BaseTypes.DOUBLE.types.postgres = {\n    oids: [701],\n    array_oids: [1022]\n  };\n\n  function FLOAT(length, decimals) {\n    if (!(this instanceof FLOAT)) return new FLOAT(length, decimals);\n    BaseTypes.FLOAT.apply(this, arguments);\n\n    // POSTGRES does only support lengths as parameter.\n    // Values between 1-24 result in REAL\n    // Values between 25-53 result in DOUBLE PRECISION\n    // If decimals are provided remove these and print a warning\n    if (this._decimals) {\n      warn('PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._decimals = undefined;\n    }\n    if (this._unsigned) {\n      warn('PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.');\n      this._unsigned = undefined;\n    }\n    if (this._zerofill) {\n      warn('PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.');\n      this._zerofill = undefined;\n    }\n  }\n  inherits(FLOAT, BaseTypes.FLOAT);\n  delete FLOAT.parse; // Float has no separate type in PG\n\n  function BLOB(length) {\n    if (!(this instanceof BLOB)) return new BLOB(length);\n    BaseTypes.BLOB.apply(this, arguments);\n  }\n  inherits(BLOB, BaseTypes.BLOB);\n\n  BLOB.prototype.toSql = function toSql() {\n    if (this._length) {\n      warn('PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.');\n      this._length = undefined;\n    }\n    return 'BYTEA';\n  };\n\n  BLOB.prototype._hexify = function _hexify(hex) {\n    // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n    return \"E'\\\\\\\\x\" + hex + \"'\";\n  };\n\n  BaseTypes.BLOB.types.postgres = {\n    oids: [17],\n    array_oids: [1001]\n  };\n\n  function GEOMETRY(type, srid) {\n    if (!(this instanceof GEOMETRY)) return new GEOMETRY(type, srid);\n    BaseTypes.GEOMETRY.apply(this, arguments);\n  }\n  inherits(GEOMETRY, BaseTypes.GEOMETRY);\n\n  GEOMETRY.prototype.toSql = function toSql() {\n    let result = this.key;\n\n    if (this.type){\n      result += '(' + this.type;\n\n      if (this.srid){\n        result += ',' + this.srid;\n      }\n\n      result += ')';\n    }\n\n    return result;\n  };\n\n  BaseTypes.GEOMETRY.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  GEOMETRY.parse = GEOMETRY.prototype.parse = function parse(value) {\n    const b = new Buffer(value, 'hex');\n    return wkx.Geometry.parse(b).toGeoJSON();\n  };\n\n  GEOMETRY.prototype._stringify = function _stringify(value, options) {\n    return 'ST_GeomFromGeoJSON(' + options.escape(JSON.stringify(value)) + ')';\n  };\n\n  function GEOGRAPHY(type, srid) {\n    if (!(this instanceof GEOGRAPHY)) return new GEOGRAPHY(type, srid);\n    BaseTypes.GEOGRAPHY.apply(this, arguments);\n  }\n  inherits(GEOGRAPHY, BaseTypes.GEOGRAPHY);\n\n  GEOGRAPHY.prototype.toSql = function toSql() {\n    let result = 'GEOGRAPHY';\n\n    if (this.type){\n      result += '(' + this.type;\n\n      if (this.srid){\n        result += ',' + this.srid;\n      }\n\n      result += ')';\n    }\n\n    return result;\n  };\n\n  BaseTypes.GEOGRAPHY.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  GEOGRAPHY.parse = GEOGRAPHY.prototype.parse = function parse(value) {\n    const b = new Buffer(value, 'hex');\n    return wkx.Geometry.parse(b).toGeoJSON();\n  };\n\n  GEOGRAPHY.prototype._stringify = function _stringify(value, options) {\n    return 'ST_GeomFromGeoJSON(' + options.escape(JSON.stringify(value)) + ')';\n  };\n\n  let hstore;\n  function HSTORE() {\n    if (!(this instanceof HSTORE)) return new HSTORE();\n    BaseTypes.HSTORE.apply(this, arguments);\n\n    if (!hstore) {\n      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n      hstore = require('./hstore');\n    }\n  }\n  inherits(HSTORE, BaseTypes.HSTORE);\n\n  HSTORE.parse = function parse(value) {\n    if (!hstore) {\n      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n      hstore = require('./hstore');\n    }\n    return hstore.parse(value);\n  };\n\n  HSTORE.prototype.escape = false;\n  HSTORE.prototype._stringify = function _stringify(value) {\n    if (!hstore) {\n      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n      hstore = require('./hstore');\n    }\n    return \"'\" + hstore.stringify(value) + \"'\";\n  };\n\n  BaseTypes.HSTORE.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  function RANGE(subtype) {\n    if (!(this instanceof RANGE)) return new RANGE(subtype);\n    BaseTypes.RANGE.apply(this, arguments);\n  }\n  inherits(RANGE, BaseTypes.RANGE);\n\n  RANGE.oid_map = {\n    3904: 23, // int4\n    3905: 23,\n    3906: 1700, // Numeric\n    3907: 1700,\n    3908: 1114, // timestamp\n    3909: 1114,\n    3910: 1184, // timestamptz\n    3911: 1184,\n    3912: 1082, // date\n    3913: 1082,\n    3926: 20,    // int8\n    3927: 20\n  };\n\n  const range = require('./range');\n  RANGE.parse = function parse(value, oid, getTypeParser) {\n    const parser = getTypeParser(RANGE.oid_map[oid]);\n\n    return range.parse(value, parser);\n  };\n\n  RANGE.prototype.escape = false;\n  RANGE.prototype._stringify = function _stringify(values, options) {\n    if (!Array.isArray(values)) {\n      return \"'\" + this.options.subtype.stringify(values, options) + \"'::\" +\n        this.toCastType();\n    }\n    const valuesStringified = values.map(value => {\n      if (this.options.subtype.stringify) {\n        return this.options.subtype.stringify(value, options);\n      } else {\n        return options.escape(value);\n      }\n    });\n\n    // Array.map does not preserve extra array properties\n    valuesStringified.inclusive = values.inclusive;\n\n    return  '\\'' + range.stringify(valuesStringified) + '\\'';\n  };\n\n  BaseTypes.RANGE.types.postgres = {\n    oids: [3904, 3906, 3908, 3910, 3912, 3926],\n    array_oids: [3905, 3907, 3909, 3911, 3913, 3927]\n  };\n\n  BaseTypes.ARRAY.prototype.escape = false;\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = 'ARRAY[' + values.map(value => {\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n      return options.escape(value);\n    }, this).join(',') + ']';\n\n    if (this.type) {\n      str += '::' + this.toSql();\n    }\n\n    return str;\n  };\n\n  const exports = {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    INTEGER,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    BIGINT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n    if (!DataType.extend) {\n      DataType.extend = oldType => new DataType(oldType.options);\n    }\n  });\n\n  return exports;\n};\n"]}