{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/abstract/index.js"],"names":["AbstractDialect","prototype","supports","returnValues","autoIncrement","identityInsert","defaultValue","update","bulkDefault","ignoreDuplicates","updateOnDuplicate","schemas","transactions","transactionOptions","type","migrations","upserts","constraints","restrict","addConstraint","dropConstraint","unique","default","check","foreignKey","primaryKey","index","collate","length","parser","concurrently","using","joinTableDependent","groupedLimit","indexViaAlter","JSON","deferrableConstraints","module","exports"],"mappings":"AAAA;;;;IAEMA,e;;;;AAENA,gBAAgBC,SAAhB,CAA0BC,QAA1B,GAAqC;AACnC,aAAW,IADwB;AAEnC,oBAAkB,KAFiB;AAGnC,eAAa,KAHsB;AAInC,qBAAmB,KAJgB;AAKnC,sBAAoB,IALe;AAMnC,iBAAe,KANoB;AAOnC,WAAS,IAP0B;AAQnC,eAAa,IARsB;AASnC;AACA,YAAU,EAVyB;;AAYnC;AACAC,gBAAc,KAbqB;;AAenC;AACAC,iBAAe;AACb;AACAC,oBAAgB,KAFH;;AAIb;AACAC,kBAAc,IALD;;AAOb;AACAC,YAAQ;AARK,GAhBoB;AA0BnC;AACAC,eAAa,KA3BsB;AA4BnC;AACAC,oBAAkB,EA7BiB;AA8BnC;AACAC,qBAAmB,KA/BgB;AAgCnCC,WAAS,KAhC0B;AAiCnCC,gBAAc,IAjCqB;AAkCnCC,sBAAoB;AAClBC,UAAM;AADY,GAlCe;AAqCnCC,cAAY,IArCuB;AAsCnCC,WAAS,IAtC0B;AAuCnCC,eAAa;AACXC,cAAU,IADC;AAEXC,mBAAe,IAFJ;AAGXC,oBAAgB,IAHL;AAIXC,YAAQ,IAJG;AAKXC,aAAS,KALE;AAMXC,WAAO,IANI;AAOXC,gBAAY,IAPD;AAQXC,gBAAY;AARD,GAvCsB;AAiDnCC,SAAO;AACLC,aAAS,IADJ;AAELC,YAAQ,KAFH;AAGLC,YAAQ,KAHH;AAILC,kBAAc,KAJT;AAKLhB,UAAM,KALD;AAMLiB,WAAO;AANF,GAjD4B;AAyDnCC,sBAAoB,IAzDe;AA0DnCC,gBAAc,IA1DqB;AA2DnCC,iBAAe,KA3DoB;AA4DnCC,QAAM,KA5D6B;AA6DnCC,yBAAuB;AA7DY,CAArC;;AAgEAC,OAAOC,OAAP,GAAiBtC,eAAjB;AACAqC,OAAOC,OAAP,CAAetC,eAAf,GAAiCA,eAAjC;AACAqC,OAAOC,OAAP,CAAehB,OAAf,GAAyBtB,eAAzB","file":"index.js","sourcesContent":["'use strict';\n\nclass AbstractDialect {}\n\nAbstractDialect.prototype.supports = {\n  'DEFAULT': true,\n  'DEFAULT VALUES': false,\n  'VALUES ()': false,\n  'LIMIT ON UPDATE': false,\n  'ON DUPLICATE KEY': true,\n  'ORDER NULLS': false,\n  'UNION': true,\n  'UNION ALL': true,\n  /* What is the dialect's keyword for INSERT IGNORE */\n  'IGNORE': '',\n\n  /* does the dialect support returning values for inserted/updated fields */\n  returnValues: false,\n\n  /* features specific to autoIncrement values */\n  autoIncrement: {\n    /* does the dialect require modification of insert queries when inserting auto increment fields */\n    identityInsert: false,\n\n    /* does the dialect support inserting default/null values for autoincrement fields */\n    defaultValue: true,\n\n    /* does the dialect support updating autoincrement fields */\n    update: true\n  },\n  /* Do we need to say DEFAULT for bulk insert */\n  bulkDefault: false,\n  /* The dialect's words for INSERT IGNORE */\n  ignoreDuplicates: '',\n  /* Does the dialect support ON DUPLICATE KEY UPDATE */\n  updateOnDuplicate: false,\n  schemas: false,\n  transactions: true,\n  transactionOptions: {\n    type: false\n  },\n  migrations: true,\n  upserts: true,\n  constraints: {\n    restrict: true,\n    addConstraint: true,\n    dropConstraint: true,\n    unique: true,\n    default: false,\n    check: true,\n    foreignKey: true,\n    primaryKey: true\n  },\n  index: {\n    collate: true,\n    length: false,\n    parser: false,\n    concurrently: false,\n    type: false,\n    using: true\n  },\n  joinTableDependent: true,\n  groupedLimit: true,\n  indexViaAlter: false,\n  JSON: false,\n  deferrableConstraints: false\n};\n\nmodule.exports = AbstractDialect;\nmodule.exports.AbstractDialect = AbstractDialect;\nmodule.exports.default = AbstractDialect;\n"]}