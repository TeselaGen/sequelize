{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mysql/index.js"],"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","mysql","MysqlDialect","sequelize","connectionManager","extend","options","_dialect","prototype","supports","merge","cloneDeep","lock","forShare","index","collate","length","parser","type","using","constraints","dropConstraint","check","ignoreDuplicates","updateOnDuplicate","indexViaAlter","NUMERIC","GEOMETRY","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,kBAAkBD,QAAQ,aAAR,CAAxB;AACA,IAAME,oBAAoBF,QAAQ,sBAAR,CAA1B;AACA,IAAMG,QAAQH,QAAQ,SAAR,CAAd;AACA,IAAMI,iBAAiBJ,QAAQ,mBAAR,CAAvB;AACA,IAAMK,YAAYL,QAAQ,kBAAR,EAA4BM,KAA9C;;IAEMC,Y;;;AACJ,wBAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AAErB,UAAKA,SAAL,GAAiBA,SAAjB;AACA,UAAKC,iBAAL,GAAyB,IAAIP,iBAAJ,QAA4BM,SAA5B,CAAzB;AACA,UAAKJ,cAAL,GAAsBL,EAAEW,MAAF,CAAS,EAAT,EAAaN,cAAb,EAA6B;AACjDO,eAASH,UAAUG,OAD8B;AAEjDC,qBAFiD;AAGjDJ;AAHiD,KAA7B,CAAtB;AAJqB;AAStB;;;EAVwBP,e;;AAa3BM,aAAaM,SAAb,CAAuBC,QAAvB,GAAkCf,EAAEgB,KAAF,CAAQhB,EAAEiB,SAAF,CAAYf,gBAAgBY,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;AACzF,eAAa,IAD4E;AAEzF,qBAAmB,IAFsE;AAGzF,YAAU,SAH+E;AAIzFG,QAAM,IAJmF;AAKzFC,YAAU,oBAL+E;AAMzFC,SAAO;AACLC,aAAS,KADJ;AAELC,YAAQ,IAFH;AAGLC,YAAQ,IAHH;AAILC,UAAM,IAJD;AAKLC,WAAO;AALF,GANkF;AAazFC,eAAa;AACXC,oBAAgB,KADL;AAEXC,WAAO;AAFI,GAb4E;AAiBzFC,oBAAkB,SAjBuE;AAkBzFC,qBAAmB,IAlBsE;AAmBzFC,iBAAe,IAnB0E;AAoBzFC,WAAS,IApBgF;AAqBzFC,YAAU;AArB+E,CAAzD,CAAlC;;AAwBA9B,kBAAkBW,SAAlB,CAA4BoB,cAA5B,GAA6C,OAA7C;AACA1B,aAAaM,SAAb,CAAuBV,KAAvB,GAA+BA,KAA/B;AACAI,aAAaM,SAAb,CAAuBT,cAAvB,GAAwCA,cAAxC;AACAG,aAAaM,SAAb,CAAuBR,SAAvB,GAAmCA,SAAnC;AACAE,aAAaM,SAAb,CAAuBqB,IAAvB,GAA8B,OAA9B;AACA3B,aAAaM,SAAb,CAAuBsB,SAAvB,GAAmC,GAAnC;AACA5B,aAAaM,SAAb,CAAuBuB,cAAvB,GAAwC7B,aAAaM,SAAb,CAAuBsB,SAA/D;AACA5B,aAAaM,SAAb,CAAuBwB,eAAvB,GAAyC9B,aAAaM,SAAb,CAAuBsB,SAAhE;;AAEAG,OAAOC,OAAP,GAAiBhC,YAAjB","file":"index.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mysql;\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = _.extend({}, QueryGenerator, {\n      options: sequelize.options,\n      _dialect: this,\n      sequelize\n    });\n  }\n}\n\nMysqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  'IGNORE': ' IGNORE',\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  ignoreDuplicates: ' IGNORE',\n  updateOnDuplicate: true,\n  indexViaAlter: true,\n  NUMERIC: true,\n  GEOMETRY: true\n});\n\nConnectionManager.prototype.defaultVersion = '5.6.0';\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\n\nmodule.exports = MysqlDialect;\n"]}