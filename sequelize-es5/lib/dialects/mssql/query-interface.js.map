{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mssql/query-interface.js"],"names":["removeColumn","tableName","attributeName","options","Object","assign","raw","findConstraintSql","QueryGenerator","getDefaultConstraintQuery","sequelize","query","spread","results","length","dropConstraintSql","dropConstraintQuery","name","then","findForeignKeySql","getForeignKeyQuery","dropForeignKeySql","dropForeignKeyQuery","constraint_name","primaryKeyConstraintSql","getPrimaryKeyConstraintQuery","result","constraintName","removeSql","removeColumnQuery","module","exports"],"mappings":"AAAA;;AAEA;;;;;;;;AAQA;;;;;;;;;;;;;AAYA,IAAMA,eAAe,SAAfA,YAAe,CAASC,SAAT,EAAoBC,aAApB,EAAmCC,OAAnC,EAA4C;AAAA;;AAC/DA,YAAUC,OAAOC,MAAP,CAAc,EAAEC,KAAK,IAAP,EAAd,EAA6BH,WAAW,EAAxC,CAAV;;AAEA,MAAMI,oBAAoB,KAAKC,cAAL,CAAoBC,yBAApB,CAA8CR,SAA9C,EAAyDC,aAAzD,CAA1B;AACA,SAAO,KAAKQ,SAAL,CAAeC,KAAf,CAAqBJ,iBAArB,EAAwCJ,OAAxC,EACJS,MADI,CACG,mBAAW;AACjB,QAAI,CAACC,QAAQC,MAAb,EAAqB;AACnB;AACA;AACD;AACD,QAAMC,oBAAoB,MAAKP,cAAL,CAAoBQ,mBAApB,CAAwCf,SAAxC,EAAmDY,QAAQ,CAAR,EAAWI,IAA9D,CAA1B;AACA,WAAO,MAAKP,SAAL,CAAeC,KAAf,CAAqBI,iBAArB,EAAwCZ,OAAxC,CAAP;AACD,GARI,EASJe,IATI,CASC,YAAM;AACV,QAAMC,oBAAoB,MAAKX,cAAL,CAAoBY,kBAApB,CAAuCnB,SAAvC,EAAkDC,aAAlD,CAA1B;AACA,WAAO,MAAKQ,SAAL,CAAeC,KAAf,CAAqBQ,iBAArB,EAAwChB,OAAxC,CAAP;AACD,GAZI,EAaJS,MAbI,CAaG,mBAAW;AACjB,QAAI,CAACC,QAAQC,MAAb,EAAqB;AACnB;AACA;AACD;AACD,QAAMO,oBAAoB,MAAKb,cAAL,CAAoBc,mBAApB,CAAwCrB,SAAxC,EAAmDY,QAAQ,CAAR,EAAWU,eAA9D,CAA1B;AACA,WAAO,MAAKb,SAAL,CAAeC,KAAf,CAAqBU,iBAArB,EAAwClB,OAAxC,CAAP;AACD,GApBI,EAqBJe,IArBI,CAqBC,YAAM;AACV;AACA,QAAMM,0BAA0B,MAAKhB,cAAL,CAAoBiB,4BAApB,CAAiDxB,SAAjD,EAA4DC,aAA5D,CAAhC;AACA,WAAO,MAAKQ,SAAL,CAAeC,KAAf,CAAqBa,uBAArB,EAA8CrB,OAA9C,CAAP;AACD,GAzBI,EA0BJS,MA1BI,CA0BG,kBAAU;AAChB,QAAI,CAACc,OAAOZ,MAAZ,EAAoB;AAClB;AACD;AACD,QAAMC,oBAAoB,MAAKP,cAAL,CAAoBQ,mBAApB,CAAwCf,SAAxC,EAAmDyB,OAAO,CAAP,EAAUC,cAA7D,CAA1B;AACA,WAAO,MAAKjB,SAAL,CAAeC,KAAf,CAAqBI,iBAArB,EAAwCZ,OAAxC,CAAP;AACD,GAhCI,EAiCJe,IAjCI,CAiCC,YAAM;AACV,QAAMU,YAAY,MAAKpB,cAAL,CAAoBqB,iBAApB,CAAsC5B,SAAtC,EAAiDC,aAAjD,CAAlB;AACA,WAAO,MAAKQ,SAAL,CAAeC,KAAf,CAAqBiB,SAArB,EAAgCzB,OAAhC,CAAP;AACD,GApCI,CAAP;AAqCD,CAzCD;;AA2CA2B,OAAOC,OAAP,GAAiB;AACf/B;AADe,CAAjB","file":"query-interface.js","sourcesContent":["'use strict';\n\n/**\n Returns an object that treats MSSQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n  A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n\n  @method removeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName     The name of the table.\n  @param  {String} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n @private\n */\nconst removeColumn = function(tableName, attributeName, options) {\n  options = Object.assign({ raw: true }, options || {});\n\n  const findConstraintSql = this.QueryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n  return this.sequelize.query(findConstraintSql, options)\n    .spread(results => {\n      if (!results.length) {\n        // No default constraint found -- we can cleanly remove the column\n        return;\n      }\n      const dropConstraintSql = this.QueryGenerator.dropConstraintQuery(tableName, results[0].name);\n      return this.sequelize.query(dropConstraintSql, options);\n    })\n    .then(() => {\n      const findForeignKeySql = this.QueryGenerator.getForeignKeyQuery(tableName, attributeName);\n      return this.sequelize.query(findForeignKeySql, options);\n    })\n    .spread(results => {\n      if (!results.length) {\n        // No foreign key constraints found, so we can remove the column\n        return;\n      }\n      const dropForeignKeySql = this.QueryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      return this.sequelize.query(dropForeignKeySql, options);\n    })\n    .then(() => {\n      //Check if the current column is a primaryKey\n      const primaryKeyConstraintSql = this.QueryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n      return this.sequelize.query(primaryKeyConstraintSql, options);\n    })\n    .spread(result => {\n      if (!result.length) {\n        return;\n      }\n      const dropConstraintSql = this.QueryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      return this.sequelize.query(dropConstraintSql, options);\n    })\n    .then(() => {\n      const removeSql = this.QueryGenerator.removeColumnQuery(tableName, attributeName);\n      return this.sequelize.query(removeSql, options);\n    });\n};\n\nmodule.exports = {\n  removeColumn\n};\n"]}