{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mssql/connection-manager.js"],"names":["AbstractConnectionManager","require","ResourceLock","Promise","Utils","debug","getLogger","debugContext","debugTedious","sequelizeErrors","parserStore","_","ConnectionManager","dialect","sequelize","config","port","dialectModulePath","lib","err","code","Error","dataType","refresh","clear","resolve","reject","connectionConfig","userName","username","password","server","host","options","database","dialectOptions","instanceName","domain","Object","keys","key","connection","Connection","connectionLock","on","ConnectionError","includes","message","HostNotReachableError","HostNotFoundError","ConnectionRefusedError","AccessDeniedError","InvalidConnectionError","pool","handleDisconnects","destroy","unwrap","closed","close","loggedIn","module","exports","default"],"mappings":"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","file":"connection-manager.js","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst ResourceLock = require('./resource-lock');\nconst Promise = require('../../promise');\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('connection:mssql');\nconst debugTedious = Utils.getLogger().debugContext('connection:mssql:tedious');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 1433;\n    try {\n      if (sequelize.config.dialectModulePath) {\n        this.lib = require(sequelize.config.dialectModulePath);\n      } else {\n        this.lib = require('tedious');\n      }\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        throw new Error('Please install tedious package manually');\n      }\n      throw err;\n    }\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  connect(config) {\n    return new Promise((resolve, reject) => {\n      const connectionConfig = {\n        userName: config.username,\n        password: config.password,\n        server: config.host,\n        options: {\n          port: config.port,\n          database: config.database\n        }\n      };\n\n      if (config.dialectOptions) {\n        // only set port if no instance name was provided\n        if (config.dialectOptions.instanceName) {\n          delete connectionConfig.options.port;\n        }\n\n        // The 'tedious' driver needs domain property to be in the main Connection config object\n        if (config.dialectOptions.domain) {\n          connectionConfig.domain = config.dialectOptions.domain;\n        }\n\n        for (const key of Object.keys(config.dialectOptions)) {\n          connectionConfig.options[key] = config.dialectOptions[key];\n        }\n      }\n\n      const connection = new this.lib.Connection(connectionConfig);\n      const connectionLock = new ResourceLock(connection);\n      connection.lib = this.lib;\n\n      connection.on('connect', err => {\n        if (!err) {\n          debug('connection acquired');\n          resolve(connectionLock);\n          return;\n        }\n\n        if (!err.code) {\n          reject(new sequelizeErrors.ConnectionError(err));\n          return;\n        }\n\n        switch (err.code) {\n          case 'ESOCKET':\n            if (_.includes(err.message, 'connect EHOSTUNREACH')) {\n              reject(new sequelizeErrors.HostNotReachableError(err));\n            } else if (_.includes(err.message, 'connect ENETUNREACH')) {\n              reject(new sequelizeErrors.HostNotReachableError(err));\n            } else if (_.includes(err.message, 'connect EADDRNOTAVAIL')) {\n              reject(new sequelizeErrors.HostNotReachableError(err));\n            } else if (_.includes(err.message, 'getaddrinfo ENOTFOUND')) {\n              reject(new sequelizeErrors.HostNotFoundError(err));\n            } else if (_.includes(err.message, 'connect ECONNREFUSED')) {\n              reject(new sequelizeErrors.ConnectionRefusedError(err));\n            } else {\n              reject(new sequelizeErrors.ConnectionError(err));\n            }\n            break;\n          case 'ER_ACCESS_DENIED_ERROR':\n          case 'ELOGIN':\n            reject(new sequelizeErrors.AccessDeniedError(err));\n            break;\n          case 'EINVAL':\n            reject(new sequelizeErrors.InvalidConnectionError(err));\n            break;\n          default:\n            reject(new sequelizeErrors.ConnectionError(err));\n            break;\n        }\n      });\n      \n      if (config.dialectOptions && config.dialectOptions.debug) {\n        connection.on('debug', debugTedious);        \n      }\n\n      if (config.pool.handleDisconnects) {\n        connection.on('error', err => {\n          switch (err.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n              this.pool.destroy(connectionLock);\n          }\n        });\n      }\n\n    });\n  }\n\n  disconnect(connectionLock) {\n    const connection = connectionLock.unwrap();\n\n    // Dont disconnect a connection that is already disconnected\n    if (connection.closed) {\n      return Promise.resolve();\n    }\n\n    return new Promise(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connectionLock) {\n    const connection = connectionLock.unwrap();\n    return connection && connection.loggedIn;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]}