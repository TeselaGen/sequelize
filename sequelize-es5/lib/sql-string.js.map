{"version":3,"sources":["../../sequelize-es6/lib/sql-string.js"],"names":["dataTypes","require","_","escape","val","timeZone","dialect","format","prependN","undefined","Date","DATE","prototype","stringify","timezone","Buffer","isBuffer","BLOB","Array","isArray","partialEscape","partial","ARRAY","map","replace","Error","indexOf","length","isNaN","getTime","s","exports","sql","values","concat","match","shift","formatNamedParameters","value","key","slice"],"mappings":"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","file":"sql-string.js","sourcesContent":["'use strict';\n\nconst dataTypes = require('./data-types');\nconst _ = require('lodash');\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us, Oracle works the same way. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (dialect === 'sqlite' || dialect === 'mssql' || dialect === 'oracle') {\n        return +!!val;\n      }\n      return '' + !!val;\n    case 'number':\n      return val + '';\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = _.partial(escape, _, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, {escape});\n    }\n    return val.map(partialEscape);\n  }\n\n  if (!val.replace) {\n    throw new Error('Invalid value ' + val);\n  }\n\n  if (dialect === 'postgres' || dialect === 'sqlite' || dialect === 'mssql') {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n  } else if (dialect === 'oracle' && (val.indexOf('TO_TIMESTAMP') > -1 || typeof val === 'string')) {\n     //Specific Oracle for date/string managing\n\n     //Ugly, but only choice if a date is passed as String and no hour passed (case select with where on date)\n    if (val.length === 10 && !isNaN(new Date(val).getTime())) {\n      //If we have a string with following format : YYYY/MM/DD; YYYY-MM-DD, DD-MM-YYYY\n      if (val.length <= 10 && (val.indexOf('-') > -1 || val.indexOf('/') > -1)) {\n        if (val.indexOf('-') > -1) {\n          return 'TO_DATE(\\'' + val + '\\',\\'YYYY-MM-DD\\')';\n        } else {\n          //Consider format is YYYY/MM/DD\n          return 'TO_DATE(\\'' + val + '\\',\\'YYYY/MM/DD\\')';\n        }\n      }\n    }\n\n\n     //The insertion / selection of date has to pass by the TO_TIMESTAMP method, if we pass through the normal flow the method will be quoted -> 'TO_TIMESTAMP('1970-01-01 00:00:00.00','YYYY-MM-DD HH24:MI:SS.FF')'\n    if (val.indexOf('TO_TIMESTAMP') > -1) {\n      return val;\n    } \n    if (typeof val === 'string') {\n      val = val.replace(/'/g, \"''\");\n    }\n  } else {\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return '\\\\' + s;\n      }\n    });\n  }\n  return (prependN ? \"N'\" : \"'\") + val + \"'\";\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error('Invalid SQL string provided: ' + sql);\n  }\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/\\:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    } else {\n      throw new Error('Named parameter \"' + value + '\" has no value in the given object.');\n    }\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"]}