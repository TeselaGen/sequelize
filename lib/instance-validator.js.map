{"version":3,"sources":["../../sequelize-es6/lib/instance-validator.js"],"names":["validator","require","extendModelValidations","Utils","sequelizeError","Promise","DataTypes","_","InstanceValidator","modelInstance","options","clone","fields","skip","difference","Object","keys","constructor","attributes","defaults","hooks","errors","inProgress","Error","all","_builtinValidators","_customValidators","map","promise","reflect","then","length","ValidationError","_validateAndRunHooks","_validate","runHooks","bind","catch","error","newError","return","validators","forIn","rawAttributes","rawAttribute","field","indexOf","value","dataValues","_autoGenerated","autoIncrement","_validateSchema","hasOwnProperty","push","_builtinAttrValidate","call","each","_modelOptions","validate","validatorType","valprom","_invokeCustomValidator","resolve","test","msg","validatorPromise","_invokeBuiltinValidator","_handleReflectedResult","results","optAttrDefined","optValue","optField","validatorFunction","isAsync","validatorArity","asyncArity","errorKey","invokeArgs","promisify","_pushError","e","try","valueString","String","validatorArgs","_extractValidatorArgs","apply","concat","args","isLocalizedValidator","Array","isArray","slice","allowNull","undefined","errMsg","notNull","ValidationErrorItem","type","STRING","TEXT","isObject","SequelizeMethod","Buffer","isBuffer","promiseInspections","promiseInspection","isRejected","rejection","isBuiltin","rawError","message","RAW_KEY_NAME","module","exports","default"],"mappings":"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","file":"instance-validator.js","sourcesContent":["'use strict';\n\nconst validator = require('./utils/validator-extras').validator;\nconst extendModelValidations = require('./utils/validator-extras').extendModelValidations;\nconst Utils = require('./utils');\nconst sequelizeError = require('./errors');\nconst Promise = require('./promise');\nconst DataTypes = require('./data-types');\nconst _ = require('lodash');\n\n/**\n * The Main Instance Validator.\n *\n * @param {Instance} modelInstance The model instance.\n * @param {Object} options A dict with options.\n * @constructor\n * @private\n */\nclass InstanceValidator {\n\n  constructor(modelInstance, options) {\n    options = _.clone(options) || {};\n\n    if (options.fields && !options.skip) {\n      options.skip = Utils._.difference(Object.keys(modelInstance.constructor.attributes), options.fields);\n    }\n\n    // assign defined and default options\n    this.options = Utils._.defaults(options, {\n      skip: [],\n      hooks: true\n    });\n\n    this.modelInstance = modelInstance;\n\n    /**\n     * Exposes a reference to validator.js. This allows you to add custom validations using `validator.extend`\n     * @name validator\n     * @private\n     */\n    this.validator = validator;\n\n    /**\n     *  All errors will be stored here from the validations.\n     *\n     * @type {Array} Will contain keys that correspond to attributes which will\n     *   be Arrays of Errors.\n     * @private\n     */\n    this.errors = [];\n\n    /**\n     * @type {boolean} Indicates if validations are in progress\n     * @private\n     */\n    this.inProgress = false;\n\n    extendModelValidations(modelInstance);\n  }\n\n  /**\n   * The main entry point for the Validation module, invoke to start the dance.\n   *\n   * @return {Promise}\n   * @private\n   */\n  _validate() {\n    if (this.inProgress) {\n      throw new Error('Validations already in progress.');\n    }\n    this.inProgress = true;\n\n    return Promise.all(\n      [this._builtinValidators(), this._customValidators()].map(promise => promise.reflect())\n    ).then(() => {\n      if (this.errors.length) {\n        throw new sequelizeError.ValidationError(null, this.errors);\n      }\n    });\n  }\n\n  /**\n   * Invoke the Validation sequence and run validation hooks if defined\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @return {Promise}\n   * @private\n   */\n  validate() {\n    return this.options.hooks ? this._validateAndRunHooks() : this._validate();\n  }\n\n  /**\n   * Invoke the Validation sequence and run hooks\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @return {Promise}\n   * @private\n   */\n  _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    return runHooks('beforeValidate', this.modelInstance, this.options)\n      .then(() =>\n        this._validate()\n        .catch(error => runHooks('validationFailed', this.modelInstance, this.options, error)\n          .then(newError => { throw newError || error; }))\n      )\n      .then(() => runHooks('afterValidate', this.modelInstance, this.options))\n      .return(this.modelInstance);\n  }\n\n  /**\n   * Will run all the built-in validators.\n   *\n   * @return {Promise(Array.<Promise.PromiseInspection>)} A promise from .reflect().\n   * @private\n   */\n  _builtinValidators() {\n    // promisify all attribute invocations\n    const validators = [];\n    Utils._.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.indexOf(field) >= 0) {\n        return;\n      }\n\n      const value = this.modelInstance.dataValues[field];\n\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        // perform validations based on schema\n        this._validateSchema(rawAttribute, field, value);\n      }\n\n      if (this.modelInstance.validators.hasOwnProperty(field)) {\n        validators.push(this._builtinAttrValidate.call(this, value, field).reflect());\n      }\n    });\n\n    return Promise.all(validators);\n  }\n\n  /**\n   * Will run all the custom validators.\n   *\n   * @return {Promise(Array.<Promise.PromiseInspection>)} A promise from .reflect().\n   * @private\n   */\n  _customValidators() {\n    const validators = [];\n    Utils._.each(this.modelInstance._modelOptions.validate, (validator, validatorType) => {\n      if (this.options.skip.indexOf(validatorType) >= 0) {\n        return;\n      }\n\n      const valprom = this._invokeCustomValidator(validator, validatorType)\n        // errors are handled in settling, stub this\n        .catch(() => {})\n        .reflect();\n\n      validators.push(valprom);\n    });\n\n    return Promise.all(validators);\n  }\n\n  /**\n   * Validate a single attribute with all the defined built-in validators.\n   *\n   * @param {*} value Anything.\n   * @param {string} field The field name.\n   * @return {Promise} A promise, will always resolve,\n   *   auto populates error on this.error local object.\n   * @private\n   */\n  _builtinAttrValidate(value, field) {\n    // check if value is null (if null not allowed the Schema pass will capture it)\n    if (value === null || typeof value === 'undefined') {\n      return Promise.resolve();\n    }\n\n    // Promisify each validator\n    const validators = [];\n    Utils._.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n\n      if (['isUrl', 'isURL', 'isEmail'].indexOf(validatorType) !== -1) {\n        // Preserve backwards compat. Validator.js now expects the second param to isURL and isEmail to be an object\n        if (typeof test === 'object' && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      }\n\n      // Check for custom validator.\n      if (typeof test === 'function') {\n        return validators.push(this._invokeCustomValidator(test, validatorType, true, value, field).reflect());\n      }\n\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);\n      // errors are handled in settling, stub this\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise.reflect());\n    });\n\n    return Promise\n            .all(validators)\n            .then(results => this._handleReflectedResult(field, value, results));\n  }\n\n  /**\n   * Prepare and invoke a custom validator.\n   *\n   * @param {Function} validator The custom validator.\n   * @param {string} validatorType the custom validator type (name).\n   * @param {boolean=} optAttrDefined Set to true if custom validator was defined\n   *   from the Attribute\n   * @return {Promise} A promise.\n   * @private\n   */\n  _invokeCustomValidator(validator, validatorType, optAttrDefined, optValue, optField) {\n    let validatorFunction = null;  // the validation function to call\n    let isAsync = false;\n\n    const validatorArity = validator.length;\n    // check if validator is async and requires a callback\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n\n    if (isAsync) {\n      if (optAttrDefined) {\n        validatorFunction = Promise.promisify(validator.bind(this.modelInstance, invokeArgs));\n      } else {\n        validatorFunction = Promise.promisify(validator.bind(this.modelInstance));\n      }\n      return validatorFunction()\n              .catch(e => this._pushError(false, errorKey, e, optValue));\n    } else {\n      return Promise\n              .try(() => validator.call(this.modelInstance, invokeArgs))\n              .catch(e => this._pushError(false, errorKey, e, optValue));\n    }\n  }\n\n  /**\n   * Prepare and invoke a build-in validator.\n   *\n   * @param {*} value Anything.\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated\n   * @return {Object} An object with specific keys to invoke the validator.\n   * @private\n   */\n  _invokeBuiltinValidator(value, test, validatorType, field) {\n    return Promise.try(() => {\n      // Cast value as string to pass new Validator.js string requirement\n      const valueString = String(value);\n      // check if Validator knows that kind of validation test\n      if (typeof validator[validatorType] !== 'function') {\n        throw new Error('Invalid validator function: ' + validatorType);\n      }\n      const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n      if (!validator[validatorType].apply(validator, [valueString].concat(validatorArgs))) {\n      // extract the error msg\n        throw new Error(test.msg || `Validation ${validatorType} on ${field} failed`);\n      }\n    });\n  }\n\n  /**\n   * Will extract arguments for the validator.\n   *\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated.\n   * @private\n   */\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== 'string' && (validatorType === 'isAlpha' || validatorType === 'isAlphanumeric' || validatorType === 'isMobilePhone');\n\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === 'isImmutable') {\n        validatorArgs = [validatorArgs, field];\n      } else if (isLocalizedValidator || validatorType === 'isIP') {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n    return validatorArgs;\n  }\n\n  /**\n   * Will validate a single field against its schema definition (isnull).\n   *\n   * @param {Object} rawAttribute As defined in the Schema.\n   * @param {string} field The field name.\n   * @param {*} value anything.\n   * @private\n   */\n  _validateSchema(rawAttribute, field, value) {\n    let error;\n\n    if (rawAttribute.allowNull === false && (value === null || value === undefined)) {\n      const validators = this.modelInstance.validators[field];\n      const errMsg = validators\n                      ? (validators.notNull || {}).msg\n                      : `${field} cannot be null`;\n      error = new sequelizeError.ValidationErrorItem(errMsg, 'notNull Violation', field, value);\n      this.errors.push(error);\n    }\n\n    if (rawAttribute.type === DataTypes.STRING || rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type === DataTypes.TEXT || rawAttribute.type instanceof DataTypes.TEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        error = new sequelizeError.ValidationErrorItem(`${field} cannot be an array or an object`, 'string violation', field, value);\n        this.errors.push(error);\n      }\n    }\n  }\n\n\n  /**\n   * Handles the returned result of a Promise.reflect.\n   *\n   * If errors are found it populates this.error.\n   *\n   * @param {string} field The attribute name.\n   * @param {string|number} value The data value.\n   * @param {Array.<Promise.PromiseInspection>} Promise inspection objects.\n   * @private\n   */\n  _handleReflectedResult(field, value, promiseInspections) {\n    for (const promiseInspection of promiseInspections) {\n      if (promiseInspection.isRejected()) {\n        const rejection = promiseInspection.error();\n        this._pushError(true, field, rejection, value);\n      }\n    }\n  }\n\n  /**\n   * Signs all errors retaining the original.\n   *\n   * @param {boolean} isBuiltin Determines if error is from builtin validator.\n   * @param {string} errorKey The error key to assign on this.errors object.\n   * @param {Error|string} rawError The original error.\n   * @param {string|number} value The data that triggered the error.\n   * @private\n   */\n  _pushError(isBuiltin, errorKey, rawError, value) {\n    const message = rawError.message || rawError || 'Validation error';\n    const error = new sequelizeError.ValidationErrorItem(message, 'Validation error', errorKey, value);\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n\n    this.errors.push(error);\n  }\n}\n/**\n * @define {string} The error key for arguments as passed by custom validators\n * @private\n */\nInstanceValidator.RAW_KEY_NAME = '__raw';\n\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;\n"]}