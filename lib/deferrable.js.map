{"version":3,"sources":["../../sequelize-es6/lib/deferrable.js"],"names":["util","require","Deferrable","module","exports","INITIALLY_DEFERRED","INITIALLY_IMMEDIATE","NOT","SET_DEFERRED","SET_IMMEDIATE","ABSTRACT","prototype","toString","toSql","apply","arguments","inherits","constraints","queryGenerator","setDeferredQuery","setImmediateQuery","Object","keys","forEach","DeferrableType","key","instance"],"mappings":"AAAA;;AAEA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,IAAMC,aAAaC,OAAOC,OAAP,GAAiB;AAClCC,wCADkC;AAElCC,0CAFkC;AAGlCC,UAHkC;AAIlCC,4BAJkC;AAKlCC;AALkC,CAApC;;AAQA,SAASC,QAAT,GAAoB,CAAE;;AAEtBA,SAASC,SAAT,CAAmBC,QAAnB,GAA8B,YAAW;AACvC,SAAO,KAAKC,KAAL,CAAWC,KAAX,CAAiB,IAAjB,EAAuBC,SAAvB,CAAP;AACD,CAFD;;AAIA,SAASV,kBAAT,GAA8B;AAC5B,MAAI,EAAE,gBAAgBA,kBAAlB,CAAJ,EAA2C;AACzC,WAAO,IAAIA,kBAAJ,EAAP;AACD;AACF;AACDL,KAAKgB,QAAL,CAAcX,kBAAd,EAAkCK,QAAlC;;AAEAL,mBAAmBM,SAAnB,CAA6BE,KAA7B,GAAqC,YAAW;AAC9C,SAAO,+BAAP;AACD,CAFD;;AAIA,SAASP,mBAAT,GAA+B;AAC7B,MAAI,EAAE,gBAAgBA,mBAAlB,CAAJ,EAA4C;AAC1C,WAAO,IAAIA,mBAAJ,EAAP;AACD;AACF;AACDN,KAAKgB,QAAL,CAAcV,mBAAd,EAAmCI,QAAnC;;AAEAJ,oBAAoBK,SAApB,CAA8BE,KAA9B,GAAsC,YAAW;AAC/C,SAAO,gCAAP;AACD,CAFD;;AAIA,SAASN,GAAT,GAAe;AACb,MAAI,EAAE,gBAAgBA,GAAlB,CAAJ,EAA4B;AAC1B,WAAO,IAAIA,GAAJ,EAAP;AACD;AACF;AACDP,KAAKgB,QAAL,CAAcT,GAAd,EAAmBG,QAAnB;;AAEAH,IAAII,SAAJ,CAAcE,KAAd,GAAsB,YAAW;AAC/B,SAAO,gBAAP;AACD,CAFD;;AAIA,SAASL,YAAT,CAAsBS,WAAtB,EAAmC;AACjC,MAAI,EAAE,gBAAgBT,YAAlB,CAAJ,EAAqC;AACnC,WAAO,IAAIA,YAAJ,CAAiBS,WAAjB,CAAP;AACD;;AAED,OAAKA,WAAL,GAAmBA,WAAnB;AACD;AACDjB,KAAKgB,QAAL,CAAcR,YAAd,EAA4BE,QAA5B;;AAEAF,aAAaG,SAAb,CAAuBE,KAAvB,GAA+B,UAASK,cAAT,EAAyB;AACtD,SAAOA,eAAeC,gBAAf,CAAgC,KAAKF,WAArC,CAAP;AACD,CAFD;;AAIA,SAASR,aAAT,CAAuBQ,WAAvB,EAAoC;AAClC,MAAI,EAAE,gBAAgBR,aAAlB,CAAJ,EAAsC;AACpC,WAAO,IAAIA,aAAJ,CAAkBQ,WAAlB,CAAP;AACD;;AAED,OAAKA,WAAL,GAAmBA,WAAnB;AACD;AACDjB,KAAKgB,QAAL,CAAcP,aAAd,EAA6BC,QAA7B;;AAEAD,cAAcE,SAAd,CAAwBE,KAAxB,GAAgC,UAASK,cAAT,EAAyB;AACvD,SAAOA,eAAeE,iBAAf,CAAiC,KAAKH,WAAtC,CAAP;AACD,CAFD;;AAIAI,OAAOC,IAAP,CAAYpB,UAAZ,EAAwBqB,OAAxB,CAAgC,eAAO;AACrC,MAAMC,iBAAiBtB,WAAWuB,GAAX,CAAvB;;AAEAD,iBAAeZ,QAAf,GAA0B,YAAW;AACnC,QAAMc,WAAW,IAAIF,cAAJ,EAAjB;AACA,WAAOE,SAASd,QAAT,CAAkBE,KAAlB,CAAwBY,QAAxB,EAAkCX,SAAlC,CAAP;AACD,GAHD;AAID,CAPD","file":"deferrable.js","sourcesContent":["'use strict';\n\nconst util = require('util');\n\n\n/**\n * A collection of properties related to deferrable constraints. It can be used to\n * make foreign key constraints deferrable and to set the constraints within a\n * transaction. This is only supported in PostgreSQL.\n *\n * The foreign keys can be configured like this. It will create a foreign key\n * that will check the constraints immediately when the data was inserted.\n *\n * ```js\n * sequelize.define('Model', {\n *   foreign_id: {\n *     type: Sequelize.INTEGER,\n *     references: {\n *       model: OtherModel,\n *       key: 'id',\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n *     }\n *   }\n * });\n * ```\n *\n * The constraints can be configured in a transaction like this. It will\n * trigger a query once the transaction has been started and set the constraints\n * to be checked at the very end of the transaction.\n *\n * ```js\n * sequelize.transaction({\n *   deferrable: Sequelize.Deferrable.SET_DEFERRED\n * });\n * ```\n *\n * @property INITIALLY_DEFERRED Defer constraints checks to the end of transactions.\n * @property INITIALLY_IMMEDIATE Trigger the constraint checks immediately\n * @property NOT Set the constraints to not deferred. This is the default in PostgreSQL and it make it impossible to dynamically defer the constraints within a transaction.\n * @property SET_DEFERRED\n * @property SET_IMMEDIATE\n */\nconst Deferrable = module.exports = {\n  INITIALLY_DEFERRED,\n  INITIALLY_IMMEDIATE,\n  NOT,\n  SET_DEFERRED,\n  SET_IMMEDIATE\n};\n\nfunction ABSTRACT() {}\n\nABSTRACT.prototype.toString = function() {\n  return this.toSql.apply(this, arguments);\n};\n\nfunction INITIALLY_DEFERRED() {\n  if (!(this instanceof INITIALLY_DEFERRED)) {\n    return new INITIALLY_DEFERRED();\n  }\n}\nutil.inherits(INITIALLY_DEFERRED, ABSTRACT);\n\nINITIALLY_DEFERRED.prototype.toSql = function() {\n  return 'DEFERRABLE INITIALLY DEFERRED';\n};\n\nfunction INITIALLY_IMMEDIATE() {\n  if (!(this instanceof INITIALLY_IMMEDIATE)) {\n    return new INITIALLY_IMMEDIATE();\n  }\n}\nutil.inherits(INITIALLY_IMMEDIATE, ABSTRACT);\n\nINITIALLY_IMMEDIATE.prototype.toSql = function() {\n  return 'DEFERRABLE INITIALLY IMMEDIATE';\n};\n\nfunction NOT() {\n  if (!(this instanceof NOT)) {\n    return new NOT();\n  }\n}\nutil.inherits(NOT, ABSTRACT);\n\nNOT.prototype.toSql = function() {\n  return 'NOT DEFERRABLE';\n};\n\nfunction SET_DEFERRED(constraints) {\n  if (!(this instanceof SET_DEFERRED)) {\n    return new SET_DEFERRED(constraints);\n  }\n\n  this.constraints = constraints;\n}\nutil.inherits(SET_DEFERRED, ABSTRACT);\n\nSET_DEFERRED.prototype.toSql = function(queryGenerator) {\n  return queryGenerator.setDeferredQuery(this.constraints);\n};\n\nfunction SET_IMMEDIATE(constraints) {\n  if (!(this instanceof SET_IMMEDIATE)) {\n    return new SET_IMMEDIATE(constraints);\n  }\n\n  this.constraints = constraints;\n}\nutil.inherits(SET_IMMEDIATE, ABSTRACT);\n\nSET_IMMEDIATE.prototype.toSql = function(queryGenerator) {\n  return queryGenerator.setImmediateQuery(this.constraints);\n};\n\nObject.keys(Deferrable).forEach(key => {\n  const DeferrableType = Deferrable[key];\n\n  DeferrableType.toString = function() {\n    const instance = new DeferrableType();\n    return instance.toString.apply(instance, arguments);\n  };\n});\n"]}