{"version":3,"sources":["../../../sequelize-es6/lib/associations/helpers.js"],"names":["Utils","require","checkNamingCollision","association","source","rawAttributes","hasOwnProperty","as","Error","name","exports","addForeignKeyConstraints","newAttribute","target","options","key","foreignKeyConstraint","onDelete","onUpdate","primaryKeys","_","chain","keys","filter","primaryKey","map","field","value","length","_schema","references","model","sequelize","queryInterface","QueryGenerator","addSchema","tableName","_schemaDelimiter","mixinMethods","obj","methods","aliases","method","accessors","realMethod","instance","args","concat","Array","from","arguments","apply"],"mappings":"AAAA;;AAEA,IAAMA,QAAQC,QAAQ,YAAR,CAAd;;AAEA,SAASC,oBAAT,CAA8BC,WAA9B,EAA2C;AACzC,MAAIA,YAAYC,MAAZ,CAAmBC,aAAnB,CAAiCC,cAAjC,CAAgDH,YAAYI,EAA5D,CAAJ,EAAqE;AACnE,UAAM,IAAIC,KAAJ,CACJ,0CAA0CL,YAAYI,EAAtD,GACA,uBADA,GAC0BJ,YAAYI,EADtC,GAC2C,cAD3C,GAC4DJ,YAAYC,MAAZ,CAAmBK,IAD/E,GAEA,iFAHI,CAAN;AAKD;AACF;AACDC,QAAQR,oBAAR,GAA+BA,oBAA/B;;AAEA,SAASS,wBAAT,CAAkCC,YAAlC,EAAgDR,MAAhD,EAAwDS,MAAxD,EAAgEC,OAAhE,EAAyEC,GAAzE,EAA8E;AAC5E;AACA;;AAEA,MAAID,QAAQE,oBAAR,IAAgCF,QAAQG,QAAxC,IAAoDH,QAAQI,QAAhE,EAA0E;;AAExE;AACA,QAAMC,cAAcnB,MAAMoB,CAAN,CAAQC,KAAR,CAAcjB,OAAOC,aAArB,EAAoCiB,IAApC,GACjBC,MADiB,CACV;AAAA,aAAOnB,OAAOC,aAAP,CAAqBU,GAArB,EAA0BS,UAAjC;AAAA,KADU,EAEjBC,GAFiB,CAEb;AAAA,aAAOrB,OAAOC,aAAP,CAAqBU,GAArB,EAA0BW,KAA1B,IAAmCX,GAA1C;AAAA,KAFa,EAEkCY,KAFlC,EAApB;;AAIA,QAAIR,YAAYS,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,UAAIxB,OAAOyB,OAAX,EAAoB;AAClBjB,qBAAakB,UAAb,GAA0B;AACxBC,iBAAO3B,OAAO4B,SAAP,CAAiBC,cAAjB,CAAgCC,cAAhC,CAA+CC,SAA/C,CAAyD;AAC9DC,uBAAWhC,OAAOgC,SAD4C;AAE9DP,qBAASzB,OAAOyB,OAF8C;AAG9DQ,8BAAkBjC,OAAOiC;AAHqC,WAAzD;AADiB,SAA1B;AAOD,OARD,MAQO;AACLzB,qBAAakB,UAAb,GAA0B,EAAEC,OAAO3B,OAAOgC,SAAhB,EAA1B;AACD;;AAEDxB,mBAAakB,UAAb,CAAwBf,GAAxB,GAA8BA,OAAOI,YAAY,CAAZ,CAArC;AACAP,mBAAaK,QAAb,GAAwBH,QAAQG,QAAhC;AACAL,mBAAaM,QAAb,GAAwBJ,QAAQI,QAAhC;AACD;AACF;AACF;AACDR,QAAQC,wBAAR,GAAmCA,wBAAnC;;AAEA;;;;;;;;;AASA,SAAS2B,YAAT,CAAsBnC,WAAtB,EAAmCoC,GAAnC,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0D;AACxDA,YAAUA,WAAW,EAArB;;AADwD;AAAA;AAAA;;AAAA;AAGxD,yBAAqBD,OAArB,8HAA8B;AAAA,UAAnBE,MAAmB;;AAC5B;AACA,UAAI,CAACH,IAAIpC,YAAYwC,SAAZ,CAAsBD,MAAtB,CAAJ,CAAL,EAAyC;AAAA;AACvC,cAAME,aAAaH,QAAQC,MAAR,KAAmBA,MAAtC;;AAEAH,cAAIpC,YAAYwC,SAAZ,CAAsBD,MAAtB,CAAJ,IAAqC,YAAW;AAC9C,gBAAMG,WAAW,IAAjB;AACA,gBAAMC,OAAO,CAACD,QAAD,EAAWE,MAAX,CAAkBC,MAAMC,IAAN,CAAWC,SAAX,CAAlB,CAAb;;AAEA,mBAAO/C,YAAYyC,UAAZ,EAAwBO,KAAxB,CAA8BhD,WAA9B,EAA2C2C,IAA3C,CAAP;AACD,WALD;AAHuC;AASxC;AACF;AAfuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBzD;AACDpC,QAAQ4B,YAAR,GAAuBA,YAAvB","file":"helpers.js","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\n\nfunction checkNamingCollision(association) {\n  if (association.source.rawAttributes.hasOwnProperty(association.as)) {\n    throw new Error(\n      'Naming collision between attribute \\'' + association.as +\n      '\\' and association \\'' + association.as + '\\' on model ' + association.source.name +\n      '. To remedy this, change either foreignKey or as in your association definition'\n    );\n  }\n}\nexports.checkNamingCollision = checkNamingCollision;\n\nfunction addForeignKeyConstraints(newAttribute, source, target, options, key) {\n  // FK constraints are opt-in: users must either set `foreignKeyConstraints`\n  // on the association, or request an `onDelete` or `onUpdate` behaviour\n\n  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {\n\n    // Find primary keys: composite keys not supported with this approach\n    const primaryKeys = Utils._.chain(source.rawAttributes).keys()\n      .filter(key => source.rawAttributes[key].primaryKey)\n      .map(key => source.rawAttributes[key].field || key).value();\n\n    if (primaryKeys.length === 1) {\n      if (source._schema) {\n        newAttribute.references = {\n          model: source.sequelize.queryInterface.QueryGenerator.addSchema({\n            tableName: source.tableName,\n            _schema: source._schema,\n            _schemaDelimiter: source._schemaDelimiter\n          })\n        };\n      } else {\n        newAttribute.references = { model: source.tableName };\n      }\n\n      newAttribute.references.key = key || primaryKeys[0];\n      newAttribute.onDelete = options.onDelete;\n      newAttribute.onUpdate = options.onUpdate;\n    }\n  }\n}\nexports.addForeignKeyConstraints = addForeignKeyConstraints;\n\n/**\n * Mixin (inject) association methods to model prototype\n *\n * @private\n * @param {Object} Association instance\n * @param {Object} Model prototype\n * @param {Array} Method names to inject\n * @param {Object} Mapping between model and association method names\n */\nfunction mixinMethods(association, obj, methods, aliases) {\n  aliases = aliases || {};\n\n  for (const method of methods) {\n    // don't override custom methods\n    if (!obj[association.accessors[method]]) {\n      const realMethod = aliases[method] || method;\n\n      obj[association.accessors[method]] = function() {\n        const instance = this;\n        const args = [instance].concat(Array.from(arguments));\n\n        return association[realMethod].apply(association, args);\n      };\n    }\n  }\n}\nexports.mixinMethods = mixinMethods;\n"]}