{"version":3,"sources":["../../../sequelize-es6/lib/associations/mixin.js"],"names":["Utils","require","_","HasOne","HasMany","BelongsToMany","BelongsTo","Mixin","hasMany","target","options","prototype","sequelize","Model","Error","name","source","hooks","undefined","Boolean","useHooks","extend","omit","association","associations","associationAccessor","injectAttributes","mixin","belongsToMany","targetModel","sourceModel","timestamps","getAssociations","values","filter","getAssociationForAlias","alias","find","verifyAssociationAlias","as","isAliased","singleLinked","Type","lowercaseFirst","toString","hasOne","belongsTo","module","exports","default"],"mappings":"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","file":"mixin.js","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst _ = require('lodash');\nconst HasOne = require('./has-one');\nconst HasMany = require('./has-many');\nconst BelongsToMany = require('./belongs-to-many');\nconst BelongsTo = require('./belongs-to');\n\nconst Mixin = {\n  hasMany(target, options) { // testhint options:none\n    if (!target.prototype || !(target.prototype instanceof this.sequelize.Model)) {\n      throw new Error(this.name + '.hasMany called with something that\\'s not a subclass of Sequelize.Model');\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options = options || {};\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    options = _.extend(options, _.omit(source.options, ['hooks']));\n\n    // the id is in the foreign table or in a connecting table\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association.injectAttributes();\n    association.mixin(source.prototype);\n\n    return association;\n  },\n\n  belongsToMany(targetModel, options) { // testhint options:none\n    if (!targetModel.prototype || !(targetModel.prototype instanceof this.sequelize.Model)) {\n      throw new Error(this.name + '.belongsToMany called with something that\\'s not a subclass of Sequelize.Model');\n    }\n\n    const sourceModel = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options = options || {};\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === undefined ? this.sequelize.options.timestamps : options.timestamps;\n    options = _.extend(options, _.omit(sourceModel.options, ['hooks', 'timestamps', 'scopes', 'defaultScope']));\n\n    // the id is in the foreign table or in a connecting table\n    const association = new BelongsToMany(sourceModel, targetModel, options);\n    sourceModel.associations[association.associationAccessor] = association;\n\n    association.injectAttributes();\n    association.mixin(sourceModel.prototype);\n\n    return association;\n  },\n\n  getAssociations(target) {\n    return _.values(this.associations).filter(association => association.target.name === target.name);\n  },\n\n  getAssociationForAlias(target, alias) {\n    // Two associations cannot have the same alias, so we can use find instead of filter\n    return this.getAssociations(target).find(association => this.verifyAssociationAlias(association, alias)) || null;\n  },\n\n  verifyAssociationAlias(association, alias) {\n    if (alias) {\n      return association.as === alias;\n    } else {\n      return !association.isAliased;\n    }\n  }\n};\n\n// The logic for hasOne and belongsTo is exactly the same\nfunction singleLinked(Type) {\n  return function(target, options) { // testhint options:none\n    if (!target.prototype || !(target.prototype instanceof this.sequelize.Model)) {\n      throw new Error(this.name + '.' + Utils.lowercaseFirst(Type.toString()) + ' called with something that\\'s not a subclass of Sequelize.Model');\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options = options || {};\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    // the id is in the foreign table\n    const association = new Type(source, target, _.extend(options, source.options));\n    source.associations[association.associationAccessor] = association;\n\n    association.injectAttributes();\n    association.mixin(source.prototype);\n\n    return association;\n  };\n}\n\nMixin.hasOne = singleLinked(HasOne);\n\nMixin.belongsTo = singleLinked(BelongsTo);\n\nmodule.exports = Mixin;\nmodule.exports.Mixin = Mixin;\nmodule.exports.default = Mixin;\n"]}