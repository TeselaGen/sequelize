{"version":3,"sources":["../../../sequelize-es6/lib/associations/has-one.js"],"names":["Utils","require","Helpers","_","Association","HasOne","source","target","options","associationType","isSingleAssociation","foreignKeyAttribute","as","isAliased","name","singular","isObject","foreignKey","fieldName","camelizeIf","underscoredIf","singularize","underscored","primaryKeyAttribute","join","sourceIdentifier","sourceKey","sourceKeyIsPrimary","associationAccessor","useHooks","rawAttributes","identifierField","field","uppercaseFirst","accessors","get","set","create","newAttributes","keyType","type","defaults","allowNull","mergeDefaults","constraints","onDelete","onUpdate","addForeignKeyConstraints","refreshAttributes","checkNamingCollision","obj","methods","mixinMethods","instances","association","where","Target","instance","cloneDeep","hasOwnProperty","scope","unscoped","schema","schemaDelimiter","Array","isArray","undefined","$in","map","assign","$and","findAll","then","result","raw","results","findOne","sourceInstance","associatedInstance","alreadyAssociated","oldInstance","every","primaryKeyAttributes","attribute","save","extend","fields","tmpInstance","build","isNewRecord","values","Object","keys","push","module","exports"],"mappings":"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","file":"has-one.js","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`.\n * This is almost the same as `belongsTo` with one exception - The foreign key will be defined on the target model.\n *\n * @see {@link Model.hasOne}\n */\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasOne';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(Utils.singularize(this.options.as || this.source.name), this.target.options.underscored),\n          this.source.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.sourceIdentifier = this.source.primaryKeyAttribute;\n    this.sourceKey = this.source.primaryKeyAttribute;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the target table\n  injectAttributes() {\n    const newAttributes = {};\n    const keyType = this.source.rawAttributes[this.source.primaryKeyAttribute].type;\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || keyType,\n      allowNull : true\n    });\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(this.target.rawAttributes[this.foreignKey], this.source, this.target, this.options);\n\n    // Sync attributes and setters/getters to Model prototype\n    this.target.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.foreignKey] = {\n        $in: instances.map(instance => instance.get(association.sourceKey))\n      };\n    } else {\n      where[association.foreignKey] = instance.get(association.sourceKey);\n    }\n\n    if (association.scope) {\n      _.assign(where, association.scope);\n    }\n\n    options.where = options.where ?\n                    {$and: [where, options.where]} :\n                    where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.sourceKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.foreignKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of a persisted instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to getAssociation and `target.save`\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    let alreadyAssociated;\n\n    options = _.assign({}, options, {\n      scope: false\n    });\n\n    return sourceInstance[association.accessors.get](options).then(oldInstance => {\n      // TODO Use equals method once #5605 is resolved\n      alreadyAssociated = oldInstance && associatedInstance && _.every(association.target.primaryKeyAttributes, attribute =>\n        oldInstance.get(attribute, {raw: true}) === (associatedInstance.get ? associatedInstance.get(attribute, {raw: true}) : associatedInstance)\n      );\n\n      if (oldInstance && !alreadyAssociated) {\n        oldInstance[association.foreignKey] = null;\n        return oldInstance.save(_.extend({}, options, {\n          fields: [association.foreignKey],\n          allowNull: [association.foreignKey],\n          association: true\n        }));\n      }\n    }).then(() => {\n      if (associatedInstance && !alreadyAssociated) {\n        if (!(associatedInstance instanceof association.target)) {\n          const tmpInstance = {};\n          tmpInstance[association.target.primaryKeyAttribute] = associatedInstance;\n          associatedInstance = association.target.build(tmpInstance, {\n            isNewRecord: false\n          });\n        }\n\n        _.assign(associatedInstance, association.scope);\n        associatedInstance.set(association.foreignKey, sourceInstance.get(association.sourceIdentifier));\n\n        return associatedInstance.save(options);\n      }\n\n      return null;\n    });\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create} for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, options) {\n    const association = this;\n\n    values = values || {};\n    options = options || {};\n\n    if (association.scope) {\n      for (const attribute of Object.keys(association.scope)) {\n        values[attribute] = association.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n\n    values[association.foreignKey] = sourceInstance.get(association.sourceIdentifier);\n    if (options.fields) {\n      options.fields.push(association.foreignKey);\n    }\n\n    return association.target.create(values, options);\n  }\n}\n\nmodule.exports = HasOne;\n"]}