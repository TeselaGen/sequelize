{"version":3,"sources":["../../../sequelize-es6/lib/associations/belongs-to.js"],"names":["Utils","require","Helpers","_","Transaction","Association","BelongsTo","source","target","options","associationType","isSingleAssociation","foreignKeyAttribute","as","isAliased","name","singular","isObject","foreignKey","fieldName","camelizeIf","underscoredIf","underscored","primaryKeyAttribute","join","identifier","rawAttributes","identifierField","field","targetKey","targetKeyField","targetKeyIsPrimary","targetIdentifier","associationAccessor","useHooks","uppercaseFirst","accessors","get","set","create","newAttributes","defaults","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","obj","methods","mixinMethods","instances","association","where","Target","instance","cloneDeep","hasOwnProperty","scope","unscoped","schema","schemaDelimiter","Array","isArray","undefined","$in","map","findById","limit","$and","findAll","then","result","raw","results","findOne","sourceInstance","associatedInstance","value","save","extend","fields","values","fieldsOrOptions","transaction","logging","newAssociatedObject","module","exports","default"],"mappings":"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","file":"belongs-to.js","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Transaction = require('../transaction');\nconst Association = require('./base');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull : true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        $in: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findById(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n                    {$and: [where, options.where]} :\n                    where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;\n"]}