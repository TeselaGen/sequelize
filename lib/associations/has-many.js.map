{"version":3,"sources":["../../../sequelize-es6/lib/associations/has-many.js"],"names":["Utils","require","Helpers","_","Association","HasMany","source","target","options","associationType","targetAssociation","sequelize","through","isMultiAssociation","foreignKeyAttribute","Error","isSelfAssociation","as","isAliased","isPlainObject","name","plural","singular","singularize","isObject","foreignKey","fieldName","camelizeIf","underscoredIf","underscored","primaryKeyAttribute","join","rawAttributes","identifierField","field","foreignKeyField","sourceKey","sourceKeyField","fieldRawAttributesMap","sourceKeyAttribute","sourceIdentifier","associationAccessor","uppercaseFirst","accessors","get","set","addMultiple","add","create","remove","removeMultiple","hasSingle","hasAll","count","newAttributes","constraintOptions","clone","defaults","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","obj","methods","aliases","mixinMethods","instances","association","where","Model","instance","values","Array","isArray","undefined","cloneDeep","scope","assign","map","raw","limit","length","groupedLimit","on","$in","$and","hasOwnProperty","unscoped","schema","schemaDelimiter","findAll","then","results","result","push","model","attributes","fn","col","primaryKeyField","plain","parseInt","sourceInstance","targetInstances","$or","_where","associatedObjects","toInstanceArray","promises","obsoleteAssociations","oldAssociations","filter","find","old","unassociatedObjects","updateWhere","update","associatedObject","unassociatedObject","Promise","all","return","resolve","targetInstance","fields","Object","keys","attribute","module","exports","default"],"mappings":"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","file":"has-many.js","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\n\n/**\n * One-to-many association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n *\n * @see {@link Model.hasMany}\n */\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = options.through;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.options.through) {\n      throw new Error('N:M associations are not supported with hasMany. Use belongsToMany instead');\n    }\n\n    /*\n    * If self association, this is the target association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    /*\n    * Foreign key setup\n    */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.source.options.name.singular, this.source.options.underscored),\n          this.source.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    if (this.target.rawAttributes[this.sourceKey]) {\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyField = this.sourceKey;\n    }\n\n    if (this.source.fieldRawAttributesMap[this.sourceKey]) {\n      this.sourceKeyAttribute = this.source.fieldRawAttributesMap[this.sourceKey].fieldName;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n    }\n    this.sourceIdentifier = this.sourceKey;\n    this.associationAccessor = this.as;\n\n    // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it\n    const plural = Utils.uppercaseFirst(this.options.name.plural);\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + plural,\n      set: 'set' + plural,\n      addMultiple: 'add' + plural,\n      add: 'add' + singular,\n      create: 'create' + singular,\n      remove: 'remove' + singular,\n      removeMultiple: 'remove' + plural,\n      hasSingle: 'has' + singular,\n      hasAll: 'has' + plural,\n      count: 'count' + plural\n    };\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  injectAttributes() {\n    const newAttributes = {};\n    const constraintOptions = _.clone(this.options); // Create a new options object for use with addForeignKeyConstraints, to avoid polluting this.options in case it is later used for a n:m\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n      allowNull : true\n    });\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      constraintOptions.onUpdate = constraintOptions.onUpdate || 'CASCADE';\n    }\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param {Object} [options]\n   * @param {Object} [options.where] An optional where clause to limit the associated models\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findAll}  for a full explanation of options\n   * @return {Promise<Array<Model>>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Model = association.target;\n    let instance;\n    let values;\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    options = Utils.cloneDeep(options) || {};\n\n    if (association.scope) {\n      _.assign(where, association.scope);\n    }\n\n    if (instances) {\n      values = instances.map(instance => instance.get(association.sourceKey, {raw: true}));\n\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: association,\n          values\n        };\n\n        delete options.limit;\n      } else {\n        where[association.foreignKey] = {\n          $in: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[association.foreignKey] = instance.get(association.sourceKey, {raw: true});\n    }\n\n\n    options.where = options.where ?\n                    {$and: [where, options.where]} :\n                    where;\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n\n\n    return Model.findAll(options).then(results => {\n      if (instance) return results;\n\n      const result = {};\n      for (const instance of instances) {\n        result[instance.get(association.sourceKey, {raw: true})] = [];\n      }\n\n      for (const instance of results) {\n        result[instance.get(association.foreignKey, {raw: true})].push(instance);\n      }\n\n      return result;\n    });\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Object} [options]\n   * @param {Object} [options.where] An optional where clause to limit the associated models\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @return {Promise<Integer>}\n   */\n  count(instance, options) {\n    const association = this;\n    const model = association.target;\n    const sequelize = model.sequelize;\n\n    options = Utils.cloneDeep(options);\n    options.attributes = [\n      [sequelize.fn('COUNT', sequelize.col(model.primaryKeyField)), 'count']\n    ];\n    options.raw = true;\n    options.plain = true;\n\n    return association.get(instance, options).then(result => parseInt(result.count, 10));\n  }\n\n  /**\n   * Check if one or more rows are associated with `this`.\n   *\n   * @param {Model[]|Model|string[]|String|number[]|Number} [instance(s)]\n   * @param {Object} [options] Options passed to getAssociations\n   * @return {Promise}\n   */\n  has(sourceInstance, targetInstances, options) {\n    const association = this;\n    const where = {};\n\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n\n    options = _.assign({}, options, {\n      scope: false,\n      raw: true\n    });\n\n    where.$or = targetInstances.map(instance => {\n      if (instance instanceof association.target) {\n        return instance.where();\n      } else {\n        const _where = {};\n        _where[association.target.primaryKeyAttribute] = instance;\n        return _where;\n      }\n    });\n\n    options.where = {\n      $and: [\n        where,\n        options.where\n      ]\n    };\n\n    return association.get(sourceInstance, options).then(associatedObjects => associatedObjects.length === targetInstances.length);\n  }\n\n  /**\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n   *\n   * @param {Array<Model|String|Number>} [newAssociations] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.\n   * @param {Object} [options] Options passed to `target.findAll` and `update`.\n   * @param {Object} [options.validate] Run validation for the join model\n   * @return {Promise}\n   */\n  set(sourceInstance, targetInstances, options) {\n    const association = this;\n\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = association.toInstanceArray(targetInstances);\n    }\n\n    return association.get(sourceInstance, _.defaults({scope: false, raw: true}, options)).then(oldAssociations => {\n      const promises = [];\n      const obsoleteAssociations = oldAssociations.filter(old =>\n        !_.find(targetInstances, obj =>\n          obj[association.target.primaryKeyAttribute] === old[association.target.primaryKeyAttribute]\n        )\n      );\n      const unassociatedObjects = targetInstances.filter(obj =>\n        !_.find(oldAssociations, old =>\n          obj[association.target.primaryKeyAttribute] === old[association.target.primaryKeyAttribute]\n        )\n      );\n      let updateWhere;\n      let update;\n\n      if (obsoleteAssociations.length > 0) {\n        update = {};\n        update[association.foreignKey] = null;\n\n        updateWhere = {};\n\n        updateWhere[association.target.primaryKeyAttribute] = obsoleteAssociations.map(associatedObject =>\n          associatedObject[association.target.primaryKeyAttribute]\n        );\n\n        promises.push(association.target.unscoped().update(\n          update,\n          _.defaults({\n            where: updateWhere\n          }, options)\n        ));\n      }\n\n      if (unassociatedObjects.length > 0) {\n        updateWhere = {};\n\n        update = {};\n        update[association.foreignKey] = sourceInstance.get(association.sourceKey);\n\n        _.assign(update, association.scope);\n        updateWhere[association.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject =>\n          unassociatedObject[association.target.primaryKeyAttribute]\n        );\n\n        promises.push(association.target.unscoped().update(\n          update,\n          _.defaults({\n            where: updateWhere\n          }, options)\n        ));\n      }\n\n      return Utils.Promise.all(promises).return(sourceInstance);\n    });\n  }\n\n  /**\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\n   * or a mixed array of Model / string / numbers to associate multiple rows.\n   *\n   * @param {Model[]|Model|string[]|string|number[]|number} [newAssociation(s)]\n   * @param {Object} [options] Options passed to `target.update`.\n   * @return {Promise}\n   */\n  add(sourceInstance, targetInstances, options) {\n    if (!targetInstances) return Utils.Promise.resolve();\n\n    const association = this;\n    const update = {};\n    const where = {};\n\n    options = options || {};\n\n    targetInstances = association.toInstanceArray(targetInstances);\n\n    update[association.foreignKey] = sourceInstance.get(association.sourceKey);\n    _.assign(update, association.scope);\n\n    where[association.target.primaryKeyAttribute] = targetInstances.map(unassociatedObject =>\n      unassociatedObject.get(association.target.primaryKeyAttribute)\n    );\n\n    return association.target.unscoped().update(update, _.defaults({where}, options)).return(sourceInstance);\n  }\n\n  /**\n   * Un-associate one or several target rows.\n   *\n   * @param {Model[]|Model|String[]|string|Number[]|number} [oldAssociatedInstance(s)]\n   * @param {Object} [options] Options passed to `target.update`\n   * @return {Promise}\n   */\n  remove(sourceInstance, targetInstances, options) {\n    const association = this;\n    const update = {};\n    const where = {};\n\n    options = options || {};\n    targetInstances = association.toInstanceArray(targetInstances);\n\n    update[association.foreignKey] = null;\n\n    where[association.foreignKey] = sourceInstance.get(association.sourceKey);\n    where[association.target.primaryKeyAttribute] = targetInstances.map(targetInstance =>\n      targetInstance.get(association.target.primaryKeyAttribute)\n    );\n\n    return association.target.unscoped().update(update, _.defaults({where}, options)).return(this);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create`.\n   * @return {Promise}\n   */\n  create(sourceInstance, values, options) {\n    const association = this;\n\n    options = options || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (values === undefined) {\n      values = {};\n    }\n\n    if (association.scope) {\n      for (const attribute of Object.keys(association.scope)) {\n        values[attribute] = association.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n\n    values[association.foreignKey] = sourceInstance.get(association.sourceKey);\n    if (options.fields) options.fields.push(association.foreignKey);\n    return association.target.create(values, options);\n  }\n}\n\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;\n"]}