{"version":3,"sources":["../../sequelize-es6/lib/model-manager.js"],"names":["Toposort","require","_","ModelManager","sequelize","models","model","push","name","modelToRemove","filter","against","options","defaults","attribute","iterator","sorter","sorted","dep","reverse","deps","tableName","getTableName","isObject","schema","attrName","rawAttributes","hasOwnProperty","references","add","sort","module","exports","default"],"mappings":"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","file":"model-manager.js","sourcesContent":["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n\n    const model = this.models.filter(model => model[options.attribute] === against);\n\n    return model ? model[0] : null;\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables. Will\n   * take foreign key constraints into account so that dependencies are visited\n   * before dependents.\n   * @private\n   */\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = tableName.schema + '.' + tableName.tableName;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (model.rawAttributes.hasOwnProperty(attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = dep.schema + '.' + dep.tableName;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n"]}