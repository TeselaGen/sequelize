{"version":3,"sources":["../../sequelize-es6/lib/query-interface.js"],"names":["Utils","require","_","DataTypes","SQLiteQueryInterface","MSSSQLQueryInterface","MySQLQueryInterface","OracleQueryInterface","Transaction","Promise","QueryTypes","QueryInterface","sequelize","QueryGenerator","dialect","schema","options","sql","createSchema","query","dropSchema","_dialect","supports","schemas","drop","showAllSchemas","map","schemaName","assign","raw","type","SELECT","showSchemasSql","showSchemasQuery","then","flatten","schemaNames","value","schema_name","versionQuery","VERSION","tableName","attributes","model","keys","Object","keyLen","length","i","clone","mapValues","isPlainObject","attribute","allowNull","normalizeAttribute","promises","ENUM","pgListEnums","field","push","plain","all","enumIdx","results","pgEnum","enumVals","fromArray","enum_value","vals","rawAttributes","values","forEach","idx","valueOptions","before","after","indexOf","supportsSearchPath","pgEnumAdd","_schema","addSchema","attributesToSQL","context","createTableQuery","cascade","force","dropTableQuery","instanceTable","modelManager","getModel","getTableName","pgEnumDrop","get","dropAllTables","call","skip","each","tableNames","dropTable","showAllTables","foreignKeysAreEnabled","result","foreign_keys","getForeignKeysForTables","normalizedTableName","isObject","foreignKeys","dropForeignKeyQuery","foreignKey","getDialect","resolve","pgEscapeAndQuote","enum_name","renameTableQuery","SHOWTABLES","showTablesSql","showTablesQuery","schemaDelimiter","describeTableQuery","addOptionsForDescribe","DESCRIBE","isEmpty","data","reject","table","key","Error","addColumnQuery","attributeName","removeColumn","removeColumnQuery","dataTypeOrOptions","normalizeDataType","changeColumn","changeColumnQuery","attrNameBefore","attrNameAfter","describeTable","_options","defaultValue","renameColumn","renameColumnQuery","rawTablename","Array","isArray","fields","cloneDeep","addIndexQuery","showIndexesQuery","SHOWINDEXES","indexes","nameIndexes","getForeignKeysQuery","config","database","compact","r","constraint_name","indexNameOrAttributes","removeIndexQuery","name","addConstraint","addConstraintQuery","showConstraintsQuery","SHOWCONSTRAINTS","constraintName","removeConstraint","removeConstraintQuery","instance","hasTrigger","constructor","insertQuery","INSERT","isNewRecord","valuesByField","updateValues","where","wheres","indexFields","uniqueKeys","unique","index","intersection","$or","UPSERT","upsertQuery","rowCount","undefined","records","bulkInsertQuery","identifier","_modelOptions","updateQuery","UPDATE","find","models","cascades","deleteQuery","associations","association","onDelete","toLowerCase","useHooks","accessors","instances","destroy","defaults","limit","selectQuery","arithmeticQuery","attributeSelector","Model","dataType","DECIMAL","FLOAT","parseFloat","INTEGER","BIGINT","parseInt","DATE","isNull","isDate","Date","STRING","triggerName","timingType","fireOnArray","functionName","functionParams","optionsArray","createTrigger","dropTrigger","oldTriggerName","newTriggerName","renameTrigger","params","returnType","language","body","createFunction","dropFunction","oldFunctionName","newFunctionName","renameFunction","quoteIdentifier","quoteTable","identifiers","quoteIdentifiers","escape","transaction","parent","setAutocommitQuery","setIsolationLevelQuery","startTransactionQuery","deferConstraintsQuery","commitTransactionQuery","promise","finished","rollbackTransactionQuery","module","exports","default"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,QAAQC,QAAQ,SAAR,CAAd;AACA,IAAMC,IAAID,QAAQ,QAAR,CAAV;AACA,IAAME,YAAYF,QAAQ,cAAR,CAAlB;AACA,IAAMG,uBAAuBH,QAAQ,mCAAR,CAA7B;AACA,IAAMI,uBAAuBJ,QAAQ,kCAAR,CAA7B;AACA,IAAMK,sBAAsBL,QAAQ,kCAAR,CAA5B;AACA,IAAMM,uBAAuBN,QAAQ,mCAAR,CAA7B;AACA,IAAMO,cAAcP,QAAQ,eAAR,CAApB;AACA,IAAMQ,UAAUR,QAAQ,WAAR,CAAhB;AACA,IAAMS,aAAaT,QAAQ,eAAR,CAAnB;;AAEA;;;;;;IAKMU,c;AACJ,0BAAYC,SAAZ,EAAuB;AAAA;;AACrB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,cAAL,GAAsB,KAAKD,SAAL,CAAeE,OAAf,CAAuBD,cAA7C;AACD;;;;iCAEYE,M,EAAQC,O,EAAS;AAC5BA,gBAAUA,WAAW,EAArB;AACA,UAAMC,MAAM,KAAKJ,cAAL,CAAoBK,YAApB,CAAiCH,MAAjC,CAAZ;AACA,aAAO,KAAKH,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;+BAEUD,M,EAAQC,O,EAAS;AAC1BA,gBAAUA,WAAW,EAArB;AACA,UAAMC,MAAM,KAAKJ,cAAL,CAAoBO,UAApB,CAA+BL,MAA/B,CAAZ;AACA,aAAO,KAAKH,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;mCAEcA,O,EAAS;AAAA;;AACtBA,gBAAUA,WAAW,EAArB;;AAEA,UAAI,CAAC,KAAKH,cAAL,CAAoBQ,QAApB,CAA6BC,QAA7B,CAAsCC,OAA3C,EAAoD;AAClD,eAAO,KAAKX,SAAL,CAAeY,IAAf,CAAoBR,OAApB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKS,cAAL,CAAoBT,OAApB,EAA6BU,GAA7B,CAAiC;AAAA,iBAAc,MAAKN,UAAL,CAAgBO,UAAhB,EAA4BX,OAA5B,CAAd;AAAA,SAAjC,CAAP;AACD;AACF;;;mCAEcA,O,EAAS;;AAEtBA,gBAAUd,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB;AAC9Ba,aAAK,IADyB;AAE9BC,cAAM,KAAKlB,SAAL,CAAeF,UAAf,CAA0BqB;AAFF,OAAtB,CAAV;;AAKA,UAAMC,iBAAiB,KAAKnB,cAAL,CAAoBoB,gBAApB,EAAvB;;AAEA,aAAO,KAAKrB,SAAL,CAAeO,KAAf,CAAqBa,cAArB,EAAqChB,OAArC,EAA8CkB,IAA9C,CAAmD;AAAA,eAAelC,MAAME,CAAN,CAAQiC,OAAR,CACrEnC,MAAME,CAAN,CAAQwB,GAAR,CAAYU,WAAZ,EAAyB;AAAA,iBAASC,MAAMC,WAAN,GAAoBD,MAAMC,WAA1B,GAAwCD,KAAjD;AAAA,SAAzB,CADqE,CAAf;AAAA,OAAnD,CAAP;AAGD;;;oCAEerB,O,EAAS;AACvB,aAAO,KAAKJ,SAAL,CAAeO,KAAf,CACL,KAAKN,cAAL,CAAoB0B,YAApB,EADK,EAELrC,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAEc,MAAMpB,WAAW8B,OAAnB,EAAtB,CAFK,CAAP;AAID;;;gCAEWC,S,EAAWC,U,EAAY1B,O,EAAS2B,K,EAAO;AAAA;;AACjD,UAAMC,OAAOC,OAAOD,IAAP,CAAYF,UAAZ,CAAb;AACA,UAAMI,SAASF,KAAKG,MAApB;AACA,UAAI9B,MAAM,EAAV;AACA,UAAI+B,IAAI,CAAR;;AAEAhC,gBAAUd,EAAE+C,KAAF,CAAQjC,OAAR,KAAoB,EAA9B;;AAEA0B,mBAAa1C,MAAME,CAAN,CAAQgD,SAAR,CAAkBR,UAAlB,EAA8B,qBAAa;AACtD,YAAI,CAAC1C,MAAME,CAAN,CAAQiD,aAAR,CAAsBC,SAAtB,CAAL,EAAuC;AACrCA,sBAAY,EAAEtB,MAAMsB,SAAR,EAAmBC,WAAW,IAA9B,EAAZ;AACD;;AAEDD,oBAAY,OAAKxC,SAAL,CAAe0C,kBAAf,CAAkCF,SAAlC,CAAZ;;AAEA,eAAOA,SAAP;AACD,OARY,CAAb;;AAUA;AACA,UAAI,KAAKxC,SAAL,CAAeI,OAAf,CAAuBF,OAAvB,KAAmC,UAAvC,EAAmD;AACjD,YAAMyC,WAAW,EAAjB;;AAEA,aAAKP,IAAI,CAAT,EAAYA,IAAIF,MAAhB,EAAwBE,GAAxB,EAA6B;AAC3B,cAAIN,WAAWE,KAAKI,CAAL,CAAX,EAAoBlB,IAApB,YAAoC3B,UAAUqD,IAAlD,EAAwD;AACtDvC,kBAAM,KAAKJ,cAAL,CAAoB4C,WAApB,CAAgChB,SAAhC,EAA2CC,WAAWE,KAAKI,CAAL,CAAX,EAAoBU,KAApB,IAA6Bd,KAAKI,CAAL,CAAxE,EAAiFhC,OAAjF,CAAN;AACAuC,qBAASI,IAAT,CAAc,KAAK/C,SAAL,CAAeO,KAAf,CACZF,GADY,EAEZf,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAE4C,OAAO,IAAT,EAAe/B,KAAK,IAApB,EAA0BC,MAAMpB,WAAWqB,MAA3C,EAAtB,CAFY,CAAd;AAID;AACF;;AAED,eAAOtB,QAAQoD,GAAR,CAAYN,QAAZ,EAAsBrB,IAAtB,CAA2B,mBAAW;AAC3C,cAAMqB,WAAW,EAAjB;AACA,cAAIO,UAAU,CAAd;;AAEA,eAAKd,IAAI,CAAT,EAAYA,IAAIF,MAAhB,EAAwBE,GAAxB,EAA6B;AAC3B,gBAAIN,WAAWE,KAAKI,CAAL,CAAX,EAAoBlB,IAApB,YAAoC3B,UAAUqD,IAAlD,EAAwD;AACtD;AACA,kBAAI,CAACO,QAAQD,OAAR,CAAL,EAAuB;AACrB7C,sBAAM,OAAKJ,cAAL,CAAoBmD,MAApB,CAA2BvB,SAA3B,EAAsCC,WAAWE,KAAKI,CAAL,CAAX,EAAoBU,KAApB,IAA6Bd,KAAKI,CAAL,CAAnE,EAA4EN,WAAWE,KAAKI,CAAL,CAAX,CAA5E,EAAiGhC,OAAjG,CAAN;AACAuC,yBAASI,IAAT,CAAc,OAAK/C,SAAL,CAAeO,KAAf,CACZF,GADY,EAEZf,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAEa,KAAK,IAAP,EAAtB,CAFY,CAAd;AAID,eAND,MAMO,IAAI,CAAC,CAACkC,QAAQD,OAAR,CAAF,IAAsB,CAAC,CAACnB,KAA5B,EAAmC;AAAA;AACxC,sBAAMsB,WAAW,OAAKpD,cAAL,CAAoBqD,SAApB,CAA8BH,QAAQD,OAAR,EAAiBK,UAA/C,CAAjB;AACA,sBAAMC,OAAOzB,MAAM0B,aAAN,CAAoBzB,KAAKI,CAAL,CAApB,EAA6BsB,MAA1C;;AAEAF,uBAAKG,OAAL,CAAa,UAAClC,KAAD,EAAQmC,GAAR,EAAgB;AAC3B;AACA,wBAAMC,eAAevE,EAAE+C,KAAF,CAAQjC,OAAR,CAArB;AACAyD,iCAAaC,MAAb,GAAsB,IAAtB;AACAD,iCAAaE,KAAb,GAAqB,IAArB;;AAEA,wBAAIV,SAASW,OAAT,CAAiBvC,KAAjB,MAA4B,CAAC,CAAjC,EAAoC;AAClC,0BAAI+B,KAAKI,MAAM,CAAX,CAAJ,EAAmB;AACjBC,qCAAaC,MAAb,GAAsBN,KAAKI,MAAM,CAAX,CAAtB;AACD,uBAFD,MAGK,IAAIJ,KAAKI,MAAM,CAAX,CAAJ,EAAmB;AACtBC,qCAAaE,KAAb,GAAqBP,KAAKI,MAAM,CAAX,CAArB;AACD;AACDC,mCAAaI,kBAAb,GAAkC,KAAlC;AACAtB,+BAASI,IAAT,CAAc,OAAK/C,SAAL,CAAeO,KAAf,CAAqB,OAAKN,cAAL,CAAoBiE,SAApB,CAA8BrC,SAA9B,EAAyCG,KAAKI,CAAL,CAAzC,EAAkDX,KAAlD,EAAyDoC,YAAzD,CAArB,EAA6FA,YAA7F,CAAd;AACD;AACF,mBAhBD;AAiBAX;AArBwC;AAsBzC;AACF;AACF;;AAED,cAAI,CAACrB,UAAU1B,MAAX,KACDC,QAAQD,MAAR,IAAkB,CAAC,CAAC4B,KAAF,IAAWA,MAAMoC,OADlC,CAAJ,EACgD;AAC9CtC,wBAAY,OAAK5B,cAAL,CAAoBmE,SAApB,CAA8B;AACxCvC,kCADwC;AAExCsC,uBAAS,CAAC,CAACpC,KAAF,IAAWA,MAAMoC,OAAjB,IAA4B/D,QAAQD;AAFL,aAA9B,CAAZ;AAID;;AAED2B,uBAAa,OAAK7B,cAAL,CAAoBoE,eAApB,CAAoCvC,UAApC,EAAgD;AAC3DwC,qBAAS;AADkD,WAAhD,CAAb;AAGAjE,gBAAM,OAAKJ,cAAL,CAAoBsE,gBAApB,CAAqC1C,SAArC,EAAgDC,UAAhD,EAA4D1B,OAA5D,CAAN;;AAEA,iBAAOP,QAAQoD,GAAR,CAAYN,QAAZ,EAAsBrB,IAAtB,CAA2B,YAAM;AACtC,mBAAO,OAAKtB,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD,WAFM,CAAP;AAGD,SAvDM,CAAP;AAwDD,OArED,MAqEO;AACL,YAAI,CAACyB,UAAU1B,MAAX,KACDC,QAAQD,MAAR,IAAkB,CAAC,CAAC4B,KAAF,IAAWA,MAAMoC,OADlC,CAAJ,EACgD;AAC9CtC,sBAAY,KAAK5B,cAAL,CAAoBmE,SAApB,CAA8B;AACxCvC,gCADwC;AAExCsC,qBAAS,CAAC,CAACpC,KAAF,IAAWA,MAAMoC,OAAjB,IAA4B/D,QAAQD;AAFL,WAA9B,CAAZ;AAID;;AAED2B,qBAAa,KAAK7B,cAAL,CAAoBoE,eAApB,CAAoCvC,UAApC,EAAgD;AAC3DwC,mBAAS;AADkD,SAAhD,CAAb;AAGAjE,cAAM,KAAKJ,cAAL,CAAoBsE,gBAApB,CAAqC1C,SAArC,EAAgDC,UAAhD,EAA4D1B,OAA5D,CAAN;;AAEA,eAAO,KAAKJ,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;AACF;;;8BAESyB,S,EAAWzB,O,EAAS;AAAA;;AAC5B;AACAA,gBAAUd,EAAE+C,KAAF,CAAQjC,OAAR,KAAoB,EAA9B;AACAA,cAAQoE,OAAR,GAAkBpE,QAAQoE,OAAR,IAAmBpE,QAAQqE,KAA3B,IAAoC,KAAtD;;AAEA,UAAIpE,MAAM,KAAKJ,cAAL,CAAoByE,cAApB,CAAmC7C,SAAnC,EAA8CzB,OAA9C,CAAV;;AAEA,aAAO,KAAKJ,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,EAAmCkB,IAAnC,CAAwC,YAAM;AACnD,YAAMqB,WAAW,EAAjB;;AAEA;AACA;AACA,YAAI,OAAK3C,SAAL,CAAeI,OAAf,CAAuBF,OAAvB,KAAmC,UAAvC,EAAmD;AACjD,cAAMyE,gBAAgB,OAAK3E,SAAL,CAAe4E,YAAf,CAA4BC,QAA5B,CAAqChD,SAArC,EAAgD,EAAEW,WAAW,WAAb,EAAhD,CAAtB;;AAEA,cAAImC,aAAJ,EAAmB;AACjB,gBAAMG,eAAe,CAAC,CAAC1E,OAAD,IAAY,CAACA,QAAQD,MAArB,IAA+BC,QAAQD,MAAR,KAAmB,QAAlD,GAA6D,EAA7D,GAAkEC,QAAQD,MAAR,GAAiB,GAApF,IAA2F0B,SAAhH;;AAEA,gBAAMG,OAAOC,OAAOD,IAAP,CAAY2C,cAAclB,aAA1B,CAAb;AACA,gBAAMvB,SAASF,KAAKG,MAApB;;AAEA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAApB,EAA4BE,GAA5B,EAAiC;AAC/B,kBAAIuC,cAAclB,aAAd,CAA4BzB,KAAKI,CAAL,CAA5B,EAAqClB,IAArC,YAAqD3B,UAAUqD,IAAnE,EAAyE;AACvEvC,sBAAM,OAAKJ,cAAL,CAAoB8E,UAApB,CAA+BD,YAA/B,EAA6C9C,KAAKI,CAAL,CAA7C,CAAN;AACAhC,wBAAQ6D,kBAAR,GAA6B,KAA7B;AACAtB,yBAASI,IAAT,CAAc,OAAK/C,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0Bf,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAEa,KAAK,IAAP,EAAtB,CAA1B,CAAd;AACD;AACF;AACF;AACF;;AAED,eAAOpB,QAAQoD,GAAR,CAAYN,QAAZ,EAAsBqC,GAAtB,CAA0B,CAA1B,CAAP;AACD,OAzBM,CAAP;AA0BD;;;kCAEa5E,O,EAAS;AAAA;;AAErB,UAAI,KAAKJ,SAAL,CAAeI,OAAf,CAAuBF,OAAvB,KAAmC,QAAvC,EAAiD;AAC/C;AACA,eAAOP,qBAAqBsF,aAArB,CAAmCC,IAAnC,CAAwC,IAAxC,EAA8C9E,OAA9C,CAAP;AACD;;AAEDA,gBAAUA,WAAW,EAArB;AACA,UAAM+E,OAAO/E,QAAQ+E,IAAR,IAAgB,EAA7B;;AAEA,UAAMF,gBAAgB,SAAhBA,aAAgB;AAAA,eAAcpF,QAAQuF,IAAR,CAAaC,UAAb,EAAyB,qBAAa;AACxE;AACA,cAAIF,KAAKnB,OAAL,CAAanC,UAAUA,SAAV,IAAuBA,SAApC,MAAmD,CAAC,CAAxD,EAA2D;AACzD,mBAAO,OAAKyD,SAAL,CAAezD,SAAf,EAA0BvC,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAEoE,SAAS,IAAX,EAAtB,CAA1B,CAAP;AACD;AACF,SALmC,CAAd;AAAA,OAAtB;;AAOA,aAAO,KAAKe,aAAL,CAAmBnF,OAAnB,EAA4BkB,IAA5B,CAAiC,sBAAc;AACpD,YAAI,OAAKtB,SAAL,CAAeI,OAAf,CAAuBF,OAAvB,KAAmC,QAAvC,EAAiD;AAC/C,iBAAO,OAAKF,SAAL,CAAeO,KAAf,CAAqB,sBAArB,EAA6CH,OAA7C,EAAsDkB,IAAtD,CAA2D,kBAAU;AAC1E,gBAAMkE,wBAAwBC,OAAOC,YAAP,KAAwB,CAAtD;;AAEA,gBAAIF,qBAAJ,EAA2B;AACzB,qBAAO,OAAKxF,SAAL,CAAeO,KAAf,CAAqB,2BAArB,EAAkDH,OAAlD,EACJkB,IADI,CACC;AAAA,uBAAM2D,cAAcI,UAAd,CAAN;AAAA,eADD,EAEJ/D,IAFI,CAEC;AAAA,uBAAM,OAAKtB,SAAL,CAAeO,KAAf,CAAqB,0BAArB,EAAiDH,OAAjD,CAAN;AAAA,eAFD,CAAP;AAGD,aAJD,MAIO;AACL,qBAAO6E,cAAcI,UAAd,CAAP;AACD;AACF,WAVM,CAAP;AAWD,SAZD,MAYO;AACL,iBAAO,OAAKM,uBAAL,CAA6BN,UAA7B,EAAyCjF,OAAzC,EAAkDkB,IAAlD,CAAuD,uBAAe;AAC3E,gBAAMqB,WAAW,EAAjB;;AAEA0C,uBAAW1B,OAAX,CAAmB,qBAAa;AAC9B,kBAAIiC,sBAAsB/D,SAA1B;AACA,kBAAIzC,MAAME,CAAN,CAAQuG,QAAR,CAAiBhE,SAAjB,CAAJ,EAAiC;AAC/B+D,sCAAsB/D,UAAU1B,MAAV,GAAmB,GAAnB,GAAyB0B,UAAUA,SAAzD;AACD;;AAEDiE,0BAAYF,mBAAZ,EAAiCjC,OAAjC,CAAyC,sBAAc;AACrD,oBAAMtD,MAAM,OAAKJ,cAAL,CAAoB8F,mBAApB,CAAwClE,SAAxC,EAAmDmE,UAAnD,CAAZ;AACArD,yBAASI,IAAT,CAAc,OAAK/C,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAd;AACD,eAHD;AAID,aAVD;;AAYA,mBAAOP,QAAQoD,GAAR,CAAYN,QAAZ,EAAsBrB,IAAtB,CAA2B;AAAA,qBAAM2D,cAAcI,UAAd,CAAN;AAAA,aAA3B,CAAP;AACD,WAhBM,CAAP;AAiBD;AACF,OAhCM,CAAP;AAiCD;;;iCAEYjF,O,EAAS;AAAA;;AACpB,UAAI,KAAKJ,SAAL,CAAeiG,UAAf,OAAgC,UAApC,EAAgD;AAC9C,eAAOpG,QAAQqG,OAAR,EAAP;AACD;;AAED9F,gBAAUA,WAAW,EAArB;;AAEA,aAAO,KAAKyC,WAAL,CAAiB,IAAjB,EAAuBzC,OAAvB,EAAgCU,GAAhC,CAAoC;AAAA,eAAU,OAAKd,SAAL,CAAeO,KAAf,CACnD,OAAKN,cAAL,CAAoB8E,UAApB,CAA+B,IAA/B,EAAqC,IAArC,EAA2C,OAAK9E,cAAL,CAAoBkG,gBAApB,CAAqCV,OAAOW,SAA5C,CAA3C,CADmD,EAEnD9G,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAEa,KAAK,IAAP,EAAtB,CAFmD,CAAV;AAAA,OAApC,CAAP;AAID;;;gCAEWY,S,EAAWzB,O,EAAS;AAC9BA,gBAAUA,WAAW,EAArB;AACA,UAAMC,MAAM,KAAKJ,cAAL,CAAoB4C,WAApB,CAAgChB,SAAhC,CAAZ;AACA,aAAO,KAAK7B,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0Bf,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAE4C,OAAO,KAAT,EAAgB/B,KAAK,IAArB,EAA2BC,MAAMpB,WAAWqB,MAA5C,EAAtB,CAA1B,CAAP;AACD;;;gCAEW2C,M,EAAQC,K,EAAO3D,O,EAAS;AAClCA,gBAAUA,WAAW,EAArB;AACA,UAAMC,MAAM,KAAKJ,cAAL,CAAoBoG,gBAApB,CAAqCvC,MAArC,EAA6CC,KAA7C,CAAZ;AACA,aAAO,KAAK/D,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;kCAEaA,O,EAAS;AACrBA,gBAAUd,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB;AAC9Ba,aAAK,IADyB;AAE9BC,cAAMpB,WAAWwG;AAFa,OAAtB,CAAV;;AAKA,UAAMC,gBAAgB,KAAKtG,cAAL,CAAoBuG,eAApB,EAAtB;AACA,aAAO,KAAKxG,SAAL,CAAeO,KAAf,CAAqBgG,aAArB,EAAoCnG,OAApC,EAA6CkB,IAA7C,CAAkD;AAAA,eAAclC,MAAME,CAAN,CAAQiC,OAAR,CAAgB8D,UAAhB,CAAd;AAAA,OAAlD,CAAP;AACD;;;kCAEaxD,S,EAAWzB,O,EAAS;AAChC,UAAID,SAAS,IAAb;AACA,UAAIsG,kBAAkB,IAAtB;;AAEA,UAAI,OAAOrG,OAAP,KAAmB,QAAvB,EAAiC;AAC/BD,iBAASC,OAAT;AACD,OAFD,MAEO,IAAI,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+BA,YAAY,IAA/C,EAAqD;AAC1DD,iBAASC,QAAQD,MAAR,IAAkB,IAA3B;AACAsG,0BAAkBrG,QAAQqG,eAAR,IAA2B,IAA7C;AACD;;AAED,UAAI,QAAO5E,SAAP,yCAAOA,SAAP,OAAqB,QAArB,IAAiCA,cAAc,IAAnD,EAAyD;AACvD1B,iBAAS0B,UAAU1B,MAAnB;AACA0B,oBAAYA,UAAUA,SAAtB;AACD;;AAED,UAAMxB,MAAM,KAAKJ,cAAL,CAAoByG,kBAApB,CAAuC7E,SAAvC,EAAkD1B,MAAlD,EAA0DsG,eAA1D,CAAZ;;AAEA,UAAI,KAAKzG,SAAL,CAAeI,OAAf,CAAuBF,OAAvB,KAAmC,QAAvC,EAAiD;AAC/CE,kBAAWT,qBAAqBgH,qBAArB,CAA2CzB,IAA3C,CAAgD,IAAhD,EAAsDrD,SAAtD,EAAiEzB,OAAjE,CAAX;AACD;;AAED,aAAO,KAAKJ,SAAL,CAAeO,KAAf,CACLF,GADK,EAELf,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAEc,MAAMpB,WAAW8G,QAAnB,EAAtB,CAFK,EAGLtF,IAHK,CAGA,gBAAQ;AACb;AACA;AACA;AACA,YAAIlC,MAAME,CAAN,CAAQuH,OAAR,CAAgBC,IAAhB,CAAJ,EAA2B;AACzB,iBAAOjH,QAAQkH,MAAR,CAAe,+BAA+BlF,SAA/B,GAA2C,gFAA1D,CAAP;AACD,SAFD,MAEO;AACL,iBAAOhC,QAAQqG,OAAR,CAAgBY,IAAhB,CAAP;AACD;AACF,OAZM,CAAP;AAaD;;;8BAESE,K,EAAOC,G,EAAKzE,S,EAAWpC,O,EAAS;AACxC,UAAI,CAAC4G,KAAD,IAAU,CAACC,GAAX,IAAkB,CAACzE,SAAvB,EAAkC;AAChC,cAAM,IAAI0E,KAAJ,CAAU,mFAAV,CAAN;AACD;;AAED9G,gBAAUA,WAAW,EAArB;AACAoC,kBAAY,KAAKxC,SAAL,CAAe0C,kBAAf,CAAkCF,SAAlC,CAAZ;AACA,aAAO,KAAKxC,SAAL,CAAeO,KAAf,CAAqB,KAAKN,cAAL,CAAoBkH,cAApB,CAAmCH,KAAnC,EAA0CC,GAA1C,EAA+CzE,SAA/C,CAArB,EAAgFpC,OAAhF,CAAP;AACD;;;iCAEYyB,S,EAAWuF,a,EAAehH,O,EAAS;AAC9CA,gBAAUA,WAAW,EAArB;AACA,cAAQ,KAAKJ,SAAL,CAAeI,OAAf,CAAuBF,OAA/B;AACE,aAAK,QAAL;AACE;AACA,iBAAOV,qBAAqB6H,YAArB,CAAkCnC,IAAlC,CAAuC,IAAvC,EAA6CrD,SAA7C,EAAwDuF,aAAxD,EAAuEhH,OAAvE,CAAP;AACF,aAAK,OAAL;AACE;AACA,iBAAOX,qBAAqB4H,YAArB,CAAkCnC,IAAlC,CAAuC,IAAvC,EAA6CrD,SAA7C,EAAwDuF,aAAxD,EAAuEhH,OAAvE,CAAP;AACF,aAAK,OAAL;AACE;AACA,iBAAOV,oBAAoB2H,YAApB,CAAiCnC,IAAjC,CAAsC,IAAtC,EAA4CrD,SAA5C,EAAuDuF,aAAvD,EAAsEhH,OAAtE,CAAP;AACF,aAAK,QAAL;AACE;AACA,iBAAOT,qBAAqB0H,YAArB,CAAkCnC,IAAlC,CAAuC,IAAvC,EAA6CrD,SAA7C,EAAwDuF,aAAxD,EAAuEhH,OAAvE,CAAP;AACF;AACE,iBAAO,KAAKJ,SAAL,CAAeO,KAAf,CAAqB,KAAKN,cAAL,CAAoBqH,iBAApB,CAAsCzF,SAAtC,EAAiDuF,aAAjD,CAArB,EAAsFhH,OAAtF,CAAP;AAdJ;AAgBD;;;iCAEYyB,S,EAAWuF,a,EAAeG,iB,EAAmBnH,O,EAAS;AACjE,UAAM0B,aAAa,EAAnB;AACA1B,gBAAUA,WAAW,EAArB;;AAEA,UAAIhB,MAAME,CAAN,CAAQoE,MAAR,CAAenE,SAAf,EAA0ByE,OAA1B,CAAkCuD,iBAAlC,IAAuD,CAAC,CAA5D,EAA+D;AAC7DzF,mBAAWsF,aAAX,IAA4B,EAAElG,MAAMqG,iBAAR,EAA2B9E,WAAW,IAAtC,EAA5B;AACD,OAFD,MAEO;AACLX,mBAAWsF,aAAX,IAA4BG,iBAA5B;AACD;;AAEDzF,iBAAWsF,aAAX,EAA0BlG,IAA1B,GAAiC,KAAKlB,SAAL,CAAewH,iBAAf,CAAiC1F,WAAWsF,aAAX,EAA0BlG,IAA3D,CAAjC;;AAEA,UAAI,KAAKlB,SAAL,CAAeI,OAAf,CAAuBF,OAAvB,KAAmC,QAAvC,EAAiD;AAC/C;AACA,eAAOV,qBAAqBiI,YAArB,CAAkCvC,IAAlC,CAAuC,IAAvC,EAA6CrD,SAA7C,EAAwDC,UAAxD,EAAoE1B,OAApE,CAAP;AACD,OAHD,MAGO;AACL,YAAMG,QAAQ,KAAKN,cAAL,CAAoBoE,eAApB,CAAoCvC,UAApC,CAAd;AACA,YAAMzB,MAAM,KAAKJ,cAAL,CAAoByH,iBAApB,CAAsC7F,SAAtC,EAAiDtB,KAAjD,CAAZ;;AAEA,eAAO,KAAKP,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;AACF;;;iCAEYyB,S,EAAW8F,c,EAAgBC,a,EAAexH,O,EAAS;AAAA;;AAC9DA,gBAAUA,WAAW,EAArB;AACA,aAAO,KAAKyH,aAAL,CAAmBhG,SAAnB,EAA8BzB,OAA9B,EAAuCkB,IAAvC,CAA4C,gBAAQ;AACzD,YAAI,CAACwF,KAAKa,cAAL,CAAL,EAA2B;AACzB,gBAAM,IAAIT,KAAJ,CAAU,WAAWrF,SAAX,GAAuB,4BAAvB,GAAsD8F,cAAhE,CAAN;AACD;;AAEDb,eAAOA,KAAKa,cAAL,KAAwB,EAA/B;;AAEA,YAAMG,WAAW,EAAjB;;AAEAA,iBAASF,aAAT,IAA0B;AACxBpF,qBAAWoF,aADa;AAExB1G,gBAAM4F,KAAK5F,IAFa;AAGxBuB,qBAAWqE,KAAKrE,SAHQ;AAIxBsF,wBAAcjB,KAAKiB;AAJK,SAA1B;;AAOA;AACA,YAAIjB,KAAKiB,YAAL,KAAsB,IAAtB,IAA8B,CAACjB,KAAKrE,SAAxC,EAAmD;AACjD,iBAAOqF,SAASF,aAAT,EAAwBG,YAA/B;AACD;;AAED,YAAI,OAAK/H,SAAL,CAAeI,OAAf,CAAuBF,OAAvB,KAAmC,QAAvC,EAAiD;AAC/C;AACA,iBAAOV,qBAAqBwI,YAArB,CAAkC9C,IAAlC,SAA6CrD,SAA7C,EAAwD8F,cAAxD,EAAwEC,aAAxE,EAAuFxH,OAAvF,CAAP;AACD,SAHD,MAGO;AACL,cAAMC,MAAM,OAAKJ,cAAL,CAAoBgI,iBAApB,CACVpG,SADU,EAEV8F,cAFU,EAGV,OAAK1H,cAAL,CAAoBoE,eAApB,CAAoCyD,QAApC,CAHU,CAAZ;AAKA,iBAAO,OAAK9H,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;AACF,OAhCM,CAAP;AAiCD;;;6BAEQyB,S,EAAWC,U,EAAY1B,O,EAAS8H,Y,EAAc;AACrD;AACA,UAAI,CAACC,MAAMC,OAAN,CAActG,UAAd,CAAL,EAAgC;AAC9BoG,uBAAe9H,OAAf;AACAA,kBAAU0B,UAAV;AACAA,qBAAa1B,QAAQiI,MAArB;AACD;AACD;;AAEA,UAAI,CAACH,YAAL,EAAmB;AACjB;AACAA,uBAAerG,SAAf;AACD;;AAEDzB,gBAAUhB,MAAMkJ,SAAN,CAAgBlI,OAAhB,CAAV;AACAA,cAAQiI,MAAR,GAAiBvG,UAAjB;AACA,UAAMzB,MAAM,KAAKJ,cAAL,CAAoBsI,aAApB,CAAkC1G,SAAlC,EAA6CzB,OAA7C,EAAsD8H,YAAtD,CAAZ;AACA,aAAO,KAAKlI,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0Bf,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAE6D,oBAAoB,KAAtB,EAAtB,CAA1B,CAAP;AACD;;;8BAESpC,S,EAAWzB,O,EAAS;AAC5B,UAAMC,MAAM,KAAKJ,cAAL,CAAoBuI,gBAApB,CAAqC3G,SAArC,EAAgDzB,OAAhD,CAAZ;AACA,aAAO,KAAKJ,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0Bf,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB,EAAEc,MAAMpB,WAAW2I,WAAnB,EAAtB,CAA1B,CAAP;AACD;;;gCAEWC,O,EAASR,Y,EAAc;AACjC,aAAO,KAAKjI,cAAL,CAAoB0I,WAApB,CAAgCD,OAAhC,EAAyCR,YAAzC,CAAP;AACD;;;4CAEuB7C,U,EAAYjF,O,EAAS;AAAA;;AAC3CA,gBAAUA,WAAW,EAArB;;AAEA,UAAIiF,WAAWlD,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,eAAOtC,QAAQqG,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED,aAAOrG,QAAQiB,GAAR,CAAYuE,UAAZ,EAAwB;AAAA,eAC7B,OAAKrF,SAAL,CAAeO,KAAf,CAAqB,OAAKN,cAAL,CAAoB2I,mBAApB,CAAwC/G,SAAxC,EAAmD,OAAK7B,SAAL,CAAe6I,MAAf,CAAsBC,QAAzE,CAArB,EAAyG1I,OAAzG,EAAkH4E,GAAlH,CAAsH,CAAtH,CAD6B;AAAA,OAAxB,EAEL1D,IAFK,CAEA,mBAAW;AAChB,YAAMmE,SAAS,EAAf;;AAEAJ,mBAAW1B,OAAX,CAAmB,UAAC9B,SAAD,EAAYO,CAAZ,EAAkB;AACnC,cAAIhD,MAAME,CAAN,CAAQuG,QAAR,CAAiBhE,SAAjB,CAAJ,EAAiC;AAC/BA,wBAAYA,UAAU1B,MAAV,GAAmB,GAAnB,GAAyB0B,UAAUA,SAA/C;AACD;;AAED4D,iBAAO5D,SAAP,IAAoBzC,MAAME,CAAN,CAAQyJ,OAAR,CAAgB5F,QAAQf,CAAR,CAAhB,EAA4BtB,GAA5B,CAAgC;AAAA,mBAAKkI,EAAEC,eAAP;AAAA,WAAhC,CAApB;AACD,SAND;;AAQA,eAAOxD,MAAP;AACD,OAdM,CAAP;AAeD;;;gCAEW5D,S,EAAWqH,qB,EAAuB9I,O,EAAS;AACrDA,gBAAUA,WAAW,EAArB;AACA,UAAMC,MAAM,KAAKJ,cAAL,CAAoBkJ,gBAApB,CAAqCtH,SAArC,EAAgDqH,qBAAhD,CAAZ;AACA,aAAO,KAAKlJ,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;kCAEayB,S,EAAWC,U,EAAY1B,O,EAAS8H,Y,EAAc;AAC1D,UAAI,CAACC,MAAMC,OAAN,CAActG,UAAd,CAAL,EAAgC;AAC9BoG,uBAAe9H,OAAf;AACAA,kBAAU0B,UAAV;AACAA,qBAAa1B,QAAQiI,MAArB;AACD;;AAED,UAAI,CAACjI,QAAQc,IAAb,EAAmB;AACjB,cAAM,IAAIgG,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,UAAI,CAACgB,YAAL,EAAmB;AACjB;AACAA,uBAAerG,SAAf;AACD;;AAEDzB,gBAAUhB,MAAMkJ,SAAN,CAAgBlI,OAAhB,CAAV;AACAA,cAAQiI,MAAR,GAAiBvG,UAAjB;;AAEA,UAAI,KAAK9B,SAAL,CAAeE,OAAf,CAAuBkJ,IAAvB,KAAgC,QAApC,EAA8C;AAC5C,eAAO5J,qBAAqB6J,aAArB,CAAmCnE,IAAnC,CAAwC,IAAxC,EAA8CrD,SAA9C,EAAyDzB,OAAzD,EAAkE8H,YAAlE,CAAP;AACD,OAFD,MAEO;AACL,YAAM7H,MAAM,KAAKJ,cAAL,CAAoBqJ,kBAApB,CAAuCzH,SAAvC,EAAkDzB,OAAlD,EAA2D8H,YAA3D,CAAZ;AACA,eAAO,KAAKlI,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;AACF;;;mCAEcyB,S,EAAWzB,O,EAAS;AACjC,UAAMC,MAAM,KAAKJ,cAAL,CAAoBsJ,oBAApB,CAAyC1H,SAAzC,EAAoDzB,OAApD,CAAZ;AACA,aAAO,KAAKJ,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0B4B,OAAOjB,MAAP,CAAc,EAAd,EAAkBZ,OAAlB,EAA2B,EAAEc,MAAMpB,WAAW0J,eAAnB,EAA3B,CAA1B,CAAP;AACD;;;qCAEgB3H,S,EAAW4H,c,EAAgBrJ,O,EAAS;AACnDA,gBAAUA,WAAW,EAArB;;AAEA,cAAQ,KAAKJ,SAAL,CAAeI,OAAf,CAAuBF,OAA/B;AACE,aAAK,OAAL;AACE;AACA,iBAAOR,oBAAoBgK,gBAApB,CAAqCxE,IAArC,CAA0C,IAA1C,EAAgDrD,SAAhD,EAA2D4H,cAA3D,EAA2ErJ,OAA3E,CAAP;AACF,aAAK,QAAL;AACE,iBAAOZ,qBAAqBkK,gBAArB,CAAsCxE,IAAtC,CAA2C,IAA3C,EAAiDrD,SAAjD,EAA4D4H,cAA5D,EAA4ErJ,OAA5E,CAAP;AACF;AACE,cAAMC,MAAM,KAAKJ,cAAL,CAAoB0J,qBAApB,CAA0C9H,SAA1C,EAAqD4H,cAArD,CAAZ;AACA,iBAAO,KAAKzJ,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AARJ;AAUD;;;2BAEMwJ,Q,EAAU/H,S,EAAW6B,M,EAAQtD,O,EAAS;AAC3CA,gBAAUhB,MAAMkJ,SAAN,CAAgBlI,OAAhB,CAAV;AACAA,cAAQyJ,UAAR,GAAqBD,YAAYA,SAASE,WAAT,CAAqB1J,OAArB,CAA6ByJ,UAA9D;AACA,UAAMxJ,MAAM,KAAKJ,cAAL,CAAoB8J,WAApB,CAAgClI,SAAhC,EAA2C6B,MAA3C,EAAmDkG,YAAYA,SAASE,WAAT,CAAqBrG,aAApF,EAAmGrD,OAAnG,CAAZ;;AAEAA,cAAQc,IAAR,GAAepB,WAAWkK,MAA1B;AACA5J,cAAQwJ,QAAR,GAAmBA,QAAnB;;AAEA,aAAO,KAAK5J,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,EAAmCkB,IAAnC,CAAwC,mBAAW;AACxD,YAAIsI,QAAJ,EAAczG,QAAQ,CAAR,EAAW8G,WAAX,GAAyB,KAAzB;AACd,eAAO9G,OAAP;AACD,OAHM,CAAP;AAID;;;2BAEMtB,S,EAAWqI,a,EAAeC,Y,EAAcC,K,EAAOrI,K,EAAO3B,O,EAAS;AACpE,UAAMiK,SAAS,EAAf;AACA,UAAMvI,aAAaG,OAAOD,IAAP,CAAYkI,aAAZ,CAAnB;AACA,UAAIxB,UAAU,EAAd;AACA,UAAI4B,oBAAJ;;AAEAlK,gBAAUd,EAAE+C,KAAF,CAAQjC,OAAR,CAAV;;AAEA,UAAI,CAAChB,MAAME,CAAN,CAAQuH,OAAR,CAAgBuD,KAAhB,CAAL,EAA6B;AAC3BC,eAAOtH,IAAP,CAAYqH,KAAZ;AACD;;AAED;AACA1B,gBAAUtJ,MAAME,CAAN,CAAQwB,GAAR,CAAYiB,MAAM3B,OAAN,CAAcmK,UAA1B,EAAsC,iBAAS;AACvD,eAAO9I,MAAM4G,MAAb;AACD,OAFS,CAAV;;AAIAjJ,YAAME,CAAN,CAAQ8F,IAAR,CAAarD,MAAM3B,OAAN,CAAcsI,OAA3B,EAAoC,iBAAS;AAC3C,YAAIjH,MAAM+I,MAAV,EAAkB;AAChB;AACAF,wBAAclL,MAAME,CAAN,CAAQwB,GAAR,CAAYW,MAAM4G,MAAlB,EAA0B,iBAAS;AAC/C,gBAAIjJ,MAAME,CAAN,CAAQiD,aAAR,CAAsBO,KAAtB,CAAJ,EAAkC;AAChC,qBAAOA,MAAMN,SAAb;AACD;AACD,mBAAOM,KAAP;AACD,WALa,CAAd;AAMA4F,kBAAQ3F,IAAR,CAAauH,WAAb;AACD;AACF,OAXD;;AAjBoE;AAAA;AAAA;;AAAA;AA8BpE,6BAAoB5B,OAApB,8HAA6B;AAAA,cAAlB+B,KAAkB;;AAC3B,cAAIrL,MAAME,CAAN,CAAQoL,YAAR,CAAqB5I,UAArB,EAAiC2I,KAAjC,EAAwCtI,MAAxC,KAAmDsI,MAAMtI,MAA7D,EAAqE;AACnEiI,oBAAQ,EAAR;AADmE;AAAA;AAAA;;AAAA;AAEnE,oCAAoBK,KAApB,mIAA2B;AAAA,oBAAhB3H,KAAgB;;AACzBsH,sBAAMtH,KAAN,IAAeoH,cAAcpH,KAAd,CAAf;AACD;AAJkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKnEuH,mBAAOtH,IAAP,CAAYqH,KAAZ;AACD;AACF;AAtCmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwCpEA,cAAQ,EAAEO,KAAKN,MAAP,EAAR;;AAEAjK,cAAQc,IAAR,GAAepB,WAAW8K,MAA1B;AACAxK,cAAQa,GAAR,GAAc,IAAd;;AAEA,UAAMZ,MAAM,KAAKJ,cAAL,CAAoB4K,WAApB,CAAgChJ,SAAhC,EAA2CqI,aAA3C,EAA0DC,YAA1D,EAAwEC,KAAxE,EAA+ErI,MAAM0B,aAArF,EAAoGrD,OAApG,CAAZ;AACA,aAAO,KAAKJ,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,EAAmCkB,IAAnC,CAAwC,oBAAY;AACzD,YAAIwJ,aAAaC,SAAjB,EAA4B;AAC1B,iBAAOD,QAAP;AACD;;AAED;;AAEA,eAAOA,aAAa,CAApB;AACD,OARM,CAAP;AASD;;;+BAEUjJ,S,EAAWmJ,O,EAAS5K,O,EAAS0B,U,EAAY;AAClD1B,gBAAUd,EAAE+C,KAAF,CAAQjC,OAAR,KAAoB,EAA9B;AACAA,cAAQc,IAAR,GAAepB,WAAWkK,MAA1B;AACA,UAAM3J,MAAM,KAAKJ,cAAL,CAAoBgL,eAApB,CAAoCpJ,SAApC,EAA+CmJ,OAA/C,EAAwD5K,OAAxD,EAAiE0B,UAAjE,CAAZ;AACA,aAAO,KAAK9B,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,EAAmCkB,IAAnC,CAAwC;AAAA,eAAW6B,QAAQ,CAAR,CAAX;AAAA,OAAxC,CAAP;AACD;;;2BAEMyG,Q,EAAU/H,S,EAAW6B,M,EAAQwH,U,EAAY9K,O,EAAS;AACvDA,gBAAUd,EAAE+C,KAAF,CAAQjC,WAAW,EAAnB,CAAV;AACAA,cAAQyJ,UAAR,GAAqB,CAAC,EAAED,YAAYA,SAASuB,aAArB,IAAsCvB,SAASuB,aAAT,CAAuBtB,UAA/D,CAAtB;;AAEA,UAAMxJ,MAAM,KAAKJ,cAAL,CAAoBmL,WAApB,CAAgCvJ,SAAhC,EAA2C6B,MAA3C,EAAmDwH,UAAnD,EAA+D9K,OAA/D,EAAwEwJ,SAASE,WAAT,CAAqBrG,aAA7F,CAAZ;;AAEArD,cAAQc,IAAR,GAAepB,WAAWuL,MAA1B;;AAEAjL,cAAQwJ,QAAR,GAAmBA,QAAnB;AACA,aAAO,KAAK5J,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;+BAEUyB,S,EAAW6B,M,EAAQwH,U,EAAY9K,O,EAAS0B,U,EAAY;AAC7D1B,gBAAUhB,MAAMkJ,SAAN,CAAgBlI,OAAhB,CAAV;AACA,UAAI,QAAO8K,UAAP,yCAAOA,UAAP,OAAsB,QAA1B,EAAoCA,aAAa9L,MAAMkJ,SAAN,CAAgB4C,UAAhB,CAAb;;AAEpC,UAAM7K,MAAM,KAAKJ,cAAL,CAAoBmL,WAApB,CAAgCvJ,SAAhC,EAA2C6B,MAA3C,EAAmDwH,UAAnD,EAA+D9K,OAA/D,EAAwE0B,UAAxE,CAAZ;AACA,UAAMkF,QAAQ5H,MAAME,CAAN,CAAQuG,QAAR,CAAiBhE,SAAjB,IAA8BA,SAA9B,GAA0C,EAAEA,oBAAF,EAAxD;AACA,UAAME,QAAQ3C,MAAME,CAAN,CAAQgM,IAAR,CAAa,KAAKtL,SAAL,CAAe4E,YAAf,CAA4B2G,MAAzC,EAAiD,EAAE1J,WAAWmF,MAAMnF,SAAnB,EAAjD,CAAd;;AAEAzB,cAAQ2B,KAAR,GAAgBA,KAAhB;AACA,aAAO,KAAK/B,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;4BAEMwJ,Q,EAAU/H,S,EAAWqJ,U,EAAY9K,O,EAAS;AAAA;;AAC/C,UAAMoL,WAAW,EAAjB;AACA,UAAMnL,MAAM,KAAKJ,cAAL,CAAoBwL,WAApB,CAAgC5J,SAAhC,EAA2CqJ,UAA3C,EAAuD,IAAvD,EAA6DtB,SAASE,WAAtE,CAAZ;;AAEA1J,gBAAUd,EAAE+C,KAAF,CAAQjC,OAAR,KAAoB,EAA9B;;AAEA;AACA,UAAI,CAAC,CAACwJ,SAASE,WAAX,IAA0B,CAAC,CAACF,SAASE,WAAT,CAAqB4B,YAArD,EAAmE;AACjE,YAAM1J,OAAOC,OAAOD,IAAP,CAAY4H,SAASE,WAAT,CAAqB4B,YAAjC,CAAb;AACA,YAAMvJ,SAASH,KAAKG,MAApB;AACA,YAAIwJ,oBAAJ;;AAEA,aAAK,IAAIvJ,IAAI,CAAb,EAAgBA,IAAID,MAApB,EAA4BC,GAA5B,EAAiC;AAC/BuJ,wBAAc/B,SAASE,WAAT,CAAqB4B,YAArB,CAAkC1J,KAAKI,CAAL,CAAlC,CAAd;AACA,cAAIuJ,YAAYvL,OAAZ,IAAuBuL,YAAYvL,OAAZ,CAAoBwL,QAA3C,IACFD,YAAYvL,OAAZ,CAAoBwL,QAApB,CAA6BC,WAA7B,OAA+C,SAD7C,IAEFF,YAAYvL,OAAZ,CAAoB0L,QAApB,KAAiC,IAFnC,EAEyC;AACvCN,qBAASzI,IAAT,CAAc4I,YAAYI,SAAZ,CAAsB/G,GAApC;AACD;AACF;AACF;;AAED,aAAOnF,QAAQuF,IAAR,CAAaoG,QAAb,EAAuB,mBAAW;AACvC,eAAO5B,SAASpF,OAAT,EAAkBpE,OAAlB,EAA2BkB,IAA3B,CAAgC,qBAAa;AAClD;AACA,cAAI,CAAC0K,SAAL,EAAgB;AACd,mBAAOnM,QAAQqG,OAAR,EAAP;AACD;;AAED,cAAI,CAACiC,MAAMC,OAAN,CAAc4D,SAAd,CAAL,EAA+BA,YAAY,CAACA,SAAD,CAAZ;;AAE/B,iBAAOnM,QAAQuF,IAAR,CAAa4G,SAAb,EAAwB;AAAA,mBAAYpC,SAASqC,OAAT,CAAiB7L,OAAjB,CAAZ;AAAA,WAAxB,CAAP;AACD,SATM,CAAP;AAUD,OAXM,EAWJkB,IAXI,CAWC,YAAM;AACZlB,gBAAQwJ,QAAR,GAAmBA,QAAnB;AACA,eAAO,OAAK5J,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD,OAdM,CAAP;AAeD;;;+BAEUyB,S,EAAWqJ,U,EAAY9K,O,EAAS2B,K,EAAO;AAChD3B,gBAAUhB,MAAMkJ,SAAN,CAAgBlI,OAAhB,CAAV;AACAA,gBAAUd,EAAE4M,QAAF,CAAW9L,OAAX,EAAoB,EAAC+L,OAAO,IAAR,EAApB,CAAV;AACA,UAAI,QAAOjB,UAAP,yCAAOA,UAAP,OAAsB,QAA1B,EAAoCA,aAAa9L,MAAMkJ,SAAN,CAAgB4C,UAAhB,CAAb;;AAEpC,UAAM7K,MAAM,KAAKJ,cAAL,CAAoBwL,WAApB,CAAgC5J,SAAhC,EAA2CqJ,UAA3C,EAAuD9K,OAAvD,EAAgE2B,KAAhE,CAAZ;AACA,aAAO,KAAK/B,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;2BAEM2B,K,EAAOF,S,EAAWzB,O,EAAS;AAChCA,gBAAUhB,MAAMkJ,SAAN,CAAgBlI,OAAhB,CAAV;AACAA,cAAQc,IAAR,GAAepB,WAAWqB,MAA1B;AACAf,cAAQ2B,KAAR,GAAgBA,KAAhB;;AAEA,aAAO,KAAK/B,SAAL,CAAeO,KAAf,CACL,KAAKN,cAAL,CAAoBmM,WAApB,CAAgCvK,SAAhC,EAA2CzB,OAA3C,EAAoD2B,KAApD,CADK,EAEL3B,OAFK,CAAP;AAID;;;8BAESwJ,Q,EAAU/H,S,EAAW6B,M,EAAQwH,U,EAAY9K,O,EAAS;AAC1D,UAAMC,MAAM,KAAKJ,cAAL,CAAoBoM,eAApB,CAAoC,GAApC,EAAyCxK,SAAzC,EAAoD6B,MAApD,EAA4DwH,UAA5D,EAAwE9K,QAAQ0B,UAAhF,CAAZ;;AAEA1B,gBAAUd,EAAE+C,KAAF,CAAQjC,OAAR,KAAoB,EAA9B;;AAEAA,cAAQc,IAAR,GAAepB,WAAWuL,MAA1B;AACAjL,cAAQwJ,QAAR,GAAmBA,QAAnB;AACA,aAAO,KAAK5J,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;8BAESwJ,Q,EAAU/H,S,EAAW6B,M,EAAQwH,U,EAAY9K,O,EAAS;AAC1D,UAAMC,MAAM,KAAKJ,cAAL,CAAoBoM,eAApB,CAAoC,GAApC,EAAyCxK,SAAzC,EAAoD6B,MAApD,EAA4DwH,UAA5D,EAAwE9K,QAAQ0B,UAAhF,CAAZ;;AAEA1B,gBAAUd,EAAE+C,KAAF,CAAQjC,OAAR,KAAoB,EAA9B;;AAEAA,cAAQc,IAAR,GAAepB,WAAWuL,MAA1B;AACAjL,cAAQwJ,QAAR,GAAmBA,QAAnB;AACA,aAAO,KAAK5J,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;8BAESyB,S,EAAWzB,O,EAASkM,iB,EAAmBC,K,EAAO;AACtD,UAAInM,QAAQD,MAAZ,EAAoB;AAClB0B,oBAAY,KAAK5B,cAAL,CAAoBmE,SAApB,CAA8B;AACxCvC,8BADwC;AAExCsC,mBAAS/D,QAAQD;AAFuB,SAA9B,CAAZ;AAID;;AAEDC,gBAAUhB,MAAMkJ,SAAN,CAAgBlI,OAAhB,CAAV;AACAA,gBAAUd,EAAE4M,QAAF,CAAW9L,OAAX,EAAoB;AAC5Ba,aAAK,IADuB;AAE5B+B,eAAO,IAFqB;AAG5B9B,cAAMpB,WAAWqB;AAHW,OAApB,CAAV;;AAMA,UAAMd,MAAM,KAAKJ,cAAL,CAAoBmM,WAApB,CAAgCvK,SAAhC,EAA2CzB,OAA3C,EAAoDmM,KAApD,CAAZ;;AAEA,UAAID,sBAAsBvB,SAA1B,EAAqC;AACnC,cAAM,IAAI7D,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,aAAO,KAAKlH,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,EAAmCkB,IAAnC,CAAwC,gBAAQ;AACrD,YAAI,CAAClB,QAAQ4C,KAAb,EAAoB;AAClB,iBAAO8D,IAAP;AACD;;AAED,YAAIrB,SAASqB,OAAOA,KAAKwF,iBAAL,CAAP,GAAiC,IAA9C;;AAEA,YAAIlM,WAAWA,QAAQoM,QAAvB,EAAiC;AAC/B,cAAMA,WAAWpM,QAAQoM,QAAzB;;AAEA,cAAIA,oBAAoBjN,UAAUkN,OAA9B,IAAyCD,oBAAoBjN,UAAUmN,KAA3E,EAAkF;AAChFjH,qBAASkH,WAAWlH,MAAX,CAAT;AACD,WAFD,MAEO,IAAI+G,oBAAoBjN,UAAUqN,OAA9B,IAAyCJ,oBAAoBjN,UAAUsN,MAA3E,EAAmF;AACxFpH,qBAASqH,SAASrH,MAAT,EAAiB,EAAjB,CAAT;AACD,WAFM,MAEA,IAAI+G,oBAAoBjN,UAAUwN,IAAlC,EAAwC;AAC7C,gBAAI,CAAC3N,MAAME,CAAN,CAAQ0N,MAAR,CAAevH,MAAf,CAAD,IAA2B,CAACrG,MAAME,CAAN,CAAQ2N,MAAR,CAAexH,MAAf,CAAhC,EAAwD;AACtDA,uBAAS,IAAIyH,IAAJ,CAASzH,MAAT,CAAT;AACD;AACF,WAJM,MAIA,IAAI+G,oBAAoBjN,UAAU4N,MAAlC,EAA0C;AAC/C;AACD;AACF;;AAED,eAAO1H,MAAP;AACD,OAxBM,CAAP;AAyBD;;;kCAEa5D,S,EAAWuL,W,EAAaC,U,EAAYC,W,EAAaC,Y,EAAcC,c,EAAgBC,Y,EAAcrN,O,EAAS;AAClH,UAAMC,MAAM,KAAKJ,cAAL,CAAoByN,aAApB,CAAkC7L,SAAlC,EAA6CuL,WAA7C,EAA0DC,UAA1D,EAAsEC,WAAtE,EAAmFC,YAAnF,EAAiGC,cAAjG,EAAiHC,YAAjH,CAAZ;AACArN,gBAAUA,WAAW,EAArB;AACA,UAAIC,GAAJ,EAAS;AACP,eAAO,KAAKL,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD,OAFD,MAEO;AACL,eAAOP,QAAQqG,OAAR,EAAP;AACD;AACF;;;gCAEWrE,S,EAAWuL,W,EAAahN,O,EAAS;AAC3C,UAAMC,MAAM,KAAKJ,cAAL,CAAoB0N,WAApB,CAAgC9L,SAAhC,EAA2CuL,WAA3C,CAAZ;AACAhN,gBAAUA,WAAW,EAArB;;AAEA,UAAIC,GAAJ,EAAS;AACP,eAAO,KAAKL,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD,OAFD,MAEO;AACL,eAAOP,QAAQqG,OAAR,EAAP;AACD;AACF;;;kCAEarE,S,EAAW+L,c,EAAgBC,c,EAAgBzN,O,EAAS;AAChE,UAAMC,MAAM,KAAKJ,cAAL,CAAoB6N,aAApB,CAAkCjM,SAAlC,EAA6C+L,cAA7C,EAA6DC,cAA7D,CAAZ;AACAzN,gBAAUA,WAAW,EAArB;;AAEA,UAAIC,GAAJ,EAAS;AACP,eAAO,KAAKL,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD,OAFD,MAEO;AACL,eAAOP,QAAQqG,OAAR,EAAP;AACD;AACF;;;mCAEcqH,Y,EAAcQ,M,EAAQC,U,EAAYC,Q,EAAUC,I,EAAM9N,O,EAAS;AACxE,UAAMC,MAAM,KAAKJ,cAAL,CAAoBkO,cAApB,CAAmCZ,YAAnC,EAAiDQ,MAAjD,EAAyDC,UAAzD,EAAqEC,QAArE,EAA+EC,IAA/E,EAAqF9N,OAArF,CAAZ;AACAA,gBAAUA,WAAW,EAArB;;AAEA,UAAIC,GAAJ,EAAS;AACP,eAAO,KAAKL,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD,OAFD,MAEO;AACL,eAAOP,QAAQqG,OAAR,EAAP;AACD;AACF;;;iCAEYqH,Y,EAAcQ,M,EAAQ3N,O,EAAS;AAC1C,UAAMC,MAAM,KAAKJ,cAAL,CAAoBmO,YAApB,CAAiCb,YAAjC,EAA+CQ,MAA/C,CAAZ;AACA3N,gBAAUA,WAAW,EAArB;;AAEA,UAAIC,GAAJ,EAAS;AACP,eAAO,KAAKL,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD,OAFD,MAEO;AACL,eAAOP,QAAQqG,OAAR,EAAP;AACD;AACF;;;mCAEcmI,e,EAAiBN,M,EAAQO,e,EAAiBlO,O,EAAS;AAChE,UAAMC,MAAM,KAAKJ,cAAL,CAAoBsO,cAApB,CAAmCF,eAAnC,EAAoDN,MAApD,EAA4DO,eAA5D,CAAZ;AACAlO,gBAAUA,WAAW,EAArB;;AAEA,UAAIC,GAAJ,EAAS;AACP,eAAO,KAAKL,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD,OAFD,MAEO;AACL,eAAOP,QAAQqG,OAAR,EAAP;AACD;AACF;;AAED;;AAEA;;;;;;;;;oCAMgBgF,U,EAAYzG,K,EAAO;AACjC,aAAO,KAAKxE,cAAL,CAAoBuO,eAApB,CAAoCtD,UAApC,EAAgDzG,KAAhD,CAAP;AACD;;;+BAEUyG,U,EAAY;AACrB,aAAO,KAAKjL,cAAL,CAAoBwO,UAApB,CAA+BvD,UAA/B,CAAP;AACD;;AAED;;;;;;;;;qCAMiBwD,W,EAAajK,K,EAAO;AACnC,aAAO,KAAKxE,cAAL,CAAoB0O,gBAApB,CAAqCD,WAArC,EAAkDjK,KAAlD,CAAP;AACD;;AAED;;;;;;;2BAIOhD,K,EAAO;AACZ,aAAO,KAAKxB,cAAL,CAAoB2O,MAApB,CAA2BnN,KAA3B,CAAP;AACD;;;kCAEaoN,W,EAAapN,K,EAAOrB,O,EAAS;AACzC,UAAI,CAACyO,WAAD,IAAgB,EAAEA,uBAAuBjP,WAAzB,CAApB,EAA2D;AACzD,cAAM,IAAIsH,KAAJ,CAAU,wEAAV,CAAN;AACD;AACD,UAAI2H,YAAYC,MAAhB,EAAwB;AACtB;AACA,eAAOjP,QAAQqG,OAAR,EAAP;AACD;;AAED9F,gBAAUd,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB;AAC9ByO,qBAAaA,YAAYC,MAAZ,IAAsBD;AADL,OAAtB,CAAV;;AAIA,UAAMxO,MAAM,KAAKJ,cAAL,CAAoB8O,kBAApB,CAAuCtN,KAAvC,EAA8C;AACxDqN,gBAAQD,YAAYC;AADoC,OAA9C,CAAZ;;AAIA,UAAI,CAACzO,GAAL,EAAU,OAAOR,QAAQqG,OAAR,EAAP;;AAEV,aAAO,KAAKlG,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;sCAEiByO,W,EAAapN,K,EAAOrB,O,EAAS;AAC7C,UAAI,CAACyO,WAAD,IAAgB,EAAEA,uBAAuBjP,WAAzB,CAApB,EAA2D;AACzD,cAAM,IAAIsH,KAAJ,CAAU,6EAAV,CAAN;AACD;;AAED,UAAI2H,YAAYC,MAAZ,IAAsB,CAACrN,KAA3B,EAAkC;AAChC;AACA,eAAO5B,QAAQqG,OAAR,EAAP;AACD;;AAED9F,gBAAUd,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB;AAC9ByO,qBAAaA,YAAYC,MAAZ,IAAsBD;AADL,OAAtB,CAAV;;AAIA,UAAMxO,MAAM,KAAKJ,cAAL,CAAoB+O,sBAApB,CAA2CvN,KAA3C,EAAkD;AAC5DqN,gBAAQD,YAAYC;AADwC,OAAlD,CAAZ;;AAIA,UAAI,CAACzO,GAAL,EAAU,OAAOR,QAAQqG,OAAR,EAAP;;AAEV,aAAO,KAAKlG,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;qCAEgByO,W,EAAazO,O,EAAS;AACrC,UAAI,CAACyO,WAAD,IAAgB,EAAEA,uBAAuBjP,WAAzB,CAApB,EAA2D;AACzD,cAAM,IAAIsH,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAED9G,gBAAUd,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB;AAC9ByO,qBAAaA,YAAYC,MAAZ,IAAsBD;AADL,OAAtB,CAAV;AAGAzO,cAAQyO,WAAR,CAAoBzF,IAApB,GAA2ByF,YAAYC,MAAZ,GAAqBD,YAAYzF,IAAjC,GAAwC2B,SAAnE;AACA,UAAM1K,MAAM,KAAKJ,cAAL,CAAoBgP,qBAApB,CAA0CJ,WAA1C,CAAZ;;AAEA,aAAO,KAAK7O,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;;qCAEgByO,W,EAAazO,O,EAAS;AACrCA,gBAAUd,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB;AAC9ByO,qBAAaA,YAAYC,MAAZ,IAAsBD;AADL,OAAtB,CAAV;;AAIA,UAAMxO,MAAM,KAAKJ,cAAL,CAAoBiP,qBAApB,CAA0C9O,OAA1C,CAAZ;;AAEA,UAAIC,GAAJ,EAAS;AACP,eAAO,KAAKL,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAP;AACD;;AAED,aAAOP,QAAQqG,OAAR,EAAP;AACD;;;sCAEiB2I,W,EAAazO,O,EAAS;AACtC,UAAI,CAACyO,WAAD,IAAgB,EAAEA,uBAAuBjP,WAAzB,CAApB,EAA2D;AACzD,cAAM,IAAIsH,KAAJ,CAAU,4DAAV,CAAN;AACD;AACD,UAAI2H,YAAYC,MAAhB,EAAwB;AACtB;AACA,eAAOjP,QAAQqG,OAAR,EAAP;AACD;;AAED9F,gBAAUd,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB;AAC9ByO,qBAAaA,YAAYC,MAAZ,IAAsBD,WADL;AAE9B5K,4BAAoB;AAFU,OAAtB,CAAV;;AAKA,UAAM5D,MAAM,KAAKJ,cAAL,CAAoBkP,sBAApB,CAA2CN,WAA3C,CAAZ;AACA,UAAMO,UAAU,KAAKpP,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAhB;;AAEAyO,kBAAYQ,QAAZ,GAAuB,QAAvB;;AAEA,aAAOD,OAAP;AACD;;;wCAEmBP,W,EAAazO,O,EAAS;AACxC,UAAI,CAACyO,WAAD,IAAgB,EAAEA,uBAAuBjP,WAAzB,CAApB,EAA2D;AACzD,cAAM,IAAIsH,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAED9G,gBAAUd,EAAE0B,MAAF,CAAS,EAAT,EAAaZ,OAAb,EAAsB;AAC9ByO,qBAAaA,YAAYC,MAAZ,IAAsBD,WADL;AAE9B5K,4BAAoB;AAFU,OAAtB,CAAV;AAIA7D,cAAQyO,WAAR,CAAoBzF,IAApB,GAA2ByF,YAAYC,MAAZ,GAAqBD,YAAYzF,IAAjC,GAAwC2B,SAAnE;AACA,UAAM1K,MAAM,KAAKJ,cAAL,CAAoBqP,wBAApB,CAA6CT,WAA7C,CAAZ;AACA,UAAMO,UAAU,KAAKpP,SAAL,CAAeO,KAAf,CAAqBF,GAArB,EAA0BD,OAA1B,CAAhB;;AAEAyO,kBAAYQ,QAAZ,GAAuB,UAAvB;;AAEA,aAAOD,OAAP;AACD;;;;;;AAGHG,OAAOC,OAAP,GAAiBzP,cAAjB;AACAwP,OAAOC,OAAP,CAAezP,cAAf,GAAgCA,cAAhC;AACAwP,OAAOC,OAAP,CAAeC,OAAf,GAAyB1P,cAAzB","file":"query-interface.js","sourcesContent":["'use strict';\n\nconst Utils = require('./utils');\nconst _ = require('lodash');\nconst DataTypes = require('./data-types');\nconst SQLiteQueryInterface = require('./dialects/sqlite/query-interface');\nconst MSSSQLQueryInterface = require('./dialects/mssql/query-interface');\nconst MySQLQueryInterface = require('./dialects/mysql/query-interface');\nconst OracleQueryInterface = require('./dialects/oracle/query-interface');\nconst Transaction = require('./transaction');\nconst Promise = require('./promise');\nconst QueryTypes = require('./query-types');\n\n/**\n * The interface that Sequelize uses to talk to all databases\n * @class QueryInterface\n * @private\n */\nclass QueryInterface {\n  constructor(sequelize) {\n    this.sequelize = sequelize;\n    this.QueryGenerator = this.sequelize.dialect.QueryGenerator;\n  }\n\n  createSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.createSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n\n  dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.dropSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n\n  dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.QueryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    } else {\n      return this.showAllSchemas(options).map(schemaName => this.dropSchema(schemaName, options));\n    }\n  }\n\n  showAllSchemas(options) {\n\n    options = _.assign({}, options, {\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    });\n\n    const showSchemasSql = this.QueryGenerator.showSchemasQuery();\n\n    return this.sequelize.query(showSchemasSql, options).then(schemaNames => Utils._.flatten(\n        Utils._.map(schemaNames, value => value.schema_name ? value.schema_name : value)\n    ));\n  }\n\n  databaseVersion(options) {\n    return this.sequelize.query(\n      this.QueryGenerator.versionQuery(),\n      _.assign({}, options, { type: QueryTypes.VERSION })\n    );\n  }\n\n  createTable(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n    let sql = '';\n    let i = 0;\n\n    options = _.clone(options) || {};\n\n    attributes = Utils._.mapValues(attributes, attribute => {\n      if (!Utils._.isPlainObject(attribute)) {\n        attribute = { type: attribute, allowNull: true };\n      }\n\n      attribute = this.sequelize.normalizeAttribute(attribute);\n\n      return attribute;\n    });\n\n    // Postgres requires a special SQL command for enums\n    if (this.sequelize.options.dialect === 'postgres') {\n      const promises = [];\n\n      for (i = 0; i < keyLen; i++) {\n        if (attributes[keys[i]].type instanceof DataTypes.ENUM) {\n          sql = this.QueryGenerator.pgListEnums(tableName, attributes[keys[i]].field || keys[i], options);\n          promises.push(this.sequelize.query(\n            sql,\n            _.assign({}, options, { plain: true, raw: true, type: QueryTypes.SELECT })\n          ));\n        }\n      }\n\n      return Promise.all(promises).then(results => {\n        const promises = [];\n        let enumIdx = 0;\n\n        for (i = 0; i < keyLen; i++) {\n          if (attributes[keys[i]].type instanceof DataTypes.ENUM) {\n            // If the enum type doesn't exist then create it\n            if (!results[enumIdx]) {\n              sql = this.QueryGenerator.pgEnum(tableName, attributes[keys[i]].field || keys[i], attributes[keys[i]], options);\n              promises.push(this.sequelize.query(\n                sql,\n                _.assign({}, options, { raw: true })\n              ));\n            } else if (!!results[enumIdx] && !!model) {\n              const enumVals = this.QueryGenerator.fromArray(results[enumIdx].enum_value);\n              const vals = model.rawAttributes[keys[i]].values;\n\n              vals.forEach((value, idx) => {\n                // reset out after/before options since it's for every enum value\n                const valueOptions = _.clone(options);\n                valueOptions.before = null;\n                valueOptions.after = null;\n\n                if (enumVals.indexOf(value) === -1) {\n                  if (vals[idx + 1]) {\n                    valueOptions.before = vals[idx + 1];\n                  }\n                  else if (vals[idx - 1]) {\n                    valueOptions.after = vals[idx - 1];\n                  }\n                  valueOptions.supportsSearchPath = false;\n                  promises.push(this.sequelize.query(this.QueryGenerator.pgEnumAdd(tableName, keys[i], value, valueOptions), valueOptions));\n                }\n              });\n              enumIdx++;\n            }\n          }\n        }\n\n        if (!tableName.schema &&\n          (options.schema || !!model && model._schema)) {\n          tableName = this.QueryGenerator.addSchema({\n            tableName,\n            _schema: !!model && model._schema || options.schema\n          });\n        }\n\n        attributes = this.QueryGenerator.attributesToSQL(attributes, {\n          context: 'createTable'\n        });\n        sql = this.QueryGenerator.createTableQuery(tableName, attributes, options);\n\n        return Promise.all(promises).then(() => {\n          return this.sequelize.query(sql, options);\n        });\n      });\n    } else {\n      if (!tableName.schema &&\n        (options.schema || !!model && model._schema)) {\n        tableName = this.QueryGenerator.addSchema({\n          tableName,\n          _schema: !!model && model._schema || options.schema\n        });\n      }\n\n      attributes = this.QueryGenerator.attributesToSQL(attributes, {\n        context: 'createTable'\n      });\n      sql = this.QueryGenerator.createTableQuery(tableName, attributes, options);\n\n      return this.sequelize.query(sql, options);\n    }\n  }\n\n  dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = _.clone(options) || {};\n    options.cascade = options.cascade || options.force || false;\n\n    let sql = this.QueryGenerator.dropTableQuery(tableName, options);\n\n    return this.sequelize.query(sql, options).then(() => {\n      const promises = [];\n\n      // Since postgres has a special case for enums, we should drop the related\n      // enum type within the table and attribute\n      if (this.sequelize.options.dialect === 'postgres') {\n        const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n        if (instanceTable) {\n          const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : options.schema + '_') + tableName;\n\n          const keys = Object.keys(instanceTable.rawAttributes);\n          const keyLen = keys.length;\n\n          for (let i = 0; i < keyLen; i++) {\n            if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n              sql = this.QueryGenerator.pgEnumDrop(getTableName, keys[i]);\n              options.supportsSearchPath = false;\n              promises.push(this.sequelize.query(sql, _.assign({}, options, { raw: true })));\n            }\n          }\n        }\n      }\n\n      return Promise.all(promises).get(0);\n    });\n  }\n\n  dropAllTables(options) {\n\n    if (this.sequelize.options.dialect === 'oracle') {\n      //With Oracle, we have to do chain drop constraint promises\n      return OracleQueryInterface.dropAllTables.call(this, options);\n    }\n\n    options = options || {};\n    const skip = options.skip || [];\n\n    const dropAllTables = tableNames => Promise.each(tableNames, tableName => {\n      // if tableName is not in the Array of tables names then dont drop it\n      if (skip.indexOf(tableName.tableName || tableName) === -1) {\n        return this.dropTable(tableName, _.assign({}, options, { cascade: true }) );\n      }\n    });\n\n    return this.showAllTables(options).then(tableNames => {\n      if (this.sequelize.options.dialect === 'sqlite') {\n        return this.sequelize.query('PRAGMA foreign_keys;', options).then(result => {\n          const foreignKeysAreEnabled = result.foreign_keys === 1;\n\n          if (foreignKeysAreEnabled) {\n            return this.sequelize.query('PRAGMA foreign_keys = OFF', options)\n              .then(() => dropAllTables(tableNames))\n              .then(() => this.sequelize.query('PRAGMA foreign_keys = ON', options));\n          } else {\n            return dropAllTables(tableNames);\n          }\n        });\n      } else {\n        return this.getForeignKeysForTables(tableNames, options).then(foreignKeys => {\n          const promises = [];\n\n          tableNames.forEach(tableName => {\n            let normalizedTableName = tableName;\n            if (Utils._.isObject(tableName)) {\n              normalizedTableName = tableName.schema + '.' + tableName.tableName;\n            }\n\n            foreignKeys[normalizedTableName].forEach(foreignKey => {\n              const sql = this.QueryGenerator.dropForeignKeyQuery(tableName, foreignKey);\n              promises.push(this.sequelize.query(sql, options));\n            });\n          });\n\n          return Promise.all(promises).then(() => dropAllTables(tableNames));\n        });\n      }\n    });\n  }\n\n  dropAllEnums(options) {\n    if (this.sequelize.getDialect() !== 'postgres') {\n      return Promise.resolve();\n    }\n\n    options = options || {};\n\n    return this.pgListEnums(null, options).map(result => this.sequelize.query(\n      this.QueryGenerator.pgEnumDrop(null, null, this.QueryGenerator.pgEscapeAndQuote(result.enum_name)),\n      _.assign({}, options, { raw: true })\n    ));\n  }\n\n  pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, _.assign({}, options, { plain: false, raw: true, type: QueryTypes.SELECT }));\n  }\n\n  renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.renameTableQuery(before, after);\n    return this.sequelize.query(sql, options);\n  }\n\n  showAllTables(options) {\n    options = _.assign({}, options, {\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    });\n\n    const showTablesSql = this.QueryGenerator.showTablesQuery();\n    return this.sequelize.query(showTablesSql, options).then(tableNames => Utils._.flatten(tableNames));\n  }\n\n  describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.QueryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n\n    if (this.sequelize.options.dialect === 'oracle') {\n      options =  OracleQueryInterface.addOptionsForDescribe.call(this, tableName, options);\n    }\n\n    return this.sequelize.query(\n      sql,\n      _.assign({}, options, { type: QueryTypes.DESCRIBE })\n    ).then(data => {\n      // If no data is returned from the query, then the table name may be wrong.\n      // Query generators that use information_schema for retrieving table info will just return an empty result set,\n      // it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n      if (Utils._.isEmpty(data)) {\n        return Promise.reject('No description found for \"' + tableName + '\" table. Check the table name and schema; remember, they _are_ case sensitive.');\n      } else {\n        return Promise.resolve(data);\n      }\n    });\n  }\n\n  addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes atleast 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return this.sequelize.query(this.QueryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  removeColumn(tableName, attributeName, options) {\n    options = options || {};\n    switch (this.sequelize.options.dialect) {\n      case 'sqlite':\n        // sqlite needs some special treatment as it cannot drop a column\n        return SQLiteQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n      case 'mssql':\n        // mssql needs special treatment as it cannot drop a column with a default or foreign key constraint\n        return MSSSQLQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n      case 'mysql':\n        // mysql needs special treatment as it cannot drop a column with a foreign key constraint\n        return MySQLQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n      case 'oracle':\n        //oracle needs special treatment as it cannot drop a column with a constraint\n        return OracleQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n      default:\n        return this.sequelize.query(this.QueryGenerator.removeColumnQuery(tableName, attributeName), options);\n    }\n  }\n\n  changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    const attributes = {};\n    options = options || {};\n\n    if (Utils._.values(DataTypes).indexOf(dataTypeOrOptions) > -1) {\n      attributes[attributeName] = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attributes[attributeName] = dataTypeOrOptions;\n    }\n\n    attributes[attributeName].type = this.sequelize.normalizeDataType(attributes[attributeName].type);\n\n    if (this.sequelize.options.dialect === 'sqlite') {\n      // sqlite needs some special treatment as it cannot change a column\n      return SQLiteQueryInterface.changeColumn.call(this, tableName, attributes, options);\n    } else {\n      const query = this.QueryGenerator.attributesToSQL(attributes);\n      const sql = this.QueryGenerator.changeColumnQuery(tableName, query);\n\n      return this.sequelize.query(sql, options);\n    }\n  }\n\n  renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    return this.describeTable(tableName, options).then(data => {\n      if (!data[attrNameBefore]) {\n        throw new Error('Table ' + tableName + ' doesn\\'t have the column ' + attrNameBefore);\n      }\n\n      data = data[attrNameBefore] || {};\n\n      const _options = {};\n\n      _options[attrNameAfter] = {\n        attribute: attrNameAfter,\n        type: data.type,\n        allowNull: data.allowNull,\n        defaultValue: data.defaultValue\n      };\n\n      // fix: a not-null column cannot have null as default value\n      if (data.defaultValue === null && !data.allowNull) {\n        delete _options[attrNameAfter].defaultValue;\n      }\n\n      if (this.sequelize.options.dialect === 'sqlite') {\n        // sqlite needs some special treatment as it cannot rename a column\n        return SQLiteQueryInterface.renameColumn.call(this, tableName, attrNameBefore, attrNameAfter, options);\n      } else {\n        const sql = this.QueryGenerator.renameColumnQuery(\n          tableName,\n          attrNameBefore,\n          this.QueryGenerator.attributesToSQL(_options)\n        );\n        return this.sequelize.query(sql, options);\n      }\n    });\n  }\n\n  addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n    // testhint argsConform.end\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.QueryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return this.sequelize.query(sql, _.assign({}, options, { supportsSearchPath: false }));\n  }\n\n  showIndex(tableName, options) {\n    const sql = this.QueryGenerator.showIndexesQuery(tableName, options);\n    return this.sequelize.query(sql, _.assign({}, options, { type: QueryTypes.SHOWINDEXES }));\n  }\n\n  nameIndexes(indexes, rawTablename) {\n    return this.QueryGenerator.nameIndexes(indexes, rawTablename);\n  }\n\n  getForeignKeysForTables(tableNames, options) {\n    options = options || {};\n\n    if (tableNames.length === 0) {\n      return Promise.resolve({});\n    }\n\n    return Promise.map(tableNames, tableName =>\n      this.sequelize.query(this.QueryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options).get(0)\n    ).then(results => {\n      const result = {};\n\n      tableNames.forEach((tableName, i) => {\n        if (Utils._.isObject(tableName)) {\n          tableName = tableName.schema + '.' + tableName.tableName;\n        }\n\n        result[tableName] = Utils._.compact(results[i]).map(r => r.constraint_name);\n      });\n\n      return result;\n    });\n  }\n\n  removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);\n    return this.sequelize.query(sql, options);\n  }\n\n  addConstraint(tableName, attributes, options, rawTablename) {\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n\n    if (this.sequelize.dialect.name === 'sqlite') {\n      return SQLiteQueryInterface.addConstraint.call(this, tableName, options, rawTablename);\n    } else {\n      const sql = this.QueryGenerator.addConstraintQuery(tableName, options, rawTablename);\n      return this.sequelize.query(sql, options);\n    }\n  }\n\n  showConstraint(tableName, options) {\n    const sql = this.QueryGenerator.showConstraintsQuery(tableName, options);\n    return this.sequelize.query(sql, Object.assign({}, options, { type: QueryTypes.SHOWCONSTRAINTS }));\n  }\n\n  removeConstraint(tableName, constraintName, options) {\n    options = options || {};\n\n    switch (this.sequelize.options.dialect) {\n      case 'mysql':\n        //Mysql does not support DROP CONSTRAINT. Instead DROP PRIMARY, FOREIGN KEY, INDEX should be used\n        return MySQLQueryInterface.removeConstraint.call(this, tableName, constraintName, options);\n      case 'sqlite':\n        return SQLiteQueryInterface.removeConstraint.call(this, tableName, constraintName, options);\n      default:\n        const sql = this.QueryGenerator.removeConstraintQuery(tableName, constraintName);\n        return this.sequelize.query(sql, options);\n    }\n  }\n\n  insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.QueryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n\n    return this.sequelize.query(sql, options).then(results => {\n      if (instance) results[0].isNewRecord = false;\n      return results;\n    });\n  }\n\n  upsert(tableName, valuesByField, updateValues, where, model, options) {\n    const wheres = [];\n    const attributes = Object.keys(valuesByField);\n    let indexes = [];\n    let indexFields;\n\n    options = _.clone(options);\n\n    if (!Utils._.isEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine uniquekeys and indexes into one\n    indexes = Utils._.map(model.options.uniqueKeys, value => {\n      return value.fields;\n    });\n\n    Utils._.each(model.options.indexes, value => {\n      if (value.unique) {\n        // fields in the index may both the strings or objects with an attribute property - lets sanitize that\n        indexFields = Utils._.map(value.fields, field => {\n          if (Utils._.isPlainObject(field)) {\n            return field.attribute;\n          }\n          return field;\n        });\n        indexes.push(indexFields);\n      }\n    });\n\n    for (const index of indexes) {\n      if (Utils._.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = valuesByField[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { $or: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.QueryGenerator.upsertQuery(tableName, valuesByField, updateValues, where, model.rawAttributes, options);\n    return this.sequelize.query(sql, options).then(rowCount => {\n      if (rowCount === undefined) {\n        return rowCount;\n      }\n\n      // MySQL returns 1 for inserted, 2 for updated http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html. Postgres has been modded to do the same\n\n      return rowCount === 1;\n    });\n  }\n\n  bulkInsert(tableName, records, options, attributes) {\n    options = _.clone(options) || {};\n    options.type = QueryTypes.INSERT;\n    const sql = this.QueryGenerator.bulkInsertQuery(tableName, records, options, attributes);\n    return this.sequelize.query(sql, options).then(results => results[0]);\n  }\n\n  update(instance, tableName, values, identifier, options) {\n    options = _.clone(options || {});\n    options.hasTrigger = !!(instance && instance._modelOptions && instance._modelOptions.hasTrigger);\n\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n\n    options.type = QueryTypes.UPDATE;\n\n    options.instance = instance;\n    return this.sequelize.query(sql, options);\n  }\n\n  bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = Utils._.isObject(tableName) ? tableName : { tableName };\n    const model = Utils._.find(this.sequelize.modelManager.models, { tableName: table.tableName });\n\n    options.model = model;\n    return this.sequelize.query(sql, options);\n  }\n\n  delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.QueryGenerator.deleteQuery(tableName, identifier, null, instance.constructor);\n\n    options = _.clone(options) || {};\n\n    // Check for a restrict field\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete &&\n          association.options.onDelete.toLowerCase() === 'cascade' &&\n          association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    return Promise.each(cascades, cascade => {\n      return instance[cascade](options).then(instances => {\n        // Check for hasOne relationship with non-existing associate (\"has zero\")\n        if (!instances) {\n          return Promise.resolve();\n        }\n\n        if (!Array.isArray(instances)) instances = [instances];\n\n        return Promise.each(instances, instance => instance.destroy(options));\n      });\n    }).then(() => {\n      options.instance = instance;\n      return this.sequelize.query(sql, options);\n    });\n  }\n\n  bulkDelete(tableName, identifier, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {limit: null});\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.QueryGenerator.deleteQuery(tableName, identifier, options, model);\n    return this.sequelize.query(sql, options);\n  }\n\n  select(model, tableName, options) {\n    options = Utils.cloneDeep(options);\n    options.type = QueryTypes.SELECT;\n    options.model = model;\n\n    return this.sequelize.query(\n      this.QueryGenerator.selectQuery(tableName, options, model),\n      options\n    );\n  }\n\n  increment(instance, tableName, values, identifier, options) {\n    const sql = this.QueryGenerator.arithmeticQuery('+', tableName, values, identifier, options.attributes);\n\n    options = _.clone(options) || {};\n\n    options.type = QueryTypes.UPDATE;\n    options.instance = instance;\n    return this.sequelize.query(sql, options);\n  }\n\n  decrement(instance, tableName, values, identifier, options) {\n    const sql = this.QueryGenerator.arithmeticQuery('-', tableName, values, identifier, options.attributes);\n\n    options = _.clone(options) || {};\n\n    options.type = QueryTypes.UPDATE;\n    options.instance = instance;\n    return this.sequelize.query(sql, options);\n  }\n\n  rawSelect(tableName, options, attributeSelector, Model) {\n    if (options.schema) {\n      tableName = this.QueryGenerator.addSchema({\n        tableName,\n        _schema: options.schema\n      });\n    }\n\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n\n    const sql = this.QueryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    return this.sequelize.query(sql, options).then(data => {\n      if (!options.plain) {\n        return data;\n      }\n\n      let result = data ? data[attributeSelector] : null;\n\n      if (options && options.dataType) {\n        const dataType = options.dataType;\n\n        if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n          result = parseFloat(result);\n        } else if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n          result = parseInt(result, 10);\n        } else if (dataType instanceof DataTypes.DATE) {\n          if (!Utils._.isNull(result) && !Utils._.isDate(result)) {\n            result = new Date(result);\n          }\n        } else if (dataType instanceof DataTypes.STRING) {\n          // Nothing to do, result is already a string.\n        }\n      }\n\n      return result;\n    });\n  }\n\n  createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n    const sql = this.QueryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  dropTrigger(tableName, triggerName, options) {\n    const sql = this.QueryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.QueryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  createFunction(functionName, params, returnType, language, body, options) {\n    const sql = this.QueryGenerator.createFunction(functionName, params, returnType, language, body, options);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  dropFunction(functionName, params, options) {\n    const sql = this.QueryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.QueryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  // Helper methods useful for querying\n\n  /**\n   * Escape an identifier (e.g. a table or attribute name). If force is true,\n   * the identifier will be quoted even if the `quoteIdentifiers` option is\n   * false.\n   * @private\n   */\n  quoteIdentifier(identifier, force) {\n    return this.QueryGenerator.quoteIdentifier(identifier, force);\n  }\n\n  quoteTable(identifier) {\n    return this.QueryGenerator.quoteTable(identifier);\n  }\n\n  /**\n   * Split an identifier into .-separated tokens and quote each part.\n   * If force is true, the identifier will be quoted even if the\n   * `quoteIdentifiers` option is false.\n   * @private\n   */\n  quoteIdentifiers(identifiers, force) {\n    return this.QueryGenerator.quoteIdentifiers(identifiers, force);\n  }\n\n  /**\n   * Escape a value (e.g. a string, number or date)\n   * @private\n   */\n  escape(value) {\n    return this.QueryGenerator.escape(value);\n  }\n\n  setAutocommit(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set autocommit for a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Not possible to set a seperate isolation level for savepoints\n      return Promise.resolve();\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n\n    const sql = this.QueryGenerator.setAutocommitQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return Promise.resolve();\n\n    return this.sequelize.query(sql, options);\n  }\n\n  setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a seperate isolation level for savepoints\n      return Promise.resolve();\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n\n    const sql = this.QueryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return Promise.resolve();\n\n    return this.sequelize.query(sql, options);\n  }\n\n  startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.startTransactionQuery(transaction);\n\n    return this.sequelize.query(sql, options);\n  }\n\n  deferConstraints(transaction, options) {\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n\n    const sql = this.QueryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n\n  commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return Promise.resolve();\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false\n    });\n\n    const sql = this.QueryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'commit';\n\n    return promise;\n  }\n\n  rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'rollback';\n\n    return promise;\n  }\n}\n\nmodule.exports = QueryInterface;\nmodule.exports.QueryInterface = QueryInterface;\nmodule.exports.default = QueryInterface;\n"]}