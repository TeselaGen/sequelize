{"version":3,"sources":["../../sequelize-es6/lib/transaction.js"],"names":["Utils","require","Transaction","sequelize","options","savepoints","transactionOptions","dialect","supports","generateTransactionId","QueryGenerator","_","extend","autocommit","type","transactionType","isolationLevel","readOnly","parent","transaction","id","push","name","length","finished","Promise","reject","Error","_clearCls","getQueryInterface","commitTransaction","finally","cleanup","rollbackTransaction","connectionPromise","resolve","connection","acquireOptions","uuid","connectionManager","getConnection","then","begin","setDeferrable","setIsolationLevel","setAutocommit","catch","rollback","setupErr","tap","constructor","_cls","set","startTransaction","deferrable","deferConstraints","res","releaseConnection","undefined","cls","get","LOCK","DEFERRED","IMMEDIATE","EXCLUSIVE","READ_UNCOMMITTED","READ_COMMITTED","REPEATABLE_READ","SERIALIZABLE","UPDATE","SHARE","KEY_SHARE","NO_KEY_UPDATE","module","exports","default"],"mappings":"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","file":"transaction.js","sourcesContent":["'use strict';\n\nconst Utils = require('./utils');\n\n/**\n * The transaction object is used to identify a running transaction. It is created by calling `Sequelize.transaction()`.\n *\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @see {@link Sequelize.transaction}\n */\nclass Transaction {\n  /**\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {Object} options An object with options\n   * @param {Boolean} options.autocommit Sets the autocommit property of the transaction.\n   * @param {String} options.type=true Sets the type of the transaction.\n   * @param {String} options.isolationLevel=true Sets the isolation level of the transaction.\n   * @param {String} options.deferrable Sets the constraints to be deferred or immediately checked.\n   */\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n\n    // get dialect specific transaction options\n    const transactionOptions = sequelize.dialect.supports.transactionOptions || {};\n    const generateTransactionId = this.sequelize.dialect.QueryGenerator.generateTransactionId;\n\n    this.options = Utils._.extend({\n      autocommit: transactionOptions.autocommit || null,\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false\n    }, options || {});\n\n    this.parent = this.options.transaction;\n    this.id = this.parent ? this.parent.id : generateTransactionId();\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = this.id + '-savepoint-' + this.parent.savepoints.length;\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n\n  /**\n   * Commit the transaction\n   *\n   * @return {Promise}\n   */\n  commit() {\n\n    if (this.finished) {\n      return Utils.Promise.reject(new Error('Transaction cannot be committed because it has been finished with state: ' + this.finished));\n    }\n\n    this._clearCls();\n\n    return this\n      .sequelize\n      .getQueryInterface()\n      .commitTransaction(this, this.options)\n      .finally(() => {\n        this.finished = 'commit';\n        if (!this.parent) {\n          return this.cleanup();\n        }\n        return null;\n      });\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   *\n   * @return {Promise}\n   */\n  rollback() {\n\n    if (this.finished) {\n      return Utils.Promise.reject(new Error('Transaction cannot be rolled back because it has been finished with state: ' + this.finished));\n    }\n\n    this._clearCls();\n\n    return this\n      .sequelize\n      .getQueryInterface()\n      .rollbackTransaction(this, this.options)\n      .finally(() => {\n        if (!this.parent) {\n          return this.cleanup();\n        }\n        return this;\n      });\n  }\n\n  prepareEnvironment() {\n    let connectionPromise;\n\n    if (this.parent) {\n      connectionPromise = Utils.Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = { uuid: this.id };\n      if (this.options.readOnly) {\n        acquireOptions.type = 'SELECT';\n      }\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    return connectionPromise\n      .then(connection => {\n        this.connection = connection;\n        this.connection.uuid = this.id;\n      })\n      .then(() => this.begin())\n      .then(() => this.setDeferrable())\n      .then(() => this.setIsolationLevel())\n      .then(() => this.setAutocommit())\n      .catch(setupErr => this.rollback().finally(() => {\n        throw setupErr;\n      }))\n      .tap(() => {\n        if (this.sequelize.constructor._cls) {\n          this.sequelize.constructor._cls.set('transaction', this);\n        }\n        return null;\n      });\n  }\n\n  begin() {\n    return this\n      .sequelize\n      .getQueryInterface()\n      .startTransaction(this, this.options);\n  }\n\n  setDeferrable() {\n    if (this.options.deferrable) {\n      return this\n        .sequelize\n        .getQueryInterface()\n        .deferConstraints(this, this.options);\n    }\n  }\n\n  setAutocommit() {\n    return this\n      .sequelize\n      .getQueryInterface()\n      .setAutocommit(this, this.options.autocommit, this.options);\n  }\n\n  setIsolationLevel() {\n    return this\n      .sequelize\n      .getQueryInterface()\n      .setIsolationLevel(this, this.options.isolationLevel, this.options);\n  }\n\n  cleanup() {\n    const res = this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = undefined;\n    return res;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get('transaction') === this) {\n        cls.set('transaction', null);\n      }\n    }\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * ```js\n   * return sequelize.transaction({type: Sequelize.Transaction.TYPES.EXCLUSIVE}, transaction => {\n   *\n   *  // your transactions\n   *\n   * }).then(result => {\n   *   // transaction has been committed. Do something after the commit if required.\n   * }).catch(err => {\n   *   // do something with the err.\n   * });\n   * ```\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   */\n  static get TYPES() {\n    return {\n      DEFERRED: 'DEFERRED',\n      IMMEDIATE: 'IMMEDIATE',\n      EXCLUSIVE: 'EXCLUSIVE'\n    };\n  }\n\n  /**\n   * Isolations levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Default to `REPEATABLE_READ` but you can override the default isolation level by passing `options.isolationLevel` in `new Sequelize`.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * ```js\n   * return sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n *\n *  // your transactions\n *\n * }).then(result => {\n *   // transaction has been committed. Do something after the commit if required.\n * }).catch(err => {\n *   // do something with the err.\n * });\n   * ```\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   */\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: 'READ UNCOMMITTED',\n      READ_COMMITTED: 'READ COMMITTED',\n      REPEATABLE_READ: 'REPEATABLE READ',\n      SERIALIZABLE: 'SERIALIZABLE'\n    };\n  }\n\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * ```js\n   * t1 // is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   * ```\n   *\n   * Postgres also supports specific locks while eager loading by using OF:\n   * ```js\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   * ```\n   * UserModel will be locked but TaskModel won't!\n   *\n   * @return {Object}\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   */\n  static get LOCK() {\n    return {\n      UPDATE: 'UPDATE',\n      SHARE: 'SHARE',\n      KEY_SHARE: 'KEY SHARE',\n      NO_KEY_UPDATE: 'NO KEY UPDATE'\n    };\n  }\n\n  /**\n   * @see {@link Transaction.LOCK}\n   */\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;\n"]}