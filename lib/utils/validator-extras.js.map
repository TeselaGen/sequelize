{"version":3,"sources":["../../../sequelize-es6/lib/utils/validator-extras.js"],"names":["_","require","validator","cloneDeep","extensions","extend","name","fn","notEmpty","str","match","len","min","max","isLength","isUrl","isURL","isIPv6","isIP","isIPv4","notIn","values","isIn","regex","pattern","modifiers","Object","prototype","toString","call","slice","RegExp","notRegex","isDecimal","val","number","parseFloat","isNaN","not","contains","elem","indexOf","notContains","is","exports","extendModelValidations","modelInstance","isImmutable","param","field","isNewRecord","dataValues","_previousDataValues","forEach","key","notNull","Error","isNull","isEmpty"],"mappings":"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","file":"validator-extras.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst validator = _.cloneDeep(require('validator'));\n\nconst extensions = {\n  extend(name, fn) {\n    this[name] = fn;\n\n    return this;\n  },\n  notEmpty(str) {\n    return !str.match(/^[\\s\\t\\r\\n]*$/);\n  },\n  len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n  isUrl(str) {\n    return this.isURL(str);\n  },\n  isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n  isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n  notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n  regex(str, pattern, modifiers) {\n    str += '';\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== 'RegExp') {\n      pattern = new RegExp(pattern, modifiers);\n    }\n    return str.match(pattern);\n  },\n  notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n  isDecimal(str) {\n    return str !== '' && !!str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$/);\n  },\n  min(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n  max(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n  not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n  contains(str, elem) {\n    return str.indexOf(elem) >= 0 && !!elem;\n  },\n  notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n  is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n};\nexports.extensions = extensions;\n\nfunction extendModelValidations(modelInstance) {\n  const extensions = {\n    isImmutable(str, param, field) {\n      return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n    }\n  };\n\n  _.forEach(extensions, (extend, key) => {\n    validator[key] = extend;\n  });\n}\nexports.extendModelValidations = extendModelValidations;\n\n// Deprecate this.\nvalidator.notNull = function() {\n  throw new Error('Warning \"notNull\" validation has been deprecated in favor of Schema based \"allowNull\"');\n};\n\n// https://github.com/chriso/validator.js/blob/6.2.0/validator.js\n_.forEach(extensions, (extend, key) => {\n  validator[key] = extend;\n});\n\n// map isNull to isEmpty\n// https://github.com/chriso/validator.js/commit/e33d38a26ee2f9666b319adb67c7fc0d3dea7125\nvalidator.isNull = validator.isEmpty;\n\nexports.validator = validator;\n"]}