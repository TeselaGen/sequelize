{"version":3,"sources":["../../../sequelize-es6/lib/errors/index.js"],"names":["BaseError","message","name","Error","captureStackTrace","constructor","exports","SequelizeScopeError","parent","ValidationError","errors","length","map","err","type","join","path","reduce","reduced","error","push","OptimisticLockError","options","modelName","values","where","DatabaseError","original","sql","TimeoutError","UniqueConstraintError","fields","ForeignKeyConstraintError","table","value","index","ExclusionConstraintError","constraint","UnknownConstraintError","ValidationErrorItem","undefined","ConnectionError","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionTimedOutError","InstanceError","EmptyResultError","EagerLoadingError","AssociationError","QueryError"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n/**\n * Sequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.\n * All sequelize errors inherit from the base JS error object.\n *\n * This means that errors can be accessed using `Sequelize.ValidationError` or `sequelize.ValidationError`\n * The Base Error all Sequelize Errors inherit from.\n */\nclass BaseError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeBaseError';\n    this.message = message;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.BaseError = BaseError;\n\n/**\n * Scope Error. Thrown when the sequelize cannot query the specified scope.\n */\nclass SequelizeScopeError extends BaseError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeScopeError';\n  }\n}\nexports.SequelizeScopeError = SequelizeScopeError;\n\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param {string} message Error message\n * @param {Array} [errors] Array of ValidationErrorItem objects describing the validation errors\n *\n * @property errors An array of ValidationErrorItems\n */\nclass ValidationError extends BaseError {\n  constructor(message, errors) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    /**\n     *\n     * @type {ValidationErrorItem[]}\n     */\n    this.errors = errors || [];\n\n    // Use provided error message if available...\n    if (message) {\n      this.message = message;\n\n      // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map(err => err.type + ': ' + err.message).join(',\\n');\n    }\n  }\n\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   * @returns {ValidationErrorItem[]} Validation error items for the specified path\n   */\n  get(path) {\n    return this.errors.reduce((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n      return reduced;\n    }, []);\n  }\n}\nexports.ValidationError = ValidationError;\n\n/**\n * Thrown when attempting to update a stale model instance\n */\nclass OptimisticLockError extends BaseError {\n  constructor(options) {\n    options = options || {};\n    options.message = options.message || 'Attempting to update a stale model instance: ' + options.modelName;\n    super(options);\n    this.name = 'SequelizeOptimisticLockError';\n    this.message = options.message;\n    /**\n     * The name of the model on which the update was attempted\n     * @type {string}\n     */\n    this.modelName = options.modelName;\n    /**\n     * The values of the attempted update\n     * @type {object}\n     */\n    this.values = options.values;\n    /**\n     *\n     * @type {object}\n     */\n    this.where = options.where;\n  }\n}\nexports.OptimisticLockError = OptimisticLockError;\n\n/**\n * A base class for all database related errors.\n */\nclass DatabaseError extends BaseError {\n  constructor(parent) {\n    super(parent.message);\n    this.name = 'SequelizeDatabaseError';\n    /**\n     * @type {Error}\n     */\n    this.parent = parent;\n    /**\n     * @type {Error}\n     */\n    this.original = parent;\n    /**\n     * The SQL that triggered the error\n     * @type {string}\n     */\n    this.sql = parent.sql;\n  }\n}\nexports.DatabaseError = DatabaseError;\n\n/**\n * Thrown when a database query times out because of a deadlock\n */\nclass TimeoutError extends DatabaseError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeTimeoutError';\n  }\n}\nexports.TimeoutError = TimeoutError;\n\n/**\n * Thrown when a unique constraint is violated in the database\n */\nclass UniqueConstraintError extends ValidationError {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || { sql: '' };\n    options.message = options.message || options.parent.message || 'Validation Error';\n    options.errors = options.errors || {};\n    super(options.message, options.errors);\n\n    this.name = 'SequelizeUniqueConstraintError';\n    this.message = options.message;\n    this.errors = options.errors;\n    this.fields = options.fields;\n    this.parent = options.parent;\n    this.original = options.parent;\n    this.sql = options.parent.sql;\n  }\n}\nexports.UniqueConstraintError = UniqueConstraintError;\n\n/**\n * Thrown when a foreign key constraint is violated in the database\n */\nclass ForeignKeyConstraintError extends DatabaseError {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || { sql: '' };\n\n    super(options.parent);\n    this.name = 'SequelizeForeignKeyConstraintError';\n\n    this.message = options.message || options.parent.message || 'Database Error';\n    this.fields = options.fields;\n    this.table = options.table;\n    this.value = options.value;\n    this.index = options.index;\n  }\n}\nexports.ForeignKeyConstraintError = ForeignKeyConstraintError;\n\n/**\n * Thrown when an exclusion constraint is violated in the database\n */\nclass ExclusionConstraintError extends DatabaseError {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || { sql: '' };\n\n    super(options.parent);\n    this.name = 'SequelizeExclusionConstraintError';\n\n    this.message = options.message || options.parent.message;\n    this.constraint = options.constraint;\n    this.fields = options.fields;\n    this.table = options.table;\n  }\n}\nexports.ExclusionConstraintError = ExclusionConstraintError;\n\n/**\n * Thrown when constraint name is not found in the database\n */\nclass UnknownConstraintError extends DatabaseError {\n  constructor(message) {\n    const parent = { message };\n    super(parent);\n    this.name = 'SequelizeUnknownConstraintError';\n    this.message = message || 'The specified constraint does not exist';\n  }\n}\nexports.UnknownConstraintError = UnknownConstraintError;\n\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n *\n * @param {string} message An error message\n * @param {string} type The type of the validation error\n * @param {string} path The field that triggered the validation error\n * @param {string} value The value that generated the error\n */\nclass ValidationErrorItem {\n  constructor(message, type, path, value) {\n    this.message = message || '';\n    this.type = type || null;\n    this.path = path || null;\n    this.value = value !== undefined ? value : null;\n  }\n}\nexports.ValidationErrorItem = ValidationErrorItem;\n\n/**\n * A base class for all connection related errors.\n */\nclass ConnectionError extends BaseError {\n  constructor(parent) {\n    super(parent ? parent.message : '');\n    this.name = 'SequelizeConnectionError';\n    /**\n     * The connection specific error which triggered this one\n     * @type {Error}\n     */\n    this.parent = parent;\n    this.original = parent;\n  }\n}\nexports.ConnectionError = ConnectionError;\n\n/**\n * Thrown when a connection to a database is refused\n */\nclass ConnectionRefusedError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeConnectionRefusedError';\n  }\n}\nexports.ConnectionRefusedError = ConnectionRefusedError;\n\n/**\n * Thrown when a connection to a database is refused due to insufficient privileges\n */\nclass AccessDeniedError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeAccessDeniedError';\n  }\n}\nexports.AccessDeniedError = AccessDeniedError;\n\n/**\n * Thrown when a connection to a database has a hostname that was not found\n */\nclass HostNotFoundError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeHostNotFoundError';\n  }\n}\nexports.HostNotFoundError = HostNotFoundError;\n\n/**\n * Thrown when a connection to a database has a hostname that was not reachable\n */\nclass HostNotReachableError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeHostNotReachableError';\n  }\n}\nexports.HostNotReachableError = HostNotReachableError;\n\n/**\n * Thrown when a connection to a database has invalid values for any of the connection parameters\n */\nclass InvalidConnectionError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeInvalidConnectionError';\n  }\n}\nexports.InvalidConnectionError = InvalidConnectionError;\n\n/**\n * Thrown when a connection to a database times out\n */\nclass ConnectionTimedOutError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeConnectionTimedOutError';\n  }\n}\nexports.ConnectionTimedOutError = ConnectionTimedOutError;\n\n/**\n * Thrown when a some problem occurred with Instance methods (see message for details)\n */\nclass InstanceError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeInstanceError';\n    this.message = message;\n  }\n}\nexports.InstanceError = InstanceError;\n\n/**\n * Thrown when a record was not found, Usually used with rejectOnEmpty mode (see message for details)\n */\nclass EmptyResultError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeEmptyResultError';\n    this.message = message;\n  }\n}\nexports.EmptyResultError = EmptyResultError;\n\n/**\n * Thrown when an include statement is improperly constructed (see message for details)\n */\nclass EagerLoadingError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeEagerLoadingError';\n    this.message = message;\n  }\n}\nexports.EagerLoadingError = EagerLoadingError;\n\n/**\n * Thrown when an association is improperly constructed (see message for details)\n */\nclass AssociationError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeAssociationError';\n    this.message = message;\n  }\n}\nexports.AssociationError = AssociationError;\n/**\n * Thrown when a query is passed invalid options (see message for details)\n */\nclass QueryError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeQueryError';\n    this.message = message;\n  }\n}\nexports.QueryError = QueryError;\n"]}