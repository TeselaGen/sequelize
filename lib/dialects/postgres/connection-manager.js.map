{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/postgres/connection-manager.js"],"names":["AbstractConnectionManager","require","Utils","debug","getLogger","debugContext","Promise","sequelizeErrors","semver","dataTypes","moment","ConnectionManager","dialect","sequelize","config","port","pgLib","dialectModulePath","lib","native","err","code","Error","refreshTypeParser","postgres","dataType","types","oids","oid","setTypeParser","parse","value","getTypeParser","array_oids","arrayParser","create","v","user","username","connectionConfig","_","pick","dialectOptions","merge","resolve","reject","connection","Client","responded","connect","ConnectionRefusedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","on","ConnectionTimedOutError","_invalid","tap","query","options","databaseVersion","gte","keepDefaultTimezone","isZone","tz","zone","timezone","supportedVersion","HSTORE","length","type","row","typname","GEOMETRY","GEOGRAPHY","push","typarray","_refreshTypeParser","end","undefined","extend","prototype","module","exports","default"],"mappings":"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","file":"connection-manager.js","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('connection:pg');\nconst Promise = require('../../promise');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst moment = require('moment-timezone');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 5432;\n    try {\n      let pgLib;\n      if (sequelize.config.dialectModulePath) {\n        pgLib = require(sequelize.config.dialectModulePath);\n      } else {\n        pgLib = require('pg');\n      }\n      this.lib = sequelize.config.native ? pgLib.native : pgLib;\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        throw new Error('Please install \\'' + (sequelize.config.dialectModulePath || 'pg') + '\\' module manually');\n      }\n      throw err;\n    }\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n\n    if (dataType.types.postgres.oids) {\n      for (const oid of dataType.types.postgres.oids) {\n        this.lib.types.setTypeParser(oid, value => dataType.parse(value, oid, this.lib.types.getTypeParser));\n      }\n    }\n\n    if (dataType.types.postgres.array_oids) {\n      for (const oid of dataType.types.postgres.array_oids) {\n        this.lib.types.setTypeParser(oid, value =>\n          this.lib.types.arrayParser.create(value, v =>\n            dataType.parse(v, oid, this.lib.types.getTypeParser)\n          ).parse()\n        );\n      }\n    }\n  }\n\n  connect(config) {\n\n    config.user = config.username;\n    const connectionConfig = Utils._.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    if (config.dialectOptions) {\n      Utils._.merge(connectionConfig,\n                    Utils._.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n                      'application_name',\n        // choose the SSL mode with the PGSSLMODE environment variable\n        // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]\n        // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n                      'ssl',\n        // In addition to the values accepted by the corresponding server,\n        // you can use \"auto\" to determine the right encoding from the\n        // current locale in the client (LC_CTYPE environment variable on Unix systems)\n                      'client_encoding',\n        // !! DONT SET THIS TO TRUE !!\n        // (unless you know what you're doing)\n        // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n                      'binary'\n                    ]));\n    }\n\n    return new Promise((resolve, reject) => {\n      const connection = new this.lib.Client(connectionConfig);\n      let responded = false;\n\n      connection.connect(err => {\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n          return;\n        }\n        responded = true;\n        debug('connection acquired');\n        resolve(connection);\n      });\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout, node-postgres does not treat this as an error since no active query was ever emitted\n      connection.on('end', () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      });\n\n      // Don't let a Postgres restart (or error) to take down the whole app\n      connection.on('error', err => {\n        debug(`connection error ${err.code}`);\n        connection._invalid = true;\n      });\n    }).tap(connection => {\n      // Disable escape characters in strings, see https://github.com/sequelize/sequelize/issues/3545\n      let query = '';\n\n      if (this.sequelize.options.databaseVersion !== 0 && semver.gte(this.sequelize.options.databaseVersion, '8.2.0')) {\n        query += 'SET standard_conforming_strings=on;';\n      }\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        const isZone = !!moment.tz.zone(this.sequelize.options.timezone);\n        if (isZone) {\n          query += 'SET client_min_messages TO warning; SET TIME ZONE \\'' + this.sequelize.options.timezone + '\\';';\n        } else {\n          query += 'SET client_min_messages TO warning; SET TIME ZONE INTERVAL \\'' + this.sequelize.options.timezone + '\\' HOUR TO MINUTE;';\n        }\n      }\n\n      // oids for hstore and geometry are dynamic - so select them at connection time\n      const supportedVersion = this.sequelize.options.databaseVersion !== 0 && semver.gte(this.sequelize.options.databaseVersion, '8.3.0');\n      if (dataTypes.HSTORE.types.postgres.oids.length === 0 && supportedVersion) {\n        query += 'SELECT typname, oid, typarray FROM pg_type WHERE typtype = \\'b\\' AND typname IN (\\'hstore\\', \\'geometry\\', \\'geography\\')';\n      }\n      \n      return new Promise((resolve, reject) => {\n        connection.query(query)\n          .on('error', err => reject(err))\n          .on('row', row => {\n            let type;\n            if (row.typname === 'geometry') {\n              type = dataTypes.postgres.GEOMETRY;\n            } else if (row.typname === 'hstore') {\n              type = dataTypes.postgres.HSTORE;\n            } else if (row.typname === 'geography'){\n              type = dataTypes.postgres.GEOGRAPHY;\n            }\n\n            type.types.postgres.oids.push(row.oid);\n            type.types.postgres.array_oids.push(row.typarray);\n\n            this._refreshTypeParser(type);\n          })\n          .on('end', () => resolve());\n      });\n    });\n  }\n  disconnect(connection) {\n    return new Promise(resolve => {\n      connection.end();\n      resolve();\n    });\n  }\n\n  validate(connection) {\n    return connection._invalid === undefined;\n  }\n}\n\nUtils._.extend(ConnectionManager.prototype, AbstractConnectionManager.prototype);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]}