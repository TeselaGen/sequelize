{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/postgres/query-generator.js"],"names":["Utils","require","util","DataTypes","AbstractQueryGenerator","semver","_","QueryGenerator","__proto__","options","dialect","setSearchPath","searchPath","createSchema","schema","dropSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","extend","databaseVersion","get","attrStr","comments","comment","isString","escape","attr","i","indexOf","substring","dataType","dataTypeMapping","push","quoteIdentifier","values","table","quoteTable","join","template","uniqueKeys","each","columns","singleField","fields","map","quoteIdentifiers","f","pks","reduce","acc","attribute","key","includes","length","gte","dropTableQuery","cascade","showTablesQuery","describeTableQuery","checkValidJsonStatement","stmt","jsonFunctionRegex","jsonOperatorRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","operatorMatches","tokenMatches","capturedToken","Error","jsonPathExtractionQuery","column","path","paths","toPath","pathStr","quotedColumn","isIdentifierQuoted","handleSequelizeMethod","smth","factory","prepend","Json","conditions","parseConditionObject","first","condition","tail","value","str","shift","format","call","addColumnQuery","dbDataType","attributeToSQL","context","definition","quotedKey","quotedTable","extractTableDetails","query","type","ENUM","pgEnum","removeColumnQuery","attributeName","quotedTableName","quotedAttributeName","changeColumnQuery","sql","attrSql","replace","trim","match","pgEnumName","renameColumnQuery","attrBefore","attrString","before","after","fn","fnName","body","returns","language","exceptionFn","main","then","when","upsertQuery","insertValues","updateValues","where","rawAttributes","insert","insertQuery","update","updateQuery","deleteQuery","model","truncate","restartIdentity","isUndefined","limit","replacements","getWhereConditions","primaryKeys","pk","field","primaryKeyAttributes","primaryKeysSelection","showIndexesQuery","schemaJoin","schemaWhere","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","indexName","underscore","addLimitAndOffset","fragment","offset","isPlainObject","Array","isArray","hasOwnProperty","allowNull","autoIncrement","defaultValueSchemable","defaultValue","unique","primaryKey","references","referencesTable","referencesKey","onDelete","toUpperCase","onUpdate","deferrable","toString","deferConstraintsQuery","setConstraintQuery","columnFragment","setDeferredQuery","setImmediateQuery","attributesToSQL","result","findAutoIncrementField","name","createTrigger","triggerName","eventType","fireOnSpec","functionName","functionParams","optionsArray","decodedEventType","decodeTriggerEventType","eventSpec","expandTriggerEventSpec","expandedOptions","expandOptions","paramList","expandFunctionParamList","triggerEventTypeIsConstraint","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","indentedBody","dropFunction","renameFunction","oldFunctionName","newFunctionName","databaseConnectionUri","config","uri","protocol","user","password","host","port","database","ssl","pgEscapeAndQuote","val","removeTicks","paramDef","has","curParam","direction","joined","isEmpty","eventSpecifier","EVENT_DECODER","fireValue","fireKey","EVENT_MAP","tableDetails","enumName","delimiter","pgListEnums","attrName","force","pgEnumDrop","pgEnumAdd","sequelize","fromArray","text","matches","m","slice","padInt","identifier","addTicks","getForeignKeysQuery","dropForeignKeyQuery","foreignKey","setAutocommitQuery","parent","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,QAAQC,QAAQ,aAAR,CAAd;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,YAAYF,QAAQ,kBAAR,CAAlB;AACA,IAAMG,yBAAyBH,QAAQ,6BAAR,CAA/B;AACA,IAAMI,SAASJ,QAAQ,QAAR,CAAf;AACA,IAAMK,IAAIL,QAAQ,QAAR,CAAV;;AAEA,IAAMM,iBAAiB;AACrBC,aAAWJ,sBADU;AAErBK,WAAS,EAFY;AAGrBC,WAAS,UAHY;;AAKrBC,eALqB,yBAKPC,UALO,EAKK;AACxB,mCAA6BA,UAA7B;AACD,GAPoB;AASrBC,cATqB,wBASRC,MATQ,EASA;AACnB,8BAAwBA,MAAxB;AACD,GAXoB;AAarBC,YAbqB,sBAaVD,MAbU,EAaF;AACjB,sCAAgCA,MAAhC;AACD,GAfoB;AAiBrBE,kBAjBqB,8BAiBF;AACjB,WAAO,uJAAP;AACD,GAnBoB;AAqBrBC,cArBqB,0BAqBN;AACb,WAAO,qBAAP;AACD,GAvBoB;AAyBrBC,kBAzBqB,4BAyBJC,SAzBI,EAyBOC,UAzBP,EAyBmBX,OAzBnB,EAyB4B;AAAA;;AAE/CA,cAAUT,MAAMM,CAAN,CAAQe,MAAR,CAAe,EAAf,EACPZ,WAAW,EADJ,CAAV;;AAGA;AACA,QAAMa,kBAAkBtB,MAAMM,CAAN,CAAQiB,GAAR,CAAY,IAAZ,EAAkB,mCAAlB,EAAuD,CAAvD,CAAxB;AACA,QAAMC,UAAU,EAAhB;AACA,QAAIC,WAAW,EAAf;;AAEA,QAAIhB,QAAQiB,OAAR,IAAmB1B,MAAMM,CAAN,CAAQqB,QAAR,CAAiBlB,QAAQiB,OAAzB,CAAvB,EAA0D;AACxDD,kBAAY,wCAAwC,KAAKG,MAAL,CAAYnB,QAAQiB,OAApB,CAApD;AACD;;AAED,SAAK,IAAMG,IAAX,IAAmBT,UAAnB,EAA+B;AAC7B,UAAMU,IAAIV,WAAWS,IAAX,EAAiBE,OAAjB,CAAyB,SAAzB,CAAV;AACA,UAAID,MAAM,CAAC,CAAX,EAAc;AACZ;AACAL,oBAAY,OAAOL,WAAWS,IAAX,EAAiBG,SAAjB,CAA2BF,CAA3B,CAAnB;AACAV,mBAAWS,IAAX,IAAmBT,WAAWS,IAAX,EAAiBG,SAAjB,CAA2B,CAA3B,EAA8BF,CAA9B,CAAnB;AACD;;AAED,UAAMG,WAAW,KAAKC,eAAL,CAAqBf,SAArB,EAAgCU,IAAhC,EAAsCT,WAAWS,IAAX,CAAtC,CAAjB;AACAL,cAAQW,IAAR,CAAa,KAAKC,eAAL,CAAqBP,IAArB,IAA6B,GAA7B,GAAmCI,QAAhD;AACD;;AAED,QAAMI,SAAS;AACbC,aAAO,KAAKC,UAAL,CAAgBpB,SAAhB,CADM;AAEbC,kBAAYI,QAAQgB,IAAR,CAAa,IAAb,CAFC;AAGbf,gBAAUzB,MAAMM,CAAN,CAAQmC,QAAR,CAAiBhB,QAAjB,EAA2B,EAAEa,OAAO,KAAKC,UAAL,CAAgBpB,SAAhB,CAAT,EAA3B;AAHG,KAAf;;AAMA,QAAIV,QAAQiC,UAAZ,EAAwB;AACtB1C,YAAMM,CAAN,CAAQqC,IAAR,CAAalC,QAAQiC,UAArB,EAAiC,mBAAW;AAC1C,YAAI,CAACE,QAAQC,WAAb,EAA0B;AAAE;AAC1BR,iBAAOjB,UAAP,IAAqB,eAAewB,QAAQE,MAAR,CAAeC,GAAf,CAAmB;AAAA,mBAAK,MAAKC,gBAAL,CAAsBC,CAAtB,CAAL;AAAA,WAAnB,EAAkDT,IAAlD,CAAuD,IAAvD,CAAf,GAA8E,GAAnG;AACD;AACF,OAJD;AAKD;;AAED,QAAMU,MAAM5C,EAAE6C,MAAF,CAAS/B,UAAT,EAAqB,UAACgC,GAAD,EAAMC,SAAN,EAAiBC,GAAjB,EAAyB;AACxD,UAAIhD,EAAEiD,QAAF,CAAWF,SAAX,EAAsB,aAAtB,CAAJ,EAA0C;AACxCD,YAAIjB,IAAJ,CAAS,MAAKC,eAAL,CAAqBkB,GAArB,CAAT;AACD;AACD,aAAOF,GAAP;AACD,KALW,EAKT,EALS,EAKLZ,IALK,CAKA,GALA,CAAZ;;AAOA,QAAIU,IAAIM,MAAJ,GAAa,CAAjB,EAAoB;AAClBnB,aAAOjB,UAAP,IAAqB,oBAAoB8B,GAApB,GAA0B,GAA/C;AACD;;AAED,8BAAuB5B,oBAAoB,CAApB,IAAyBjB,OAAOoD,GAAP,CAAWnC,eAAX,EAA4B,OAA5B,CAAzB,GAAgE,gBAAhE,GAAmF,EAA1G,IAA+Ge,OAAOC,KAAtH,UAAgID,OAAOjB,UAAvI,SAAqJiB,OAAOZ,QAA5J;AACD,GA7EoB;AA+ErBiC,gBA/EqB,0BA+ENvC,SA/EM,EA+EKV,OA/EL,EA+Ec;AACjCA,cAAUA,WAAW,EAArB;AACA,qCAA+B,KAAK8B,UAAL,CAAgBpB,SAAhB,CAA/B,IAA4DV,QAAQkD,OAAR,GAAkB,UAAlB,GAA+B,EAA3F;AACD,GAlFoB;AAoFrBC,iBApFqB,6BAoFH;AAChB,WAAO,kJAAP;AACD,GAtFoB;AAwFrBC,oBAxFqB,8BAwFF1C,SAxFE,EAwFSL,MAxFT,EAwFiB;AACpC,QAAI,CAACA,MAAL,EAAa;AACXA,eAAS,QAAT;AACD;AACD,WAAO,0EACG,0DADH,GAEG,oFAFH,GAGG,iCAHH,GAIG,2EAJH,GAKG,2CALH,GAMC,oCAND,GAOC,oDAPD,GAQG,qCARH,GASG,+CATH,GAUG,+CAVH,GAWG,qEAXH,GAYK,4CAZL,GAaK,6CAbL,GAcC,oCAdD,GAeC,iCAfD,GAgBC,mCAhBD,8BAiBmB,KAAKc,MAAL,CAAYT,SAAZ,CAjBnB,8BAiBkE,KAAKS,MAAL,CAAYd,MAAZ,CAjBlE,OAAP;AAkBD,GA9GoB;;;AAgHrB;;;;;;;AAOAgD,yBAvHqB,mCAuHGC,IAvHH,EAuHS;AAC5B,QAAI,CAACzD,EAAEqB,QAAF,CAAWoC,IAAX,CAAL,EAAuB;AACrB,aAAO,KAAP;AACD;;AAED;AACA,QAAMC,oBAAoB,wDAA1B;AACA,QAAMC,oBAAoB,yCAA1B;AACA,QAAMC,oBAAoB,4DAA1B;;AAEA,QAAIC,eAAe,CAAnB;AACA,QAAIC,kBAAkB,CAAtB;AACA,QAAIC,kBAAkB,CAAtB;AACA,QAAIC,kBAAkB,KAAtB;AACA,QAAIC,kBAAkB,KAAtB;;AAEA,WAAOJ,eAAeJ,KAAKP,MAA3B,EAAmC;AACjC,UAAMgB,SAAST,KAAKU,MAAL,CAAYN,YAAZ,CAAf;AACA,UAAMO,kBAAkBV,kBAAkBW,IAAlB,CAAuBH,MAAvB,CAAxB;AACA,UAAIE,eAAJ,EAAqB;AACnBP,wBAAgBO,gBAAgB,CAAhB,EAAmB3C,OAAnB,CAA2B,GAA3B,CAAhB;AACAuC,0BAAkB,IAAlB;AACA;AACD;;AAED,UAAMM,kBAAkBX,kBAAkBU,IAAlB,CAAuBH,MAAvB,CAAxB;AACA,UAAII,eAAJ,EAAqB;AACnBT,wBAAgBS,gBAAgB,CAAhB,EAAmBpB,MAAnC;AACAc,0BAAkB,IAAlB;AACA;AACD;;AAED,UAAMO,eAAeX,kBAAkBS,IAAlB,CAAuBH,MAAvB,CAArB;AACA,UAAIK,YAAJ,EAAkB;AAChB,YAAMC,gBAAgBD,aAAa,CAAb,CAAtB;AACA,YAAIC,kBAAkB,GAAtB,EAA2B;AACzBV;AACD,SAFD,MAEO,IAAIU,kBAAkB,GAAtB,EAA2B;AAChCT;AACD,SAFM,MAEA,IAAIS,kBAAkB,GAAtB,EAA2B;AAChCP,4BAAkB,IAAlB;AACA;AACD;AACDJ,wBAAgBU,aAAa,CAAb,EAAgBrB,MAAhC;AACA;AACD;;AAED;AACD;;AAED;AACAe,uBAAmBH,oBAAoBC,eAAvC;AACA,QAAIC,mBAAmBC,eAAvB,EAAwC;AACtC,YAAM,IAAIQ,KAAJ,CAAU,6BAA6BhB,IAAvC,CAAN;AACD;;AAED;AACA,WAAOO,eAAP;AACD,GAjLoB;;;AAmLrB;;;;;;;;AAQAU,yBA3LqB,mCA2LGC,MA3LH,EA2LWC,IA3LX,EA2LiB;AACpC,QAAMC,QAAQ7E,EAAE8E,MAAF,CAASF,IAAT,CAAd;AACA,QAAMG,UAAU,KAAKzD,MAAL,OAAgBuD,MAAM3C,IAAN,CAAW,GAAX,CAAhB,OAAhB;AACA,QAAM8C,eAAe,KAAKC,kBAAL,CAAwBN,MAAxB,IAAkCA,MAAlC,GAA2C,KAAK7C,eAAL,CAAqB6C,MAArB,CAAhE;AACA,iBAAWK,YAAX,WAA6BD,OAA7B;AACD,GAhMoB;AAkMrBG,uBAlMqB,iCAkMCC,IAlMD,EAkMOtE,SAlMP,EAkMkBuE,OAlMlB,EAkM2BjF,OAlM3B,EAkMoCkF,OAlMpC,EAkM6C;AAAA;;AAChE,QAAIF,gBAAgBzF,MAAM4F,IAA1B,EAAgC;AAC9B;AACA,UAAIH,KAAKI,UAAT,EAAqB;AACnB,YAAMA,aAAavF,EAAEyC,GAAF,CAAM,KAAK+C,oBAAL,CAA0BL,KAAKI,UAA/B,CAAN,EAAkD;AAAA,iBAChE,OAAKb,uBAAL,CAA6B1E,EAAEyF,KAAF,CAAQC,UAAUd,IAAlB,CAA7B,EAAsD5E,EAAE2F,IAAF,CAAOD,UAAUd,IAAjB,CAAtD,CADgE,aACoBc,UAAUE,KAD9B;AAAA,SAAlD,CAAnB;;AAIA,eAAOL,WAAWrD,IAAX,CAAgB,OAAhB,CAAP;AACD,OAND,MAMO,IAAIiD,KAAKP,IAAT,EAAe;AACpB,YAAIiB,YAAJ;;AAEA;AACA,YAAI,KAAKrC,uBAAL,CAA6B2B,KAAKP,IAAlC,CAAJ,EAA6C;AAC3CiB,gBAAMV,KAAKP,IAAX;AACD,SAFD,MAEO;AACL;AACA,cAAMC,QAAQ7E,EAAE8E,MAAF,CAASK,KAAKP,IAAd,CAAd;AACA,cAAMD,SAASE,MAAMiB,KAAN,EAAf;AACAD,gBAAM,KAAKnB,uBAAL,CAA6BC,MAA7B,EAAqCE,KAArC,CAAN;AACD;;AAED,YAAIM,KAAKS,KAAT,EAAgB;AACdC,iBAAOjG,KAAKmG,MAAL,CAAY,OAAZ,EAAqB,KAAKzE,MAAL,CAAY6D,KAAKS,KAAjB,CAArB,CAAP;AACD;;AAED,eAAOC,GAAP;AACD;AACF;AACD,WAAO/F,uBAAuBoF,qBAAvB,CAA6Cc,IAA7C,CAAkD,IAAlD,EAAwDb,IAAxD,EAA8DtE,SAA9D,EAAyEuE,OAAzE,EAAkFjF,OAAlF,EAA2FkF,OAA3F,CAAP;AACD,GAhOoB;AAkOrBY,gBAlOqB,0BAkONjE,KAlOM,EAkOCgB,GAlOD,EAkOMrB,QAlON,EAkOgB;;AAEnC,QAAMuE,aAAa,KAAKC,cAAL,CAAoBxE,QAApB,EAA8B,EAAEyE,SAAS,WAAX,EAA9B,CAAnB;AACA,QAAMC,aAAa,KAAKzE,eAAL,CAAqBI,KAArB,EAA4BgB,GAA5B,EAAiCkD,UAAjC,CAAnB;AACA,QAAMI,YAAY,KAAKxE,eAAL,CAAqBkB,GAArB,CAAlB;AACA,QAAMuD,cAAc,KAAKtE,UAAL,CAAgB,KAAKuE,mBAAL,CAAyBxE,KAAzB,CAAhB,CAApB;;AAEA,QAAIyE,yBAAuBF,WAAvB,oBAAiDD,SAAjD,SAA8DD,UAA9D,MAAJ;;AAEA,QAAI1E,SAAS+E,IAAT,IAAiB/E,SAAS+E,IAAT,YAAyB7G,UAAU8G,IAApD,IAA4DhF,oBAAoB9B,UAAU8G,IAA9F,EAAoG;AAClGF,cAAQ,KAAKG,MAAL,CAAY5E,KAAZ,EAAmBgB,GAAnB,EAAwBrB,QAAxB,IAAoC8E,KAA5C;AACD;;AAED,WAAOA,KAAP;AACD,GAhPoB;AAkPrBI,mBAlPqB,6BAkPHhG,SAlPG,EAkPQiG,aAlPR,EAkPuB;AAC1C,QAAMC,kBAAkB,KAAK9E,UAAL,CAAgB,KAAKuE,mBAAL,CAAyB3F,SAAzB,CAAhB,CAAxB;AACA,QAAMmG,sBAAsB,KAAKlF,eAAL,CAAqBgF,aAArB,CAA5B;AACA,4BAAsBC,eAAtB,qBAAqDC,mBAArD;AACD,GAtPoB;AAwPrBC,mBAxPqB,6BAwPHpG,SAxPG,EAwPQC,UAxPR,EAwPoB;AACvC,QAAM2F,QAAQ,yDAAd;AACA,QAAMS,MAAM,EAAZ;;AAEA,SAAK,IAAMJ,aAAX,IAA4BhG,UAA5B,EAAwC;AACtC,UAAIuF,aAAa,KAAKzE,eAAL,CAAqBf,SAArB,EAAgCiG,aAAhC,EAA+ChG,WAAWgG,aAAX,CAA/C,CAAjB;AACA,UAAIK,UAAU,EAAd;;AAEA,UAAId,WAAW5E,OAAX,CAAmB,UAAnB,IAAiC,CAArC,EAAwC;AACtC0F,mBAAWzH,MAAMM,CAAN,CAAQmC,QAAR,CAAiBsE,KAAjB,EAAwB;AACjC5F,qBAAW,KAAKoB,UAAL,CAAgBpB,SAAhB,CADsB;AAEjC4F,iBAAO,KAAK3E,eAAL,CAAqBgF,aAArB,IAAsC;AAFZ,SAAxB,CAAX;;AAKAT,qBAAaA,WAAWe,OAAX,CAAmB,UAAnB,EAA+B,EAA/B,EAAmCC,IAAnC,EAAb;AACD,OAPD,MAOO,IAAI,CAAChB,WAAWiB,KAAX,CAAiB,YAAjB,CAAL,EAAqC;AAC1CH,mBAAWzH,MAAMM,CAAN,CAAQmC,QAAR,CAAiBsE,KAAjB,EAAwB;AACjC5F,qBAAW,KAAKoB,UAAL,CAAgBpB,SAAhB,CADsB;AAEjC4F,iBAAO,KAAK3E,eAAL,CAAqBgF,aAArB,IAAsC;AAFZ,SAAxB,CAAX;AAID;;AAED,UAAIT,WAAW5E,OAAX,CAAmB,SAAnB,IAAgC,CAApC,EAAuC;AACrC0F,mBAAWzH,MAAMM,CAAN,CAAQmC,QAAR,CAAiBsE,KAAjB,EAAwB;AACjC5F,qBAAW,KAAKoB,UAAL,CAAgBpB,SAAhB,CADsB;AAEjC4F,iBAAO,KAAK3E,eAAL,CAAqBgF,aAArB,IAAsC,eAAtC,GAAwDT,WAAWiB,KAAX,CAAiB,iBAAjB,EAAoC,CAApC;AAF9B,SAAxB,CAAX;;AAKAjB,qBAAaA,WAAWe,OAAX,CAAmB,gBAAnB,EAAqC,EAArC,EAAyCC,IAAzC,EAAb;AACD,OAPD,MAOO,IAAI,CAAChB,WAAWiB,KAAX,CAAiB,YAAjB,CAAL,EAAqC;AAC1CH,mBAAWzH,MAAMM,CAAN,CAAQmC,QAAR,CAAiBsE,KAAjB,EAAwB;AACjC5F,qBAAW,KAAKoB,UAAL,CAAgBpB,SAAhB,CADsB;AAEjC4F,iBAAO,KAAK3E,eAAL,CAAqBgF,aAArB,IAAsC;AAFZ,SAAxB,CAAX;AAID;;AAED,UAAIhG,WAAWgG,aAAX,EAA0BQ,KAA1B,CAAgC,SAAhC,CAAJ,EAAgD;AAC9CH,mBAAW,KAAKP,MAAL,CAAY/F,SAAZ,EAAuBiG,aAAvB,EAAsChG,WAAWgG,aAAX,CAAtC,CAAX;AACAT,qBAAaA,WAAWe,OAAX,CAAmB,aAAnB,EAAkC,KAAKG,UAAL,CAAgB1G,SAAhB,EAA2BiG,aAA3B,EAA0C,EAAEtG,QAAQ,KAAV,EAA1C,CAAlC,CAAb;AACA6F,sBAAc,aAAa,KAAKvE,eAAL,CAAqBgF,aAArB,CAAb,GAAmD,IAAnD,GAA0D,KAAKS,UAAL,CAAgB1G,SAAhB,EAA2BiG,aAA3B,CAA1D,GAAsG,GAApH;AACD;;AAED,UAAIT,WAAWiB,KAAX,CAAiB,WAAjB,CAAJ,EAAmC;AACjCjB,qBAAaA,WAAWe,OAAX,CAAmB,WAAnB,EAAgC,EAAhC,CAAb;;AAEAD,mBAAWzH,MAAMM,CAAN,CAAQmC,QAAR,CAAiBsE,MAAMW,OAAN,CAAc,cAAd,EAA8B,EAA9B,CAAjB,EAAoD;AAC7DvG,qBAAW,KAAKoB,UAAL,CAAgBpB,SAAhB,CADkD;AAE7D4F,iBAAO,oBAAoB,KAAK3E,eAAL,CAAqBgF,gBAAgB,aAArC,CAApB,GAA0E,WAA1E,GAAwF,KAAKhF,eAAL,CAAqBgF,aAArB,CAAxF,GAA8H;AAFxE,SAApD,CAAX;AAID;;AAED,UAAIT,WAAWiB,KAAX,CAAiB,YAAjB,CAAJ,EAAoC;AAClCjB,qBAAaA,WAAWe,OAAX,CAAmB,mBAAnB,EAAwC,EAAxC,CAAb;AACAD,mBAAWzH,MAAMM,CAAN,CAAQmC,QAAR,CAAiBsE,MAAMW,OAAN,CAAc,cAAd,EAA8B,EAA9B,CAAjB,EAAoD;AAC7DvG,qBAAW,KAAKoB,UAAL,CAAgBpB,SAAhB,CADkD;AAE7D4F,iBAAO,oBAAoB,KAAK3E,eAAL,CAAqBgF,gBAAgB,cAArC,CAApB,GAA2E,gBAA3E,GAA8F,KAAKhF,eAAL,CAAqBgF,aAArB,CAA9F,GAAoI,IAApI,GAA2IT;AAFrF,SAApD,CAAX;AAID,OAND,MAMO;AACLc,mBAAWzH,MAAMM,CAAN,CAAQmC,QAAR,CAAiBsE,KAAjB,EAAwB;AACjC5F,qBAAW,KAAKoB,UAAL,CAAgBpB,SAAhB,CADsB;AAEjC4F,iBAAO,KAAK3E,eAAL,CAAqBgF,aAArB,IAAsC,QAAtC,GAAiDT;AAFvB,SAAxB,CAAX;AAID;;AAEDa,UAAIrF,IAAJ,CAASsF,OAAT;AACD;;AAED,WAAOD,IAAIhF,IAAJ,CAAS,EAAT,CAAP;AACD,GA5ToB;AA8TrBsF,mBA9TqB,6BA8TH3G,SA9TG,EA8TQ4G,UA9TR,EA8ToB3G,UA9TpB,EA8TgC;;AAEnD,QAAM4G,aAAa,EAAnB;;AAEA,SAAK,IAAMZ,aAAX,IAA4BhG,UAA5B,EAAwC;AACtC4G,iBAAW7F,IAAX,CAAgBnC,MAAMM,CAAN,CAAQmC,QAAR,CAAiB,+BAAjB,EAAkD;AAChEwF,gBAAQ,KAAK7F,eAAL,CAAqB2F,UAArB,CADwD;AAEhEG,eAAO,KAAK9F,eAAL,CAAqBgF,aAArB;AAFyD,OAAlD,CAAhB;AAID;;AAED,4BAAsB,KAAK7E,UAAL,CAAgBpB,SAAhB,CAAtB,uBAAkE6G,WAAWxF,IAAX,CAAgB,IAAhB,CAAlE;AACD,GA1UoB;AA4UrB2F,IA5UqB,cA4UlBC,MA5UkB,EA4UVjH,SA5UU,EA4UCkH,IA5UD,EA4UOC,OA5UP,EA4UgBC,QA5UhB,EA4U0B;AAC7CH,aAASA,UAAU,UAAnB;AACAG,eAAWA,YAAY,SAAvB;AACAD,cAAUA,WAAW,WAAW,KAAK/F,UAAL,CAAgBpB,SAAhB,CAAhC;;AAEA,mDAA6CiH,MAA7C,mBAAiEE,OAAjE,yBAA4FD,IAA5F,8BAAyHE,QAAzH,gCAA4JH,MAA5J;AACD,GAlVoB;AAoVrBI,aApVqB,uBAoVTJ,MApVS,EAoVDjH,SApVC,EAoVUsH,IApVV,EAoVgBC,IApVhB,EAoVsBC,IApVtB,EAoV4BL,OApV5B,EAoVqCC,QApVrC,EAoV+C;AAClEI,WAAOA,QAAQ,kBAAf;;AAEA,QAAMN,OAAUI,IAAV,wBAAiCE,IAAjC,cAA8CD,IAA9C,MAAN;;AAEA,WAAO,KAAKP,EAAL,CAAQC,MAAR,EAAgBjH,SAAhB,EAA2BkH,IAA3B,EAAiCC,OAAjC,EAA0CC,QAA1C,CAAP;AACD,GA1VoB;AA4VrBK,aA5VqB,uBA4VTzH,SA5VS,EA4VE0H,YA5VF,EA4VgBC,YA5VhB,EA4V8BC,KA5V9B,EA4VqCC,aA5VrC,EA4VoDvI,OA5VpD,EA4V6D;AAChF,QAAMwI,SAAS,KAAKC,WAAL,CAAiB/H,SAAjB,EAA4B0H,YAA5B,EAA0CG,aAA1C,EAAyDvI,OAAzD,CAAf;AACA,QAAM0I,SAAS,KAAKC,WAAL,CAAiBjI,SAAjB,EAA4B2H,YAA5B,EAA0CC,KAA1C,EAAiDtI,OAAjD,EAA0DuI,aAA1D,CAAf;;AAEA;AACA,WAAO,KAAKR,WAAL,CACL,kBADK,EAELrH,SAFK,EAGL8H,SAAS,YAHJ,EAILE,SAAS,YAJJ,EAKL,kBALK,EAML,SANK,CAAP;AAQD,GAzWoB;AA2WrBE,aA3WqB,uBA2WTlI,SA3WS,EA2WE4H,KA3WF,EA2WStI,OA3WT,EA2WkB6I,KA3WlB,EA2WyB;AAAA;;AAC5C,QAAIvC,cAAJ;;AAEAtG,cAAUA,WAAW,EAArB;;AAEAU,gBAAY,KAAKoB,UAAL,CAAgBpB,SAAhB,CAAZ;;AAEA,QAAIV,QAAQ8I,QAAR,KAAqB,IAAzB,EAA+B;AAC7BxC,cAAQ,cAAc5F,SAAtB;;AAEA,UAAIV,QAAQ+I,eAAZ,EAA6B;AAC3BzC,iBAAS,mBAAT;AACD;;AAED,UAAItG,QAAQkD,OAAZ,EAAqB;AACnBoD,iBAAS,UAAT;AACD;;AAED,aAAOA,KAAP;AACD;;AAED,QAAI/G,MAAMM,CAAN,CAAQmJ,WAAR,CAAoBhJ,QAAQiJ,KAA5B,CAAJ,EAAwC;AACtCjJ,cAAQiJ,KAAR,GAAgB,CAAhB;AACD;;AAED,QAAMC,eAAe;AACnBrH,aAAOnB,SADY;AAEnB4H,aAAO,KAAKa,kBAAL,CAAwBb,KAAxB,EAA+B,IAA/B,EAAqCO,KAArC,EAA4C7I,OAA5C,CAFY;AAGnBiJ,aAAOjJ,QAAQiJ,KAAR,GAAgB,YAAY,KAAK9H,MAAL,CAAYnB,QAAQiJ,KAApB,CAA5B,GAAyD;AAH7C,KAArB;;AAMA,QAAIjJ,QAAQiJ,KAAZ,EAAmB;AACjB,UAAI,CAACJ,KAAL,EAAY;AACV,cAAM,IAAIvE,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,UAAM7B,MAAM5C,EAAEyC,GAAF,CAAMzC,EAAE+B,MAAF,CAASiH,MAAMO,WAAf,CAAN,EAAmC;AAAA,eAAM,OAAKzH,eAAL,CAAqB0H,GAAGC,KAAxB,CAAN;AAAA,OAAnC,EAAyEvH,IAAzE,CAA8E,GAA9E,CAAZ;;AAEAmH,mBAAaE,WAAb,GAA2BP,MAAMU,oBAAN,CAA2BxG,MAA3B,GAAoC,CAApC,GAAwC,MAAMN,GAAN,GAAY,GAApD,GAA0DA,GAArF;AACAyG,mBAAaM,oBAAb,GAAoC/G,GAApC;;AAEA6D,cAAQ,qIAAR;AACD,KAXD,MAWO;AACLA,cAAQ,sCAAR;AACD;;AAED,QAAI4C,aAAaZ,KAAjB,EAAwB;AACtBY,mBAAaZ,KAAb,GAAqB,YAAYY,aAAaZ,KAA9C;AACD;;AAED,WAAO/I,MAAMM,CAAN,CAAQmC,QAAR,CAAiBsE,KAAjB,EAAwB4C,YAAxB,CAAP;AACD,GA9ZoB;AAgarBO,kBAhaqB,4BAgaJ/I,SAhaI,EAgaO;AAC1B,QAAIgJ,aAAa,EAAjB;AACA,QAAIC,cAAc,EAAlB;AACA,QAAI,CAACpK,MAAMM,CAAN,CAAQqB,QAAR,CAAiBR,SAAjB,CAAL,EAAkC;AAChCgJ,mBAAa,kBAAb;AACAC,uEAA8DjJ,UAAUL,MAAxE;AACAK,kBAAYA,UAAUA,SAAtB;AACD;;AAED;AACA,WAAO,0GACL,8GADK,+EAEoEgJ,UAFpE,UAGL,iFAHK,6CAI+BhJ,SAJ/B,UAI4CiJ,WAJ5C,UAKL,mGALF;AAMD,GAhboB;AAkbrBC,sBAlbqB,gCAkbAlJ,SAlbA,EAkbW;AAC9B;AACA,WAAO,CACL,mDADK,EAEL,0CAFK,EAGL,sCAHK,EAIL,kCAJK,EAKL,gCALK,EAML,4BANK,EAOL,sCAPK,EAQL,kCARK,EASL,2CATK,EAUL,2CAVK,0BAWgBA,SAXhB,UAYLqB,IAZK,CAYA,GAZA,CAAP;AAaD,GAjcoB;AAmcrB8H,kBAncqB,4BAmcJnJ,SAncI,EAmcOoJ,qBAncP,EAmc8B;AACjD,QAAIC,YAAYD,qBAAhB;;AAEA,QAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,kBAAYxK,MAAMyK,UAAN,CAAiBtJ,YAAY,GAAZ,GAAkBoJ,sBAAsB/H,IAAtB,CAA2B,GAA3B,CAAnC,CAAZ;AACD;;AAED,qCAA+B,KAAKQ,gBAAL,CAAsBwH,SAAtB,CAA/B;AACD,GA3coB;AA6crBE,mBA7cqB,6BA6cHjK,OA7cG,EA6cM;AACzB,QAAIkK,WAAW,EAAf;AACA;AACA,QAAIlK,QAAQiJ,KAAR,IAAiB,IAArB,EAA2B;AACzBiB,kBAAY,YAAY,KAAK/I,MAAL,CAAYnB,QAAQiJ,KAApB,CAAxB;AACD;AACD,QAAIjJ,QAAQmK,MAAR,IAAkB,IAAtB,EAA4B;AAC1BD,kBAAY,aAAa,KAAK/I,MAAL,CAAYnB,QAAQmK,MAApB,CAAzB;AACD;AACD;;AAEA,WAAOD,QAAP;AACD,GAzdoB;AA2drBlE,gBA3dqB,0BA2dNpD,SA3dM,EA2dK;AAAA;;AACxB,QAAI,CAACrD,MAAMM,CAAN,CAAQuK,aAAR,CAAsBxH,SAAtB,CAAL,EAAuC;AACrCA,kBAAY;AACV2D,cAAM3D;AADI,OAAZ;AAGD;;AAED,QAAI2D,aAAJ;AACA,QAAI3D,UAAU2D,IAAV,YAA0B7G,UAAU8G,IAAxC,EAA8C;AAC5C,UAAI5D,UAAU2D,IAAV,CAAe3E,MAAf,IAAyB,CAACgB,UAAUhB,MAAxC,EAAgDgB,UAAUhB,MAAV,GAAmBgB,UAAU2D,IAAV,CAAe3E,MAAlC;;AAEhD,UAAIyI,MAAMC,OAAN,CAAc1H,UAAUhB,MAAxB,KAAmCgB,UAAUhB,MAAV,CAAiBmB,MAAjB,GAA0B,CAAjE,EAAoE;AAClEwD,eAAO,UAAUhH,MAAMM,CAAN,CAAQyC,GAAR,CAAYM,UAAUhB,MAAtB,EAA8B;AAAA,iBAAS,OAAKT,MAAL,CAAYsE,KAAZ,CAAT;AAAA,SAA9B,EAA2D1D,IAA3D,CAAgE,IAAhE,CAAV,GAAkF,GAAzF;AACD,OAFD,MAEO;AACL,cAAM,IAAIuC,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;AAED,QAAI,CAACiC,IAAL,EAAW;AACTA,aAAO3D,UAAU2D,IAAjB;AACD;;AAED,QAAIQ,MAAMR,OAAO,EAAjB;;AAEA,QAAI3D,UAAU2H,cAAV,CAAyB,WAAzB,KAAyC,CAAC3H,UAAU4H,SAAxD,EAAmE;AACjEzD,aAAO,WAAP;AACD;;AAED,QAAInE,UAAU6H,aAAd,EAA6B;AAC3B1D,aAAO,SAAP;AACD;;AAED,QAAIxH,MAAMmL,qBAAN,CAA4B9H,UAAU+H,YAAtC,CAAJ,EAAyD;AACvD5D,aAAO,cAAc,KAAK5F,MAAL,CAAYyB,UAAU+H,YAAtB,EAAoC/H,SAApC,CAArB;AACD;;AAED,QAAIA,UAAUgI,MAAV,KAAqB,IAAzB,EAA+B;AAC7B7D,aAAO,SAAP;AACD;;AAED,QAAInE,UAAUiI,UAAd,EAA0B;AACxB9D,aAAO,cAAP;AACD;;AAED,QAAInE,UAAUkI,UAAd,EAA0B;AACxB,UAAMC,kBAAkB,KAAKjJ,UAAL,CAAgBc,UAAUkI,UAAV,CAAqBjC,KAArC,CAAxB;AACA,UAAImC,sBAAJ;;AAEA,UAAIpI,UAAUkI,UAAV,CAAqBjI,GAAzB,EAA8B;AAC5BmI,wBAAgB,KAAKzI,gBAAL,CAAsBK,UAAUkI,UAAV,CAAqBjI,GAA3C,CAAhB;AACD,OAFD,MAEO;AACLmI,wBAAgB,KAAKrJ,eAAL,CAAqB,IAArB,CAAhB;AACD;;AAEDoF,8BAAsBgE,eAAtB,UAA0CC,aAA1C;;AAEA,UAAIpI,UAAUqI,QAAd,EAAwB;AACtBlE,eAAO,gBAAgBnE,UAAUqI,QAAV,CAAmBC,WAAnB,EAAvB;AACD;;AAED,UAAItI,UAAUuI,QAAd,EAAwB;AACtBpE,eAAO,gBAAgBnE,UAAUuI,QAAV,CAAmBD,WAAnB,EAAvB;AACD;;AAED,UAAItI,UAAUkI,UAAV,CAAqBM,UAAzB,EAAqC;AACnCrE,eAAO,MAAMnE,UAAUkI,UAAV,CAAqBM,UAArB,CAAgCC,QAAhC,CAAyC,IAAzC,CAAb;AACD;AACF;;AAED,WAAOtE,GAAP;AACD,GAjiBoB;AAmiBrBuE,uBAniBqB,iCAmiBCtL,OAniBD,EAmiBU;AAC7B,WAAOA,QAAQoL,UAAR,CAAmBC,QAAnB,CAA4B,IAA5B,CAAP;AACD,GAriBoB;AAuiBrBE,oBAviBqB,8BAuiBFpJ,OAviBE,EAuiBOoE,IAviBP,EAuiBa;AAAA;;AAChC,QAAIiF,iBAAiB,KAArB;;AAEA,QAAIrJ,OAAJ,EAAa;AACXqJ,uBAAiBrJ,QAAQG,GAAR,CAAY;AAAA,eAAU,OAAKX,eAAL,CAAqB6C,MAArB,CAAV;AAAA,OAAZ,EAAoDzC,IAApD,CAAyD,IAAzD,CAAjB;AACD;;AAED,WAAO,qBAAqByJ,cAArB,GAAsC,GAAtC,GAA4CjF,IAAnD;AACD,GA/iBoB;AAijBrBkF,kBAjjBqB,4BAijBJtJ,OAjjBI,EAijBK;AACxB,WAAO,KAAKoJ,kBAAL,CAAwBpJ,OAAxB,EAAiC,UAAjC,CAAP;AACD,GAnjBoB;AAqjBrBuJ,mBArjBqB,6BAqjBHvJ,OArjBG,EAqjBM;AACzB,WAAO,KAAKoJ,kBAAL,CAAwBpJ,OAAxB,EAAiC,WAAjC,CAAP;AACD,GAvjBoB;AAyjBrBwJ,iBAzjBqB,2BAyjBLhL,UAzjBK,EAyjBOX,OAzjBP,EAyjBgB;AACnC,QAAM4L,SAAS,EAAf;;AAEA,SAAK,IAAM/I,GAAX,IAAkBlC,UAAlB,EAA8B;AAC5B,UAAMiC,YAAYjC,WAAWkC,GAAX,CAAlB;AACA+I,aAAOhJ,UAAU0G,KAAV,IAAmBzG,GAA1B,IAAiC,KAAKmD,cAAL,CAAoBpD,SAApB,EAA+B5C,OAA/B,CAAjC;AACD;;AAED,WAAO4L,MAAP;AACD,GAlkBoB;AAokBrBC,wBApkBqB,kCAokBE5G,OApkBF,EAokBW;AAC9B,QAAM5C,SAAS,EAAf;;AAEA,SAAK,IAAMyJ,IAAX,IAAmB7G,QAAQtE,UAA3B,EAAuC;AACrC,UAAMuF,aAAajB,QAAQtE,UAAR,CAAmBmL,IAAnB,CAAnB;;AAEA,UAAI5F,cAAcA,WAAWuE,aAA7B,EAA4C;AAC1CpI,eAAOX,IAAP,CAAYoK,IAAZ;AACD;AACF;;AAED,WAAOzJ,MAAP;AACD,GAhlBoB;AAklBrB0J,eAllBqB,yBAklBPrL,SAllBO,EAklBIsL,WAllBJ,EAklBiBC,SAllBjB,EAklB4BC,UAllB5B,EAklBwCC,YAllBxC,EAklBsDC,cAllBtD,EAklBsEC,YAllBtE,EAklBoF;;AAEvG,QAAMC,mBAAmB,KAAKC,sBAAL,CAA4BN,SAA5B,CAAzB;AACA,QAAMO,YAAY,KAAKC,sBAAL,CAA4BP,UAA5B,CAAlB;AACA,QAAMQ,kBAAkB,KAAKC,aAAL,CAAmBN,YAAnB,CAAxB;AACA,QAAMO,YAAY,KAAKC,uBAAL,CAA6BT,cAA7B,CAAlB;;AAEA,WAAO,YAAU,KAAKU,4BAAL,CAAkCb,SAAlC,CAAV,gBAAiED,WAAjE,kBACEM,gBADF,SACsBE,SADtB,sBAEK9L,SAFL,mBAGEgM,eAHF,qCAIoBP,YAJpB,SAIoCS,SAJpC,QAAP;AAKD,GA9lBoB;AAgmBrBG,aAhmBqB,uBAgmBTrM,SAhmBS,EAgmBEsL,WAhmBF,EAgmBe;AAClC,6BAAuBA,WAAvB,YAAyCtL,SAAzC;AACD,GAlmBoB;AAomBrBsM,eApmBqB,yBAomBPtM,SApmBO,EAomBIuM,cApmBJ,EAomBoBC,cApmBpB,EAomBoC;AACvD,8BAAwBD,cAAxB,YAA6CvM,SAA7C,mBAAoEwM,cAApE;AACD,GAtmBoB;AAwmBrBC,gBAxmBqB,0BAwmBNhB,YAxmBM,EAwmBQiB,MAxmBR,EAwmBgBC,UAxmBhB,EAwmB4BvF,QAxmB5B,EAwmBsCF,IAxmBtC,EAwmB4C5H,OAxmB5C,EAwmBqD;AACxE,QAAI,CAACmM,YAAD,IAAiB,CAACkB,UAAlB,IAAgC,CAACvF,QAAjC,IAA6C,CAACF,IAAlD,EAAwD,MAAM,IAAItD,KAAJ,CAAU,mGAAV,CAAN;;AAExD,QAAMsI,YAAY,KAAKC,uBAAL,CAA6BO,MAA7B,CAAlB;AACA,QAAME,eAAe1F,KAAKX,OAAL,CAAa,IAAb,EAAmB,MAAnB,CAArB;AACA,QAAMyF,kBAAkB,KAAKC,aAAL,CAAmB3M,OAAnB,CAAxB;;AAEA,WAAO,qBAAmBmM,YAAnB,SAAmCS,SAAnC,yBACQS,UADR,qBAEH,SAFG,WAGEC,YAHF,WAIH,QAJG,2BAKiBxF,QALjB,UAK6B4E,eAL7B,OAAP;AAMD,GArnBoB;AAunBrBa,cAvnBqB,wBAunBRpB,YAvnBQ,EAunBMiB,MAvnBN,EAunBc;AACjC,QAAI,CAACjB,YAAL,EAAmB,MAAM,IAAI7H,KAAJ,CAAU,uBAAV,CAAN;AACnB;AACA,QAAMsI,YAAY,KAAKC,uBAAL,CAA6BO,MAA7B,CAAlB;AACA,8BAAwBjB,YAAxB,SAAwCS,SAAxC;AACD,GA5nBoB;AA8nBrBY,gBA9nBqB,0BA8nBNC,eA9nBM,EA8nBWL,MA9nBX,EA8nBmBM,eA9nBnB,EA8nBoC;AACvD,QAAMd,YAAY,KAAKC,uBAAL,CAA6BO,MAA7B,CAAlB;AACA,+BAAyBK,eAAzB,SAA4Cb,SAA5C,oBAAoEc,eAApE;AACD,GAjoBoB;AAmoBrBC,uBAnoBqB,iCAmoBCC,MAnoBD,EAmoBS;AAC5B,QAAIC,MAAMD,OAAOE,QAAP,GAAkB,KAAlB,GAA0BF,OAAOG,IAAjC,GAAwC,GAAxC,GAA8CH,OAAOI,QAArD,GAAgE,GAAhE,GAAsEJ,OAAOK,IAAvF;AACA,QAAIL,OAAOM,IAAX,EAAiB;AACfL,aAAO,MAAMD,OAAOM,IAApB;AACD;AACDL,WAAO,MAAMD,OAAOO,QAApB;AACA,QAAIP,OAAOQ,GAAX,EAAgB;AACdP,aAAO,UAAUD,OAAOQ,GAAxB;AACD;AACD,WAAOP,GAAP;AACD,GA7oBoB;AA+oBrBQ,kBA/oBqB,4BA+oBJC,GA/oBI,EA+oBC;AACpB,WAAO,KAAK3M,eAAL,CAAqBpC,MAAMgP,WAAN,CAAkB,KAAKpN,MAAL,CAAYmN,GAAZ,CAAlB,EAAoC,GAApC,CAArB,CAAP;AACD,GAjpBoB;AAmpBrBzB,yBAnpBqB,mCAmpBGO,MAnpBH,EAmpBW;AAC9B,QAAI7N,MAAMM,CAAN,CAAQmJ,WAAR,CAAoBoE,MAApB,KAA+B,CAAC7N,MAAMM,CAAN,CAAQyK,OAAR,CAAgB8C,MAAhB,CAApC,EAA6D;AAC3D,YAAM,IAAI9I,KAAJ,CAAU,sGAAV,CAAN;AACD;;AAED,QAAMsI,YAAY,EAAlB;AACArN,UAAMM,CAAN,CAAQqC,IAAR,CAAakL,MAAb,EAAqB,oBAAY;AAC/B,UAAMoB,WAAW,EAAjB;AACA,UAAIjP,MAAMM,CAAN,CAAQ4O,GAAR,CAAYC,QAAZ,EAAsB,MAAtB,CAAJ,EAAmC;AACjC,YAAInP,MAAMM,CAAN,CAAQ4O,GAAR,CAAYC,QAAZ,EAAsB,WAAtB,CAAJ,EAAwC;AAAEF,mBAAS9M,IAAT,CAAcgN,SAASC,SAAvB;AAAoC;AAC9E,YAAIpP,MAAMM,CAAN,CAAQ4O,GAAR,CAAYC,QAAZ,EAAsB,MAAtB,CAAJ,EAAmC;AAAEF,mBAAS9M,IAAT,CAAcgN,SAAS5C,IAAvB;AAA+B;AACpE0C,iBAAS9M,IAAT,CAAcgN,SAASnI,IAAvB;AACD,OAJD,MAIO;AACL,cAAM,IAAIjC,KAAJ,CAAU,4DAAV,CAAN;AACD;;AAED,UAAMsK,SAASJ,SAASzM,IAAT,CAAc,GAAd,CAAf;AACA,UAAI6M,MAAJ,EAAYhC,UAAUlL,IAAV,CAAekN,MAAf;AAEb,KAbD;;AAeA,WAAOhC,UAAU7K,IAAV,CAAe,IAAf,CAAP;AACD,GAzqBoB;AA2qBrB4K,eA3qBqB,yBA2qBP3M,OA3qBO,EA2qBE;AACrB,WAAOT,MAAMM,CAAN,CAAQmJ,WAAR,CAAoBhJ,OAApB,KAAgCT,MAAMM,CAAN,CAAQgP,OAAR,CAAgB7O,OAAhB,CAAhC,GACL,EADK,GACA,SAASA,QAAQ+B,IAAR,CAAa,MAAb,CADhB;AAED,GA9qBoB;AAgrBrBwK,wBAhrBqB,kCAgrBEuC,cAhrBF,EAgrBkB;AACrC,QAAMC,gBAAgB;AACpB,eAAS,OADW;AAEpB,gBAAU,QAFU;AAGpB,oBAAc,YAHM;AAIpB,0BAAoB;AAJA,KAAtB;;AAOA,QAAI,CAACxP,MAAMM,CAAN,CAAQ4O,GAAR,CAAYM,aAAZ,EAA2BD,cAA3B,CAAL,EAAiD;AAC/C,YAAM,IAAIxK,KAAJ,CAAU,sCAAsCwK,cAAhD,CAAN;AACD;;AAED,WAAOC,cAAcD,cAAd,CAAP;AACD,GA7rBoB;AA+rBrBhC,8BA/rBqB,wCA+rBQgC,cA/rBR,EA+rBwB;AAC3C,WAAOA,mBAAmB,kBAAnB,GAAwC,aAAxC,GAAwD,EAA/D;AACD,GAjsBoB;AAmsBrBrC,wBAnsBqB,kCAmsBEP,UAnsBF,EAmsBc;AACjC,QAAI3M,MAAMM,CAAN,CAAQgP,OAAR,CAAgB3C,UAAhB,CAAJ,EAAiC;AAC/B,YAAM,IAAI5H,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,WAAO/E,MAAMM,CAAN,CAAQyC,GAAR,CAAY4J,UAAZ,EAAwB,UAAC8C,SAAD,EAAYC,OAAZ,EAAwB;AACrD,UAAMC,YAAY;AAChB,kBAAU,QADM;AAEhB,kBAAU,QAFM;AAGhB,kBAAU,QAHM;AAIhB,oBAAY;AAJI,OAAlB;;AAOA,UAAI,CAAC3P,MAAMM,CAAN,CAAQ4O,GAAR,CAAYS,SAAZ,EAAuBD,OAAvB,CAAL,EAAsC;AACpC,cAAM,IAAI3K,KAAJ,CAAU,oDAAoD2K,OAA9D,CAAN;AACD;;AAED,UAAIzC,YAAY0C,UAAUD,OAAV,CAAhB;AACA,UAAIzC,cAAc,QAAlB,EAA4B;AAC1B,YAAIjN,MAAMM,CAAN,CAAQyK,OAAR,CAAgB0E,SAAhB,KAA8BA,UAAUjM,MAAV,GAAmB,CAArD,EAAwD;AACtDyJ,uBAAa,SAASwC,UAAUjN,IAAV,CAAe,IAAf,CAAtB;AACD;AACF;;AAED,aAAOyK,SAAP;AACD,KApBM,EAoBJzK,IApBI,CAoBC,MApBD,CAAP;AAqBD,GA7tBoB;AA+tBrBqF,YA/tBqB,sBA+tBV1G,SA/tBU,EA+tBCU,IA/tBD,EA+tBOpB,OA/tBP,EA+tBgB;AACnCA,cAAUA,WAAW,EAArB;AACA,QAAMmP,eAAe,KAAK9I,mBAAL,CAAyB3F,SAAzB,EAAoCV,OAApC,CAArB;AACA,QAAIoP,WAAW,WAAWD,aAAazO,SAAxB,GAAoC,GAApC,GAA0CU,IAA1C,GAAiD,GAAhE;;AAEA;AACA,QAAIpB,QAAQK,MAAR,KAAmB,KAAnB,IAA4B8O,aAAa9O,MAA7C,EAAqD;AACnD+O,iBAAW,KAAKzN,eAAL,CAAqBwN,aAAa9O,MAAlC,IAA4C8O,aAAaE,SAAzD,GAAqED,QAAhF;AACD;;AAED,WAAOA,QAAP;AAED,GA3uBoB;AA6uBrBE,aA7uBqB,uBA6uBT5O,SA7uBS,EA6uBE6O,QA7uBF,EA6uBYvP,OA7uBZ,EA6uBqB;AACxC,QAAIoP,WAAW,EAAf;AACA,QAAMD,eAAe,KAAK9I,mBAAL,CAAyB3F,SAAzB,EAAoCV,OAApC,CAArB;;AAEA,QAAImP,aAAazO,SAAb,IAA0B6O,QAA9B,EAAwC;AACtCH,iBAAW,oBAAoB,KAAKhI,UAAL,CAAgB+H,aAAazO,SAA7B,EAAwC6O,QAAxC,EAAkD,EAAElP,QAAQ,KAAV,EAAlD,EAAqE4G,OAArE,CAA6E,IAA7E,EAAmF,GAAnF,CAA/B;AACD;;AAED,WAAO,yGACL,wCADK,GAEL,2DAFK,6BAGiBkI,aAAa9O,MAH9B,UAGwC+O,QAHxC,iBAAP;AAID,GAzvBoB;AA2vBrB3I,QA3vBqB,kBA2vBd/F,SA3vBc,EA2vBHU,IA3vBG,EA2vBGI,QA3vBH,EA2vBaxB,OA3vBb,EA2vBsB;AACzC,QAAMoP,WAAW,KAAKhI,UAAL,CAAgB1G,SAAhB,EAA2BU,IAA3B,EAAiCpB,OAAjC,CAAjB;AACA,QAAI4B,eAAJ;;AAEA,QAAIJ,SAASI,MAAb,EAAqB;AACnBA,eAAS,WAAWJ,SAASI,MAAT,CAAgBG,IAAhB,CAAqB,MAArB,CAAX,GAA0C,IAAnD;AACD,KAFD,MAEO;AACLH,eAASJ,SAAS6J,QAAT,GAAoBlE,KAApB,CAA0B,aAA1B,EAAyC,CAAzC,CAAT;AACD;;AAED,QAAIJ,MAAM,iBAAiBqI,QAAjB,GAA4B,MAA5B,GAAqCxN,MAArC,GAA8C,GAAxD;AACA,QAAI,CAAC,CAAC5B,OAAF,IAAaA,QAAQwP,KAAR,KAAkB,IAAnC,EAAyC;AACvCzI,YAAM,KAAK0I,UAAL,CAAgB/O,SAAhB,EAA2BU,IAA3B,IAAmC2F,GAAzC;AACD;AACD,WAAOA,GAAP;AACD,GA1wBoB;AA4wBrB2I,WA5wBqB,qBA4wBXhP,SA5wBW,EA4wBAU,IA5wBA,EA4wBMqE,KA5wBN,EA4wBazF,OA5wBb,EA4wBsB;AACzC,QAAMoP,WAAW,KAAKhI,UAAL,CAAgB1G,SAAhB,EAA2BU,IAA3B,CAAjB;AACA,QAAI2F,MAAM,gBAAgBqI,QAAhB,GAA2B,aAArC;;AAEA,QAAIxP,OAAOoD,GAAP,CAAW,KAAK2M,SAAL,CAAe3P,OAAf,CAAuBa,eAAlC,EAAmD,OAAnD,CAAJ,EAAiE;AAC/DkG,aAAO,gBAAP;AACD;AACDA,WAAO,KAAK5F,MAAL,CAAYsE,KAAZ,CAAP;;AAEA,QAAIzF,QAAQwH,MAAZ,EAAoB;AAClBT,aAAO,aAAa,KAAK5F,MAAL,CAAYnB,QAAQwH,MAApB,CAApB;AACD,KAFD,MAEO,IAAIxH,QAAQyH,KAAZ,EAAmB;AACxBV,aAAO,YAAY,KAAK5F,MAAL,CAAYnB,QAAQyH,KAApB,CAAnB;AACD;;AAED,WAAOV,GAAP;AACD,GA5xBoB;AA8xBrB0I,YA9xBqB,sBA8xBV/O,SA9xBU,EA8xBCU,IA9xBD,EA8xBOgO,QA9xBP,EA8xBiB;AACpCA,eAAWA,YAAY,KAAKhI,UAAL,CAAgB1G,SAAhB,EAA2BU,IAA3B,CAAvB;AACA,WAAO,yBAAyBgO,QAAzB,GAAoC,IAA3C;AACD,GAjyBoB;AAmyBrBQ,WAnyBqB,qBAmyBXC,IAnyBW,EAmyBL;AACdA,WAAOA,KAAK5I,OAAL,CAAa,IAAb,EAAmB,EAAnB,EAAuBA,OAAvB,CAA+B,IAA/B,EAAqC,EAArC,CAAP;AACA,QAAI6I,UAAUD,KAAK1I,KAAL,CAAW,+CAAX,CAAd;;AAEA,QAAI2I,QAAQ/M,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAO,EAAP;AACD;;AAED+M,cAAUA,QAAQxN,GAAR,CAAY;AAAA,aAAKyN,EAAE9I,OAAF,CAAU,KAAV,EAAiB,EAAjB,EAAqBA,OAArB,CAA6B,IAA7B,EAAmC,EAAnC,EAAuCA,OAAvC,CAA+C,SAA/C,EAA0D,EAA1D,CAAL;AAAA,KAAZ,CAAV;;AAEA,WAAO6I,QAAQE,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAP;AACD,GA9yBoB;AAgzBrBC,QAhzBqB,kBAgzBd5O,CAhzBc,EAgzBX;AACR,WAAOA,IAAI,EAAJ,GAAS,MAAMA,EAAEgK,QAAF,EAAf,GAA8BhK,EAAEgK,QAAF,EAArC;AACD,GAlzBoB;AAozBrB5J,iBApzBqB,2BAozBLf,SApzBK,EAozBMU,IApzBN,EAozBYI,QApzBZ,EAozBsB;AACzC,QAAIjC,MAAMM,CAAN,CAAQiD,QAAR,CAAiBtB,QAAjB,EAA2B,aAA3B,CAAJ,EAA+C;AAC7CA,iBAAWA,SAASyF,OAAT,CAAiB,aAAjB,EAAgC,EAAhC,CAAX;AACD;;AAED,QAAI1H,MAAMM,CAAN,CAAQiD,QAAR,CAAiBtB,QAAjB,EAA2B,QAA3B,CAAJ,EAA0C;AACxC,UAAIjC,MAAMM,CAAN,CAAQiD,QAAR,CAAiBtB,QAAjB,EAA2B,QAA3B,CAAJ,EAA0C;AACxCA,mBAAWA,SAASyF,OAAT,CAAiB,QAAjB,EAA2B,WAA3B,CAAX;AACAzF,mBAAWA,SAASyF,OAAT,CAAiB,QAAjB,EAA2B,EAA3B,CAAX;AACD,OAHD,MAGO;AACLzF,mBAAWA,SAASyF,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAX;AACD;AACDzF,iBAAWA,SAASyF,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAX;AACD;;AAED,QAAIzF,SAAS2F,KAAT,CAAe,SAAf,CAAJ,EAA+B;AAC7B3F,iBAAWA,SAASyF,OAAT,CAAiB,aAAjB,EAAgC,KAAKG,UAAL,CAAgB1G,SAAhB,EAA2BU,IAA3B,CAAhC,CAAX;AACD;;AAED,WAAOI,QAAP;AACD,GAx0BoB;AA00BrBG,iBA10BqB,2BA00BLuO,UA10BK,EA00BOV,KA10BP,EA00Bc;AACjC,QAAIU,eAAe,GAAnB,EAAwB,OAAOA,UAAP;AACxB,QAAI,CAACV,KAAD,IAAU,KAAKxP,OAAf,IAA0B,KAAKA,OAAL,CAAauC,gBAAb,KAAkC,KAA5D,IAAqE2N,WAAW5O,OAAX,CAAmB,GAAnB,MAA4B,CAAC,CAAlG,IAAuG4O,WAAW5O,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CAAzI,EAA4I;AAAE;AAC5I;AACA;AACA;AACA;AACA;AACA,aAAO/B,MAAMgP,WAAN,CAAkB2B,UAAlB,EAA8B,GAA9B,CAAP;AACD,KAPD,MAOO;AACL,aAAO3Q,MAAM4Q,QAAN,CAAe5Q,MAAMgP,WAAN,CAAkB2B,UAAlB,EAA8B,GAA9B,CAAf,EAAmD,GAAnD,CAAP;AACD;AACF,GAt1BoB;;;AAw1BrB;;;;;;;AAOAE,qBA/1BqB,+BA+1BD1P,SA/1BC,EA+1BU;AAC7B,WAAO,oMAC4DA,SAD5D,mDAAP;AAED,GAl2BoB;;;AAo2BrB;;;;;;;;AAQA2P,qBA52BqB,+BA42BD3P,SA52BC,EA42BU4P,UA52BV,EA42BsB;AACzC,WAAO,iBAAiB,KAAKxO,UAAL,CAAgBpB,SAAhB,CAAjB,GAA8C,mBAA9C,GAAoE,KAAKiB,eAAL,CAAqB2O,UAArB,CAApE,GAAuG,GAA9G;AACD,GA92BoB;AAg3BrBC,oBAh3BqB,8BAg3BF9K,KAh3BE,EAg3BKzF,OAh3BL,EAg3Bc;AACjC,QAAIA,QAAQwQ,MAAZ,EAAoB;AAClB;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,CAAC/K,KAAD,IAAU7F,OAAOoD,GAAP,CAAW,KAAK2M,SAAL,CAAe3P,OAAf,CAAuBa,eAAlC,EAAmD,OAAnD,CAAd,EAA2E;AACzE;AACD;;AAED,WAAOlB,uBAAuB4Q,kBAAvB,CAA0C1K,IAA1C,CAA+C,IAA/C,EAAqDJ,KAArD,EAA4DzF,OAA5D,CAAP;AACD;AAj4BoB,CAAvB;;AAo4BAyQ,OAAOC,OAAP,GAAiB5Q,cAAjB","file":"query-generator.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\nconst QueryGenerator = {\n  __proto__: AbstractQueryGenerator,\n  options: {},\n  dialect: 'postgres',\n\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  },\n\n  createSchema(schema) {\n    return `CREATE SCHEMA ${schema};`;\n  },\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  },\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  },\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  },\n\n  createTableQuery(tableName, attributes, options) {\n\n    options = Utils._.extend({\n    }, options || {});\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = Utils._.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n\n    if (options.comment && Utils._.isString(options.comment)) {\n      comments += '; COMMENT ON TABLE <%= table %> IS ' + this.escape(options.comment);\n    }\n\n    for (const attr in attributes) {\n      const i = attributes[attr].indexOf('COMMENT');\n      if (i !== -1) {\n        // Move comment to a separate query\n        comments += '; ' + attributes[attr].substring(i);\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);\n    }\n\n    const values = {\n      table: this.quoteTable(tableName),\n      attributes: attrStr.join(', '),\n      comments: Utils._.template(comments)({ table: this.quoteTable(tableName) })\n    };\n\n    if (options.uniqueKeys) {\n      Utils._.each(options.uniqueKeys, columns => {\n        if (!columns.singleField) { // If it's a single field its handled in column def, not as an index\n          values.attributes += ', UNIQUE (' + columns.fields.map(f => this.quoteIdentifiers(f)).join(', ') + ')';\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (_.includes(attribute, 'PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      values.attributes += ', PRIMARY KEY (' + pks + ')';\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${values.table} (${values.attributes})${values.comments};`;\n  },\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  },\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  },\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) {\n      schema = 'public';\n    }\n    return 'SELECT pk.constraint_type as \"Constraint\", c.column_name as \"Field\", ' +\n              'c.column_default as \"Default\", c.is_nullable as \"Null\", ' +\n              'CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END as \"Type\", ' +\n              '(SELECT array_agg(e.enumlabel) ' +\n              'FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid ' +\n              'WHERE t.typname=c.udt_name) AS \"special\" ' +\n            'FROM information_schema.columns c ' +\n            'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n              'cu.column_name, tc.constraint_type ' +\n              'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n              'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n              'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n                'and tc.constraint_name=cu.constraint_name ' +\n                'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n            'ON pk.table_schema=c.table_schema ' +\n            'AND pk.table_name=c.table_name ' +\n            'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  },\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {String}  stmt  The statement to validate\n   * @returns {Boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  checkValidJsonStatement(stmt) {\n    if (!_.isString(stmt)) {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error('Invalid json statement: ' + stmt);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  },\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {String}               column  The JSON column\n   * @param   {String|Array<String>} [path]  The path to extract (optional)\n   * @returns {String}                       The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path) {\n    const paths = _.toPath(path);\n    const pathStr = this.escape(`{${paths.join(',')}}`);\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    return `(${quotedColumn}#>>${pathStr})`;\n  },\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = _.map(this.parseConditionObject(smth.conditions), condition =>\n          `${this.jsonPathExtractionQuery(_.first(condition.path), _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      } else if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this.checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return AbstractQueryGenerator.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  },\n\n  addColumnQuery(table, key, dataType) {\n\n    const dbDataType = this.attributeToSQL(dataType, { context: 'addColumn' });\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType.type && dataType.type instanceof DataTypes.ENUM || dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    }\n\n    return query;\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;';\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.indexOf('NOT NULL') > 0) {\n        attrSql += Utils._.template(query)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET NOT NULL'\n        });\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += Utils._.template(query)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP NOT NULL'\n        });\n      }\n\n      if (definition.indexOf('DEFAULT') > 0) {\n        attrSql += Utils._.template(query)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET DEFAULT ' + definition.match(/DEFAULT ([^;]+)/)[1]\n        });\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += Utils._.template(query)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP DEFAULT'\n        });\n      }\n\n      if (attributes[attributeName].match(/^ENUM\\(/)) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ' USING (' + this.quoteIdentifier(attributeName) + '::' + this.pgEnumName(tableName, attributeName) + ')';\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n\n        attrSql += Utils._.template(query.replace('ALTER COLUMN', ''))({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_unique_idx') + ' UNIQUE (' + this.quoteIdentifier(attributeName) + ')'\n        });\n      }\n\n      if (definition.match(/REFERENCES/)) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += Utils._.template(query.replace('ALTER COLUMN', ''))({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_foreign_idx') + ' FOREIGN KEY (' + this.quoteIdentifier(attributeName) + ') ' + definition\n        });\n      } else {\n        attrSql += Utils._.template(query)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' TYPE ' + definition\n        });\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(Utils._.template('<%= before %> TO <%= after %>')({\n        before: this.quoteIdentifier(attrBefore),\n        after: this.quoteIdentifier(attributeName)\n      }));\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  },\n\n  fn(fnName, tableName, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns || 'SETOF ' + this.quoteTable(tableName);\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}() RETURNS ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  },\n\n  exceptionFn(fnName, tableName, main, then, when, returns, language) {\n    when = when || 'unique_violation';\n\n    const body = `${main} EXCEPTION WHEN ${when} THEN ${then};`;\n\n    return this.fn(fnName, tableName, body, returns, language);\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, rawAttributes, options) {\n    const insert = this.insertQuery(tableName, insertValues, rawAttributes, options);\n    const update = this.updateQuery(tableName, updateValues, where, options, rawAttributes);\n\n    // The numbers here are selected to match the number of affected rows returned by MySQL\n    return this.exceptionFn(\n      'sequelize_upsert',\n      tableName,\n      insert + ' RETURN 1;',\n      update + '; RETURN 2',\n      'unique_violation',\n      'integer'\n    );\n  },\n\n  deleteQuery(tableName, where, options, model) {\n    let query;\n\n    options = options || {};\n\n    tableName = this.quoteTable(tableName);\n\n    if (options.truncate === true) {\n      query = 'TRUNCATE ' + tableName;\n\n      if (options.restartIdentity) {\n        query += ' RESTART IDENTITY';\n      }\n\n      if (options.cascade) {\n        query += ' CASCADE';\n      }\n\n      return query;\n    }\n\n    if (Utils._.isUndefined(options.limit)) {\n      options.limit = 1;\n    }\n\n    const replacements = {\n      table: tableName,\n      where: this.getWhereConditions(where, null, model, options),\n      limit: options.limit ? ' LIMIT ' + this.escape(options.limit) : ''\n    };\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = _.map(_.values(model.primaryKeys), pk => this.quoteIdentifier(pk.field)).join(',');\n\n      replacements.primaryKeys = model.primaryKeyAttributes.length > 1 ? '(' + pks + ')' : pks;\n      replacements.primaryKeysSelection = pks;\n\n      query = 'DELETE FROM <%= table %> WHERE <%= primaryKeys %> IN (SELECT <%= primaryKeysSelection %> FROM <%= table %><%= where %><%= limit %>)';\n    } else {\n      query = 'DELETE FROM <%= table %><%= where %>';\n    }\n\n    if (replacements.where) {\n      replacements.where = ' WHERE ' + replacements.where;\n    }\n\n    return Utils._.template(query)(replacements);\n  },\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (!Utils._.isString(tableName)) {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  },\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifiers(indexName)}`;\n  },\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  },\n\n  attributeToSQL(attribute) {\n    if (!Utils._.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      if (Array.isArray(attribute.values) && attribute.values.length > 0) {\n        type = 'ENUM(' + Utils._.map(attribute.values, value => this.escape(value)).join(', ') + ')';\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type + '';\n\n    if (attribute.hasOwnProperty('allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      sql += ' SERIAL';\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ' DEFAULT ' + this.escape(attribute.defaultValue, attribute);\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      const referencesTable = this.quoteTable(attribute.references.model);\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      if (attribute.onUpdate) {\n        sql += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ' ' + attribute.references.deferrable.toString(this);\n      }\n    }\n\n    return sql;\n  },\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  },\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return 'SET CONSTRAINTS ' + columnFragment + ' ' + type;\n  },\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  },\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  },\n\n  findAutoIncrementField(factory) {\n    const fields = [];\n\n    for (const name in factory.attributes) {\n      const definition = factory.attributes[name];\n\n      if (definition && definition.autoIncrement) {\n        fields.push(name);\n      }\n    }\n\n    return fields;\n  },\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this.expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${triggerName}\\n`\n      + `\\t${decodedEventType} ${eventSpec}\\n`\n      + `\\tON ${tableName}\\n`\n      + `\\t${expandedOptions}\\n`\n      + `\\tEXECUTE PROCEDURE ${functionName}(${paramList});`;\n  },\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${triggerName} ON ${tableName} RESTRICT;`;\n  },\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${oldTriggerName} ON ${tableName} RENAME TO ${newTriggerName};`;\n  },\n\n  createFunction(functionName, params, returnType, language, body, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this.expandFunctionParamList(params);\n    const indentedBody = body.replace('\\n', '\\n\\t');\n    const expandedOptions = this.expandOptions(options);\n\n    return `CREATE FUNCTION ${functionName}(${paramList})\\n`\n      + `RETURNS ${returnType} AS $func$\\n`\n      + 'BEGIN\\n'\n      + `\\t${indentedBody}\\n`\n      + 'END;\\n'\n      + `$func$ language '${language}'${expandedOptions};`;\n  },\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this.expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  },\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this.expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  },\n\n  databaseConnectionUri(config) {\n    let uri = config.protocol + '://' + config.user + ':' + config.password + '@' + config.host;\n    if (config.port) {\n      uri += ':' + config.port;\n    }\n    uri += '/' + config.database;\n    if (config.ssl) {\n      uri += '?ssl=' + config.ssl;\n    }\n    return uri;\n  },\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  },\n\n  expandFunctionParamList(params) {\n    if (Utils._.isUndefined(params) || !Utils._.isArray(params)) {\n      throw new Error('expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    Utils._.each(params, curParam => {\n      const paramDef = [];\n      if (Utils._.has(curParam, 'type')) {\n        if (Utils._.has(curParam, 'direction')) { paramDef.push(curParam.direction); }\n        if (Utils._.has(curParam, 'name')) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  },\n\n  expandOptions(options) {\n    return Utils._.isUndefined(options) || Utils._.isEmpty(options) ?\n      '' : '\\n\\t' + options.join('\\n\\t');\n  },\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!Utils._.has(EVENT_DECODER, eventSpecifier)) {\n      throw new Error('Invalid trigger event specified: ' + eventSpecifier);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  },\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  },\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (Utils._.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return Utils._.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!Utils._.has(EVENT_MAP, fireKey)) {\n        throw new Error('parseTriggerEventSpec: undefined trigger event ' + fireKey);\n      }\n\n      let eventSpec = EVENT_MAP[fireKey];\n      if (eventSpec === 'UPDATE') {\n        if (Utils._.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ' OF ' + fireValue.join(', ');\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  },\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = '\"enum_' + tableDetails.tableName + '_' + attr + '\"';\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n\n  },\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ' AND t.typname=' + this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\");\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  },\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = \"ENUM('\" + dataType.values.join(\"', '\") + \"')\";\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = 'CREATE TYPE ' + enumName + ' AS ' + values + ';';\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  },\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = 'ALTER TYPE ' + enumName + ' ADD VALUE ';\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ' BEFORE ' + this.escape(options.before);\n    } else if (options.after) {\n      sql += ' AFTER ' + this.escape(options.after);\n    }\n\n    return sql;\n  },\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return 'DROP TYPE IF EXISTS ' + enumName + '; ';\n  },\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/, ''));\n\n    return matches.slice(0, -1);\n  },\n\n  padInt(i) {\n    return i < 10 ? '0' + i.toString() : i.toString();\n  },\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (Utils._.includes(dataType, 'PRIMARY KEY')) {\n      dataType = dataType.replace(/PRIMARY KEY/, '');\n    }\n\n    if (Utils._.includes(dataType, 'SERIAL')) {\n      if (Utils._.includes(dataType, 'BIGINT')) {\n        dataType = dataType.replace(/SERIAL/, 'BIGSERIAL');\n        dataType = dataType.replace(/BIGINT/, '');\n      } else {\n        dataType = dataType.replace(/INTEGER/, '');\n      }\n      dataType = dataType.replace(/NOT NULL/, '');\n    }\n\n    if (dataType.match(/^ENUM\\(/)) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  },\n\n  quoteIdentifier(identifier, force) {\n    if (identifier === '*') return identifier;\n    if (!force && this.options && this.options.quoteIdentifiers === false && identifier.indexOf('.') === -1 && identifier.indexOf('->') === -1) { // default is `true`\n      // In Postgres, if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.removeTicks(identifier, '\"');\n    } else {\n      return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n    }\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  },\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} foreignKey The name of the foreign key constraint.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return 'ALTER TABLE ' + this.quoteTable(tableName) + ' DROP CONSTRAINT ' + this.quoteIdentifier(foreignKey) + ';';\n  },\n\n  setAutocommitQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    // POSTGRES does not support setting AUTOCOMMIT = OFF as of 9.4.0\n    // Additionally it does not support AUTOCOMMIT at all starting at v9.5\n    // The assumption is that it won't be returning in future versions either\n    // If you are on a Pg version that is not semver compliant e.g. '9.5.0beta2', which fails due to the 'beta' qualification, then you need to pass\n    // the database version as \"9.5.0\" explicitly through the options param passed when creating the Sequelize instance under the key \"databaseVersion\"\n    // otherwise Pg version \"9.4.0\" is assumed by default as per Sequelize 3.14.2.\n    // For Pg versions that are semver compliant, this is auto-detected upon the first connection.\n    if (!value || semver.gte(this.sequelize.options.databaseVersion, '9.4.0')) {\n      return;\n    }\n\n    return AbstractQueryGenerator.setAutocommitQuery.call(this, value, options);\n  }\n};\n\nmodule.exports = QueryGenerator;\n"]}