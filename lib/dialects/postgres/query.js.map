{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/postgres/query.js"],"names":["Utils","require","debug","getLogger","debugContext","AbstractQuery","QueryTypes","Promise","sequelizeErrors","_","Query","client","sequelize","options","instance","model","extend","logging","console","log","plain","raw","checkLoggingOption","sql","parameters","isEmpty","searchPath","queryInterface","QueryGenerator","setSearchPath","query","length","rows","receivedError","benchmark","queryBegin","Date","now","uuid","resolve","reject","on","push","row","err","code","_invalid","formatError","result","spread","results","isTableNameQuery","indexOf","isRelNameQuery","map","name","relname","tableName","split","values","sequelize_caught_exception","undefined","detail","isShowIndexesQuery","attributes","exec","definition","columns","zipObject","column_indexes","fromArray","column_names","field","attribute","fields","indkey","indKey","index","collate","match","order","filter","n","isForeignKeysQuery","defParts","condef","id","constraint_name","table","from","to","i","test","toLowerCase","isSelectQuery","quoteIdentifiers","attrsMap","reduce","m","v","k","mapKeys","value","key","targetAttr","handleSelectQuery","DESCRIBE","type","_result","Field","Type","toUpperCase","allowNull","Null","defaultValue","Default","special","primaryKey","Constraint","replace","isVersionQuery","server_version","isShowOrDescribeQuery","BULKUPDATE","returning","parseInt","rowCount","BULKDELETE","isUpsertQuery","sequelize_upsert","isInsertQuery","isUpdateQuery","dataValues","hasOwnProperty","record","attr","find","rawAttributes","fieldName","isRawQuery","errors","message","sqlState","errMessage","messagePrimary","errDetail","messageDetail","ForeignKeyConstraintError","parent","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","isEqual","constraint","Object","keys","msg","UniqueConstraintError","ExclusionConstraintError","DatabaseError","dialect","bindParam","Array","isArray","formatBindParameters","skipValueReplace","seen","replacementFunc","module","exports","default"],"mappings":"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","file":"query.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:pg');\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst Promise = require('../../promise');\nconst sequelizeErrors = require('../../errors.js');\nconst _ = require('lodash');\n\nclass Query extends AbstractQuery {\n  constructor(client, sequelize, options) {\n    super();\n    this.client = client;\n    this.sequelize = sequelize;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  /**\n   * rewrite query with parameters\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = [];\n    if (Array.isArray(values)) {\n      bindParam = values;\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(values[key]);\n          seen[key] = '$'+i;\n          return '$'+i;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n\n    if (!Utils._.isEmpty(this.options.searchPath)){\n      this.sql = this.sequelize.queryInterface.QueryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    const query = parameters && parameters.length ? this.client.query(this.sql, parameters) : this.client.query(this.sql);\n    const rows = [];\n    let receivedError = false;\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.client.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.client.uuid || 'default'}) : ${this.sql}`);\n\n    return new Promise((resolve, reject) => {\n      query.on('row', row => {\n        rows.push(row);\n      });\n\n      query.on('error', err => {\n\n        // set the client so that it will be reaped if the connection resets while executing\n        if (err.code === 'ECONNRESET') {\n          this.client._invalid = true;\n        }\n\n        receivedError = true;\n        err.sql = sql;\n        reject(this.formatError(err));\n      });\n\n      query.on('end', result => {\n\n        debug(`executed(${this.client.uuid || 'default'}) : ${this.sql}`);\n\n        if (benchmark) {\n          this.sequelize.log('Executed (' + (this.client.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);\n        }\n\n        if (receivedError) {\n          return;\n        }\n\n        resolve([rows, sql, result]);\n      });\n    }).spread((rows, sql, result) => {\n      const results = rows;\n      const isTableNameQuery = sql.indexOf('SELECT table_name FROM information_schema.tables') === 0;\n      const isRelNameQuery = sql.indexOf('SELECT relname FROM pg_class WHERE oid IN') === 0;\n\n      if (isRelNameQuery) {\n        return rows.map(row => ({\n          name: row.relname,\n          tableName: row.relname.split('_')[0]\n        }));\n      } else if (isTableNameQuery) {\n        return rows.map(row => _.values(row));\n      }\n\n      if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n        if (rows[0].sequelize_caught_exception !== null) {\n          throw this.formatError({\n            code: '23505',\n            detail: rows[0].sequelize_caught_exception\n          });\n        } else {\n          rows = rows.map(row => {\n            delete row.sequelize_caught_exception;\n            return row;\n          });\n        }\n      }\n\n      if (this.isShowIndexesQuery()) {\n        for (const result of results) {\n          const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(result.definition)[1].split(',');\n\n          // Map column index in table to column name\n          const columns = _.zipObject(\n            result.column_indexes,\n            this.sequelize.queryInterface.QueryGenerator.fromArray(result.column_names)\n          );\n          delete result.column_indexes;\n          delete result.column_names;\n\n          let field;\n          let attribute;\n\n          // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n          result.fields = result.indkey.split(' ').map((indKey, index) => {\n            field = columns[indKey];\n            // for functional indices indKey = 0\n            if (!field) {\n              return null;\n            }\n            attribute = attributes[index];\n            return {\n              attribute: field,\n              collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n              order: attribute.indexOf('DESC') !== -1 ? 'DESC' : attribute.indexOf('ASC') !== -1 ? 'ASC': undefined,\n              length: undefined\n            };\n          }).filter(n => n !== null);\n          delete result.columns;\n        }\n        return results;\n      } else if (this.isForeignKeysQuery()) {\n        result = [];\n        for (const row of rows) {\n          let defParts;\n          if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n            row.id = row.constraint_name;\n            row.table = defParts[2];\n            row.from = defParts[1];\n            row.to = defParts[3];\n            let i;\n            for (i=5;i<=8;i+=3) {\n              if (/(UPDATE|DELETE)/.test(defParts[i])) {\n                row['on_'+defParts[i].toLowerCase()] = defParts[i+1];\n              }\n            }\n          }\n          result.push(row);\n        }\n        return result;\n      } else if (this.isSelectQuery()) {\n        // Postgres will treat tables as case-insensitive, so fix the case\n        // of the returned values to match attributes\n        if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n          const attrsMap = _.reduce(this.model.attributes, (m, v, k) => {\n            m[k.toLowerCase()] = k;\n            return m;\n          }, {});\n          rows = _.map(rows, row=> {\n            return _.mapKeys(row, (value, key)=> {\n              const targetAttr = attrsMap[key];\n              if (typeof targetAttr === 'string' && targetAttr !== key) {\n                return targetAttr;\n              } else {\n                return key;\n              }\n            });\n          });\n        }\n        return this.handleSelectQuery(rows);\n      } else if (QueryTypes.DESCRIBE === this.options.type) {\n        result = {};\n\n        for (const _result of rows) {\n          result[_result.Field] = {\n            type: _result.Type.toUpperCase(),\n            allowNull: _result.Null === 'YES',\n            defaultValue: _result.Default,\n            special: _result.special ? this.sequelize.queryInterface.QueryGenerator.fromArray(_result.special) : [],\n            primaryKey: _result.Constraint === 'PRIMARY KEY'\n          };\n\n          if (result[_result.Field].type === 'BOOLEAN') {\n            result[_result.Field].defaultValue = { 'false': false, 'true': true }[result[_result.Field].defaultValue];\n\n            if (result[_result.Field].defaultValue === undefined) {\n              result[_result.Field].defaultValue = null;\n            }\n          }\n\n          if (typeof result[_result.Field].defaultValue === 'string') {\n            result[_result.Field].defaultValue = result[_result.Field].defaultValue.replace(/'/g, '');\n\n            if (result[_result.Field].defaultValue.indexOf('::') > -1) {\n              const split = result[_result.Field].defaultValue.split('::');\n              if (split[1].toLowerCase() !== 'regclass)') {\n                result[_result.Field].defaultValue = split[0];\n              }\n            }\n          }\n        }\n\n        return result;\n      } else if (this.isVersionQuery()) {\n        return results[0].server_version;\n      } else if (this.isShowOrDescribeQuery()) {\n        return results;\n      } else if (QueryTypes.BULKUPDATE === this.options.type) {\n        if (!this.options.returning) {\n          return parseInt(result.rowCount, 10);\n        }\n\n        return this.handleSelectQuery(rows);\n      } else if (QueryTypes.BULKDELETE === this.options.type) {\n        return parseInt(result.rowCount, 10);\n      } else if (this.isUpsertQuery()) {\n        return rows[0].sequelize_upsert;\n      } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n        if (this.instance && this.instance.dataValues) {\n          for (const key in rows[0]) {\n            if (rows[0].hasOwnProperty(key)) {\n              const record = rows[0][key];\n\n              const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n              this.instance.dataValues[attr && attr.fieldName || key] = record;\n            }\n          }\n        }\n\n        return [\n          this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n          result.rowCount\n        ];\n      } else if (this.isRawQuery()) {\n        return [rows, result];\n      } else {\n        return results;\n      }\n    });\n  }\n\n  formatError(err) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \\\"(.+?)\\\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \\\"(.+?)\\\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({message: errMessage, fields: null, index, table, parent: err});\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', field, value));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({message, errors, parent: err, fields});\n        } else {\n          return new sequelizeErrors.UniqueConstraintError({\n            message: errMessage,\n            parent: err\n          });\n        }\n\n        break;\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err\n        });\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]}