{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mssql/query-generator.js"],"names":["Utils","require","DataTypes","AbstractQueryGenerator","randomBytes","semver","throwMethodUndefined","methodName","Error","QueryGenerator","__proto__","options","dialect","createSchema","schema","wrapSingleQuote","quoteIdentifier","join","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","query","primaryKeys","foreignKeys","attrStr","self","attr","hasOwnProperty","dataType","match","_","includes","push","replace","values","table","quoteTable","pkString","map","pk","uniqueKeys","each","columns","indexName","isString","fields","length","fkey","template","trim","describeTableQuery","sql","renameTableQuery","before","after","showTablesQuery","dropTableQuery","addColumnQuery","key","field","attribute","definition","attributeToSQL","context","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","fkName","attrName","finalQuery","renameColumnQuery","attrBefore","newName","Object","keys","bulkInsertQuery","attrValueHashes","emptyQuery","tuples","allAttributes","allQueries","needIdentityInsertWrapper","outputFragment","returning","forEach","attrValueHash","firstAttr","autoIncrement","forOwn","value","indexOf","escape","commands","offset","batch","Math","floor","max","replacements","slice","min","output","generatedQuery","updateQuery","where","limit","updateArgs","upsertQuery","insertValues","updateValues","rawAttributes","targetTableAlias","sourceTableAlias","primaryKeysAttrs","identityAttrs","uniqueAttrs","tableNameQuoted","primaryKey","unique","updateKeys","insertKeys","insertKeysQuoted","insertValuesEscaped","sourceTableQuery","joinCondition","clauses","$or","filter","valid","clause","getJoinSnippet","array","updateSnippet","insertSnippet","deleteQuery","truncate","getWhereConditions","isUndefined","showIndexesQuery","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","underscore","quoteIdentifiers","isPlainObject","type","references","Model","model","sequelize","log","onDelete","onUpdate","ENUM","toSql","toString","allowNull","defaultValueSchemable","defaultValue","_binary","toUpperCase","attributesToSQL","result","existingConstraints","findAutoIncrementField","factory","name","createTrigger","dropTrigger","renameTrigger","createFunction","dropFunction","renameFunction","identifier","getForeignKeysQuery","getForeignKeyQuery","getPrimaryKeyConstraintQuery","dropForeignKeyQuery","foreignKey","getDefaultConstraintQuery","column","dropConstraintQuery","constraintName","constraint","setAutocommitQuery","setIsolationLevelQuery","generateTransactionId","startTransactionQuery","transaction","parent","commitTransactionQuery","rollbackTransactionQuery","selectFromTableFragment","tables","mainTableAs","topFragment","mainFragment","databaseVersion","lt","isSubQuery","hasIncludeWhere","hasIncludeRequired","hasMultiAssociation","orders","mainQueryOrder","order","getQueryOrders","primaryKeyField","tmpTable","whereFragment","fragment","addLimitAndOffset","include","subQueryOrder","booleanValue","addTicks","removeTicks","module","exports"],"mappings":"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","file":"query-generator.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils'),\n  DataTypes = require('../../data-types'),\n  AbstractQueryGenerator = require('../abstract/query-generator'),\n  randomBytes = require('crypto').randomBytes,\n  semver = require('semver');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error('The method \"' + methodName + '\" is not defined! Please add it to your sql dialect.');\n};\n\nconst QueryGenerator = {\n  __proto__: AbstractQueryGenerator,\n  options: {},\n  dialect: 'mssql',\n\n  createSchema(schema) {\n    return [\n      'IF NOT EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', wrapSingleQuote(schema), ')',\n      'BEGIN',\n      \"EXEC sp_executesql N'CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      'END;'\n    ].join(' ');\n  },\n\n  showSchemasQuery() {\n    return [\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\n      'WHERE \"s\".\"name\" NOT IN (',\n      \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\",\n      ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"\n    ].join(' ');\n  },\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return [\n      'DECLARE @ms_ver NVARCHAR(20);',\n      \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\",\n      \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"\n    ].join(' ');\n  },\n\n  createTableQuery(tableName, attributes, options) {\n    const query = \"IF OBJECT_ID('<%= table %>', 'U') IS NULL CREATE TABLE <%= table %> (<%= attributes %>)\",\n      primaryKeys = [],\n      foreignKeys = {},\n      attrStr = [],\n      self = this;\n\n    for (const attr in attributes) {\n      if (attributes.hasOwnProperty(attr)) {\n        const dataType = attributes[attr];\n        let match;\n\n        if (Utils._.includes(dataType, 'PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (Utils._.includes(dataType, 'REFERENCES')) {\n             // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1].replace(/PRIMARY KEY/, ''));\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType.replace(/PRIMARY KEY/, ''));\n          }\n        } else if (Utils._.includes(dataType, 'REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1]);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);\n        }\n      }\n    }\n\n    const values = {\n        table: this.quoteTable(tableName),\n        attributes: attrStr.join(', ')\n      },\n      pkString = primaryKeys.map(pk => { return this.quoteIdentifier(pk); }).join(', ');\n\n    if (options.uniqueKeys) {\n      Utils._.each(options.uniqueKeys, (columns, indexName) => {\n        if (!Utils._.isString(indexName)) {\n          indexName = 'uniq_' + tableName + '_' + columns.fields.join('_');\n        }\n        values.attributes += ', CONSTRAINT ' + self.quoteIdentifier(indexName) + ' UNIQUE (' + Utils._.map(columns.fields, self.quoteIdentifier).join(', ') + ')';\n      });\n    }\n\n    if (pkString.length > 0) {\n      values.attributes += ', PRIMARY KEY (' + pkString + ')';\n    }\n\n    for (const fkey in foreignKeys) {\n      if (foreignKeys.hasOwnProperty(fkey)) {\n        values.attributes += ', FOREIGN KEY (' + this.quoteIdentifier(fkey) + ') ' + foreignKeys[fkey];\n      }\n    }\n\n    return Utils._.template(query)(values).trim() + ';';\n  },\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT',\n      \"c.COLUMN_NAME AS 'Name',\",\n      \"c.DATA_TYPE AS 'Type',\",\n      \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\",\n      \"c.IS_NULLABLE as 'IsNull',\",\n      \"COLUMN_DEFAULT AS 'Default',\",\n      \"pk.CONSTRAINT_TYPE AS 'Constraint'\",\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',\n      'cu.column_name, tc.constraint_type ',\n      'FROM information_schema.TABLE_CONSTRAINTS tc ',\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ',\n      'and tc.constraint_name=cu.constraint_name ',\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ',\n      'ON pk.table_schema=c.table_schema ',\n      'AND pk.table_name=c.table_name ',\n      'AND pk.column_name=c.column_name ',\n      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += 'AND t.TABLE_SCHEMA =' + wrapSingleQuote(schema);\n    }\n\n    return sql;\n  },\n\n  renameTableQuery(before, after) {\n    const query = 'EXEC sp_rename <%= before %>, <%= after %>;';\n    return Utils._.template(query)({\n      before: this.quoteTable(before),\n      after: this.quoteTable(after)\n    });\n  },\n\n  showTablesQuery() {\n    return 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES;';\n  },\n\n  dropTableQuery(tableName) {\n    const query = \"IF OBJECT_ID('<%= table %>', 'U') IS NOT NULL DROP TABLE <%= table %>\";\n    const values = {\n      table: this.quoteTable(tableName)\n    };\n\n    return Utils._.template(query)(values).trim() + ';';\n  },\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n\n    const query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;',\n      attribute = Utils._.template('<%= key %> <%= definition %>')({\n        key: this.quoteIdentifier(key),\n        definition: this.attributeToSQL(dataType, {\n          context: 'addColumn'\n        })\n      });\n\n    return Utils._.template(query)({\n      table: this.quoteTable(table),\n      attribute\n    });\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    const query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';\n    return Utils._.template(query)({\n      tableName: this.quoteTable(tableName),\n      attributeName: this.quoteIdentifier(attributeName)\n    });\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> <%= query %>;';\n    const attrString = [],\n      constraintString = [];\n\n    for (const attributeName in attributes) {\n      const definition = attributes[attributeName];\n      if (definition.match(/REFERENCES/)) {\n        constraintString.push(Utils._.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>')({\n          fkName: this.quoteIdentifier(attributeName + '_foreign_idx'),\n          attrName: this.quoteIdentifier(attributeName),\n          definition: definition.replace(/.+?(?=REFERENCES)/, '')\n        }));\n      } else {\n        attrString.push(Utils._.template('<%= attrName %> <%= definition %>')({\n          attrName: this.quoteIdentifier(attributeName),\n          definition\n        }));\n      }\n    }\n\n    let finalQuery = '';\n    if (attrString.length) {\n      finalQuery += 'ALTER COLUMN ' + attrString.join(', ');\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n    if (constraintString.length) {\n      finalQuery += 'ADD CONSTRAINT ' + constraintString.join(', ');\n    }\n\n    return Utils._.template(query)({\n      tableName: this.quoteTable(tableName),\n      query: finalQuery\n    });\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const query = \"EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';\",\n      newName = Object.keys(attributes)[0];\n\n    return Utils._.template(query)({\n      tableName: this.quoteTable(tableName),\n      before: attrBefore,\n      after: newName\n    });\n  },\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    options = options || {};\n    attributes = attributes || {};\n    const query = 'INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;',\n      emptyQuery = 'INSERT INTO <%= table %><%= output %> DEFAULT VALUES',\n      tuples = [],\n      allAttributes = [],\n      allQueries = [];\n\n    let needIdentityInsertWrapper = false,\n      outputFragment;\n\n    if (options.returning) {\n      outputFragment = ' OUTPUT INSERTED.*';\n    }\n\n    Utils._.forEach(attrValueHashes, attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      // normal case\n      Utils._.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (allAttributes.indexOf(key) === -1) {\n          if (value === null && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      Utils._.forEach(attrValueHashes, attrValueHash => {\n        tuples.push('(' +\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key])).join(',') +\n        ')');\n      });\n\n      allQueries.push(query);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const replacements = {\n        table: this.quoteTable(tableName),\n        attributes: allAttributes.map(attr =>\n                      this.quoteIdentifier(attr)).join(','),\n        tuples: tuples.slice(offset, Math.min(tuples.length, offset + batch)),\n        output: outputFragment\n      };\n\n      let generatedQuery = Utils._.template(allQueries.join(';'))(replacements);\n      if (needIdentityInsertWrapper) {\n        generatedQuery = [\n          'SET IDENTITY_INSERT', this.quoteTable(tableName), 'ON;',\n          generatedQuery,\n          'SET IDENTITY_INSERT', this.quoteTable(tableName), 'OFF;'\n        ].join(' ');\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(';');\n  },\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    let sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql = sql.replace('UPDATE', updateArgs);\n    }\n    return sql;\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, rawAttributes) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in rawAttributes) {\n      if (rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(rawAttributes[key].field || key);\n      }\n      if (rawAttributes[key].unique) {\n        uniqueAttrs.push(rawAttributes[key].field || key);\n      }\n      if (rawAttributes[key].autoIncrement) {\n        identityAttrs.push(rawAttributes[key].field || key);\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //IDENTITY_INSERT Condition\n    identityAttrs.forEach(key => {\n      if (updateValues[key] && updateValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    });\n\n    //Filter NULL Clauses\n    const clauses = where.$or.filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (!clause[key]) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.indexOf(keys[0]) !== -1) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const updateSnippet = updateKeys.filter(key => {\n      if (identityAttrs.indexOf(key) === -1) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n    .map(key => {\n      const value = this.escape(updateValues[key]);\n      key = this.quoteIdentifier(key);\n      return `${targetTableAlias}.${key} = ${value}`;\n    }).join(', ');\n\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  },\n\n  deleteQuery(tableName, where, options) {\n    options = options || {};\n\n    const table = this.quoteTable(tableName);\n    if (options.truncate === true) {\n      // Truncate does not allow LIMIT and WHERE\n      return 'TRUNCATE TABLE ' + table;\n    }\n\n    where = this.getWhereConditions(where);\n    let limit = '';\n    const query = 'DELETE<%= limit %> FROM <%= table %><%= where %>; ' +\n                'SELECT @@ROWCOUNT AS AFFECTEDROWS;';\n\n    if (Utils._.isUndefined(options.limit)) {\n      options.limit = 1;\n    }\n\n    if (options.limit) {\n      limit = ' TOP(' + this.escape(options.limit) + ')';\n    }\n\n    const replacements = {\n      limit,\n      table,\n      where\n    };\n\n    if (replacements.where) {\n      replacements.where = ' WHERE ' + replacements.where;\n    }\n\n    return Utils._.template(query)(replacements);\n  },\n\n  showIndexesQuery(tableName) {\n    const sql = \"EXEC sys.sp_helpindex @objname = N'<%= tableName %>';\";\n    return Utils._.template(sql)({\n      tableName: this.quoteTable(tableName)\n    });\n  },\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    const sql = 'DROP INDEX <%= indexName %> ON <%= tableName %>';\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    const values = {\n      tableName: this.quoteIdentifiers(tableName),\n      indexName: this.quoteIdentifiers(indexName)\n    };\n\n    return Utils._.template(sql)(values);\n  },\n\n  attributeToSQL(attribute) {\n    if (!Utils._.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // handle self referential constraints\n    if (attribute.references) {\n\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, '\n          + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ' CHECK (' + this.quoteIdentifier(attribute.field) + ' IN(' + Utils._.map(attribute.values, value => {\n        return this.escape(value);\n      }).join(', ') + '))';\n      return template;\n    } else {\n      template = attribute.type.toString();\n    }\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' DEFAULT ' + this.escape(attribute.defaultValue);\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ' REFERENCES ' + this.quoteTable(attribute.references.model);\n\n      if (attribute.references.key) {\n        template += ' (' + this.quoteIdentifier(attribute.references.key) + ')';\n      } else {\n        template += ' (' + this.quoteIdentifier('id') + ')';\n      }\n\n      if (attribute.onDelete) {\n        template += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      if (attribute.onUpdate) {\n        template += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();\n      }\n    }\n\n    return template;\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n\n        if (existingConstraints.indexOf(attribute.references.model.toString()) !== -1) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n\n          // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n          attribute.onUpdate = '';\n        }\n\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  },\n\n  findAutoIncrementField(factory) {\n    const fields = [];\n    for (const name in factory.attributes) {\n      if (factory.attributes.hasOwnProperty(name)) {\n        const definition = factory.attributes[name];\n\n        if (definition && definition.autoIncrement) {\n          fields.push(name);\n        }\n      }\n    }\n\n    return fields;\n  },\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  },\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  },\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  },\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  },\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  },\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  },\n\n  quoteIdentifier(identifier) {\n    if (identifier === '*') return identifier;\n    return '[' + identifier.replace(/[\\[\\]']+/g, '') + ']';\n  },\n\n  getForeignKeysQuery(table) {\n    const tableName = table.tableName || table;\n    let sql = [\n      'SELECT',\n      'constraint_name = C.CONSTRAINT_NAME',\n      'FROM',\n      'INFORMATION_SCHEMA.TABLE_CONSTRAINTS C',\n      \"WHERE C.CONSTRAINT_TYPE = 'FOREIGN KEY'\",\n      'AND C.TABLE_NAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (table.schema) {\n      sql += ' AND C.TABLE_SCHEMA =' + wrapSingleQuote(table.schema);\n    }\n\n    return sql;\n  },\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    let sql = [\n      'SELECT',\n      'constraint_name = TC.CONSTRAINT_NAME',\n      'FROM',\n      'INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC',\n      'JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CCU',\n      'ON TC.CONSTRAINT_NAME = CCU.CONSTRAINT_NAME',\n      \"WHERE TC.CONSTRAINT_TYPE = 'FOREIGN KEY'\",\n      'AND TC.TABLE_NAME =', wrapSingleQuote(tableName),\n      'AND CCU.COLUMN_NAME =', wrapSingleQuote(attributeName)\n    ].join(' ');\n\n    if (table.schema) {\n      sql += ' AND TC.TABLE_SCHEMA =' + wrapSingleQuote(table.schema);\n    }\n\n    return sql;\n  },\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return [\n      'SELECT K.TABLE_NAME AS tableName,',\n      'K.COLUMN_NAME AS columnName,',\n      'K.CONSTRAINT_NAME AS constraintName',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K',\n      'ON C.TABLE_NAME = K.TABLE_NAME',\n      'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG',\n      'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA',\n      'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME',\n      'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'',\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\n      `AND K.TABLE_NAME = ${tableName};`\n    ].join(' ');\n  },\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils._.template('ALTER TABLE <%= table %> DROP <%= key %>')({\n      table: this.quoteTable(tableName),\n      key: this.quoteIdentifier(foreignKey)\n    });\n  },\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const sql = 'SELECT name FROM SYS.DEFAULT_CONSTRAINTS ' +\n      \"WHERE PARENT_OBJECT_ID = OBJECT_ID('<%= table %>', 'U') \" +\n      \"AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('<%= column %>') \" +\n      \"AND object_id = OBJECT_ID('<%= table %>', 'U'));\";\n    return Utils._.template(sql)({\n      table: this.quoteTable(tableName),\n      column: attributeName\n    });\n  },\n\n  dropConstraintQuery(tableName, constraintName) {\n    const sql = 'ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;';\n    return Utils._.template(sql)({\n      table: this.quoteTable(tableName),\n      constraint: this.quoteIdentifier(constraintName)\n    });\n  },\n\n  setAutocommitQuery() {\n    return '';\n  },\n\n  setIsolationLevelQuery() {\n\n  },\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  },\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return 'SAVE TRANSACTION ' + this.quoteIdentifier(transaction.name) + ';';\n    }\n\n    return 'BEGIN TRANSACTION;';\n  },\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  },\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return 'ROLLBACK TRANSACTION ' + this.quoteIdentifier(transaction.name) + ';';\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  },\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    let topFragment = '';\n    let mainFragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;\n\n    // Handle SQL Server 2008 with TOP instead of LIMIT\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      if (options.limit) {\n        topFragment = 'TOP ' + options.limit + ' ';\n      }\n      if (options.offset) {\n        const offset = options.offset || 0,\n          isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n        let orders = { mainQueryOrder: [] };\n        if (options.order) {\n          orders = this.getQueryOrders(options, model, isSubQuery);\n        }\n\n        if (!orders.mainQueryOrder.length) {\n          orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n        }\n\n        const tmpTable = mainTableAs ? mainTableAs : 'OffsetTable';\n        const whereFragment = where ? ' WHERE ' + where : '';\n\n        /*\n         * For earlier versions of SQL server, we need to nest several queries\n         * in order to emulate the OFFSET behavior.\n         *\n         * 1. The outermost query selects all items from the inner query block.\n         *    This is due to a limitation in SQL server with the use of computed\n         *    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n         * 2. The next query handles the LIMIT and OFFSET behavior by getting\n         *    the TOP N rows of the query where the row number is > OFFSET\n         * 3. The innermost query is the actual set we want information from\n         */\n        const fragment = 'SELECT TOP 100 PERCENT ' + attributes.join(', ') + ' FROM ' +\n                        '(SELECT ' + topFragment + '*' +\n                          ' FROM (SELECT ROW_NUMBER() OVER (ORDER BY ' + orders.mainQueryOrder.join(', ') + ') as row_num, * ' +\n                            ' FROM ' + tables + ' AS ' + tmpTable + whereFragment + ')' +\n                          ' AS ' + tmpTable + ' WHERE row_num > ' + offset + ')' +\n                        ' AS ' + tmpTable;\n        return fragment;\n      } else {\n        mainFragment = 'SELECT ' + topFragment + attributes.join(', ') + ' FROM ' + tables;\n      }\n    }\n\n    if (mainTableAs) {\n      mainFragment += ' AS ' + mainTableAs;\n    }\n\n    return mainFragment;\n  },\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    let fragment = '';\n    const offset = options.offset || 0,\n      isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n\n    let orders = {};\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || options.include && !orders.subQueryOrder.length) {\n        fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n        fragment += this.quoteTable(model.name) + '.' + this.quoteIdentifier(model.primaryKeyField);\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ' OFFSET ' + this.escape(offset) + ' ROWS';\n      }\n\n      if (options.limit) {\n        fragment += ' FETCH NEXT ' + this.escape(options.limit) + ' ROWS ONLY';\n      }\n    }\n\n    return fragment;\n  },\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n};\n\n// private methods\nfunction wrapSingleQuote(identifier){\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = QueryGenerator;\n"]}