{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mssql/query.js"],"names":["Utils","require","debug","getLogger","debugContext","Promise","AbstractQuery","sequelizeErrors","parserStore","_","Query","connection","sequelize","options","instance","model","extend","logging","console","log","plain","raw","checkLoggingOption","sql","benchmark","queryBegin","Date","now","uuid","resolve","reject","startsWith","beginTransaction","err","formatError","formatResults","transaction","name","mapIsolationLevelStringToTedious","isolationLevel","lib","commitTransaction","rollbackTransaction","saveTransaction","results","request","Request","rowCount","on","row","columns","column","typeid","metadata","type","id","parse","get","value","colName","push","execSql","parameters","using","lock","_run","data","result","isInsertQuery","handleInsertQuery","record","Object","keys","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Default","replace","Name","Type","toUpperCase","allowNull","IsNull","defaultValue","primaryKey","Constraint","isShowIndexesQuery","handleShowIndexesQuery","isSelectQuery","handleSelectQuery","isUpsertQuery","$action","isCallQuery","isBulkUpdateQuery","length","isBulkDeleteQuery","AFFECTEDROWS","isVersionQuery","version","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","map","tableName","resultSet","TABLE_NAME","schema","TABLE_SCHEMA","slice","constraint","key","camelCase","match","message","fields","uniqueKey","uniqueKeys","msg","values","split","part","trim","zipObject","errors","forOwn","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","UnknownConstraintError","DatabaseError","toLowerCase","indexOf","reduce","acc","item","index_name","forEach","index_keys","columnName","attribute","undefined","order","collate","primary","unique","index_description","metaData","autoIncrementField","autoIncrementFieldAlias","rawAttributes","hasOwnProperty","getInsertIdField","module","exports","default"],"mappings":"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","file":"query.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:mssql');\nconst Promise = require('../../promise');\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors.js');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = Utils._.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n\n  _run(connection, sql) {\n    this.sql = sql;\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.connection.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n    return new Promise((resolve, reject) => {\n        // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        }, this.options.transaction.name, Utils.mapIsolationLevelStringToTedious(this.options.isolationLevel, connection.lib));\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        }, this.options.transaction.name);\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.saveTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        }, this.options.transaction.name);\n      } else {\n        const results = [];\n        const request = new connection.lib.Request(this.sql, (err, rowCount) => {\n\n          debug(`executed(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n          if (benchmark) {\n            this.sequelize.log('Executed (' + (this.connection.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);\n          }\n\n          if (err) {\n            err.sql = sql;\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults(results, rowCount));\n          }\n        });\n\n        request.on('row', columns => {\n          const row = {};\n          for (const column of columns) {\n            const typeid = column.metadata.type.id;\n            const parse = parserStore.get(typeid);\n            let value = column.value;\n\n            if (value !== null & !!parse) {\n              value = parse(value);\n            }\n            row[column.metadata.colName] = value;\n          }\n\n          results.push(row);\n        });\n\n        connection.execSql(request);\n      }\n    });\n  }\n\n  run(sql, parameters) {\n    return Promise.using(this.connection.lock(), connection => this._run(connection, sql, parameters));\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data, rowCount) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          // NOTE: super contrived. This just passes the newly added query-interface\n          //       test returning only the PK. There isn't a way in MSSQL to identify\n          //       that a given return value is the PK, and we have no schema information\n          //       because there was no calling Model.\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = this.handleShowTablesQuery(data);\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY'\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      //Use the same return value as that of MySQL & Postgres\n      if (data[0].$action === 'INSERT') {\n        result = 1;\n      } else {\n        result = 2;\n      }\n    } else if (this.isCallQuery()) {\n      result = data[0];\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()){\n      result = data[0] && data[0].AFFECTEDROWS;\n    } else if (this.isVersionQuery()) {\n      result = data[0].version;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // MSSQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, data];\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as its generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err) {\n    let match;\n    match = err.message.match(/Violation of UNIQUE KEY constraint '((.|\\s)*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[4]) {\n        const values = match[4].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = Utils._.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[4];\n        }\n      }\n\n      const errors = [];\n      Utils._.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', field, value\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({message, errors, parent: err, fields});\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n            err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n            err.message.match(/The INSERT statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n            err.message.match(/The MERGE statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n            err.message.match(/The UPDATE statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.UnknownConstraintError(match[1]);\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().indexOf(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\") === 0;\n    result = result || this.sql.toLowerCase().indexOf('select tablename = t.name, name = ind.name,') === 0;\n    result = result || this.sql.toLowerCase().indexOf('exec sys.sp_helpindex @objname') === 0;\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().indexOf('exec sys.sp_helpindex @objname') === 0;\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = _.reduce(data, (acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      Utils._.forEach(item.index_keys.split(','), column => {\n        let columnName = column.trim();\n        if (columnName.indexOf('(-)') !== -1) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.indexOf('(-)') !== -1 ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return Utils._.map(data, item => ({\n      primary: item.index_name.toLowerCase().indexOf('pk') === 0,\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().indexOf('unique') !== -1,\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementField = this.model.autoIncrementField;\n      let id = null;\n      let autoIncrementFieldAlias = null;\n\n      if (this.model.rawAttributes.hasOwnProperty(autoIncrementField) &&\n          this.model.rawAttributes[autoIncrementField].field !== undefined)\n        autoIncrementFieldAlias = this.model.rawAttributes[autoIncrementField].field ;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementField];\n      id = id || autoIncrementFieldAlias && results && results[0][autoIncrementFieldAlias];\n\n      this.instance[autoIncrementField] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]}