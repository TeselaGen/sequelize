{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mysql/connection-manager.js"],"names":["AbstractConnectionManager","require","SequelizeErrors","Utils","DataTypes","mysql","momentTz","debug","getLogger","debugContext","parserMap","Map","ConnectionManager","dialect","sequelize","config","port","dialectModulePath","lib","err","code","Error","refreshTypeParser","dataType","types","type","set","parse","clear","connectionConfig","host","user","username","flags","password","database","timezone","options","typeCast","_typecast","bind","bigNumberStrings","supportBigNumbers","dialectOptions","Object","keys","key","Promise","resolve","reject","connection","createConnection","errorHandler","removeListener","connectHandler","e","once","then","pool","handleDisconnects","on","destroy","tzOffset","test","tz","format","query","catch","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","_closing","end","_fatalError","_protocolError","field","next","has","get","_","extend","prototype","module","exports","default"],"mappings":"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","file":"connection-manager.js","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types').mysql;\nconst momentTz = require('moment-timezone');\nconst debug = Utils.getLogger().debugContext('connection:mysql');\nconst parserMap = new Map();\n\n/**\n * MySQL Connection Managger\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @extends AbstractConnectionManager\n * @return Class<ConnectionManager>\n * @private\n */\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 3306;\n    try {\n      if (sequelize.config.dialectModulePath) {\n        this.lib = require(sequelize.config.dialectModulePath);\n      } else {\n        this.lib = require('mysql2');\n      }\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        throw new Error('Please install mysql2 package manually');\n      }\n      throw err;\n    }\n\n    this.refreshTypeParser(DataTypes);\n  }\n\n  // Update parsing when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    for (const type of dataType.types.mysql) {\n      parserMap.set(type, dataType.parse);\n    }\n  }\n\n  _clearTypeParser() {\n    parserMap.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserMap.has(field.type)) {\n      return parserMap.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once conection is connected\n   *\n   * @return Promise<Connection>\n   * @private\n   */\n  connect(config) {\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: '-FOUND_ROWS',\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true\n    };\n\n    if (config.dialectOptions) {\n      for (const key of Object.keys(config.dialectOptions)) {\n        connectionConfig[key] = config.dialectOptions[key];\n      }\n    }\n\n    return new Utils.Promise((resolve, reject) => {\n      const connection = this.lib.createConnection(connectionConfig);\n\n      const errorHandler = e => {\n          // clean up connect event if there is error\n        connection.removeListener('connect', connectHandler);\n        reject(e);\n      };\n\n      const connectHandler = () => {\n          // clean up error event if connected\n        connection.removeListener('error', errorHandler);\n        resolve(connection);\n      };\n\n      connection.once('error', errorHandler);\n      connection.once('connect', connectHandler);\n    })\n      .then(connection => {\n\n        if (config.pool.handleDisconnects) {\n          // Connection to the MySQL server is usually\n          // lost due to either server restart, or a\n          // connection idle timeout (the wait_timeout\n          // server variable configures this)\n          //\n          // See [stackoverflow answer](http://stackoverflow.com/questions/20210522/nodejs-mysql-error-connection-lost-the-server-closed-the-connection)\n          connection.on('error', err => {\n            if (err.code === 'PROTOCOL_CONNECTION_LOST') {\n              // Remove it from read/write pool\n              this.pool.destroy(connection);\n            }\n            debug(`connection error ${err.code}`);\n          });\n        }\n\n        debug('connection acquired');\n        return connection;\n      })\n      .then(connection => {\n        return new Utils.Promise((resolve, reject) => {\n          // set timezone for this connection\n          // but named timezone are not directly supported in mysql, so get its offset first\n          let tzOffset = this.sequelize.options.timezone;\n          tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n\n          connection.query(`SET time_zone = '${tzOffset}'`, err => {\n            if (err) { reject(err); } else { resolve(connection); }\n          });\n        });\n      })\n      .catch(err => {\n        if (err.code) {\n          switch (err.code) {\n            case 'ECONNREFUSED':\n              throw new SequelizeErrors.ConnectionRefusedError(err);\n            case 'ER_ACCESS_DENIED_ERROR':\n              throw new SequelizeErrors.AccessDeniedError(err);\n            case 'ENOTFOUND':\n              throw new SequelizeErrors.HostNotFoundError(err);\n            case 'EHOSTUNREACH':\n              throw new SequelizeErrors.HostNotReachableError(err);\n            case 'EINVAL':\n              throw new SequelizeErrors.InvalidConnectionError(err);\n            default:\n              throw new SequelizeErrors.ConnectionError(err);\n          }\n        } else {\n          throw new SequelizeErrors.ConnectionError(err);\n        }\n      });\n  }\n\n  disconnect(connection) {\n\n    // Dont disconnect connections with CLOSED state\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return Utils.Promise.resolve();\n    }\n\n    return new Utils.Promise((resolve, reject) => {\n      connection.end(err => {\n        if (err) {\n          reject(new SequelizeErrors.ConnectionError(err));\n        } else {\n          debug('connection disconnected');\n          resolve();\n        }\n      });\n    });\n  }\n\n  validate(connection) {\n    return connection && connection._fatalError === null && connection._protocolError === null && !connection._closing;\n  }\n}\n\nUtils._.extend(ConnectionManager.prototype, AbstractConnectionManager.prototype);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]}