{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mysql/data-types.js"],"names":["wkx","require","_","moment","inherits","module","exports","BaseTypes","ABSTRACT","prototype","dialectTypes","DATE","types","mysql","STRING","CHAR","TEXT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","length","apply","arguments","parse","value","options","next","data","Buffer","isBuffer","precision","scale","toSql","definition","_unsigned","_zerofill","_length","_stringify","date","_applyTimezone","format","string","tz","zone","timezone","toDate","Date","SUPPORTED_GEOMETRY_TYPES","type","srid","isEmpty","sqlType","key","includes","Error","join","buffer","slice","Geometry","toGeoJSON","obj","Object","create","map","values","escape","forIn","DataType","extend","oldType"],"mappings":"AAAA;;AAEA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,IAAID,QAAQ,QAAR,CAAV;AACA,IAAME,SAASF,QAAQ,iBAAR,CAAf;AACA,IAAMG,WAAWH,QAAQ,sBAAR,CAAjB;;AAEAI,OAAOC,OAAP,GAAiB,qBAAa;AAC5BC,YAAUC,QAAV,CAAmBC,SAAnB,CAA6BC,YAA7B,GAA4C,yDAA5C;;AAEAH,YAAUI,IAAV,CAAeC,KAAf,CAAqBC,KAArB,GAA6B,CAAC,UAAD,CAA7B;AACAN,YAAUO,MAAV,CAAiBF,KAAjB,CAAuBC,KAAvB,GAA+B,CAAC,YAAD,CAA/B;AACAN,YAAUQ,IAAV,CAAeH,KAAf,CAAqBC,KAArB,GAA6B,CAAC,QAAD,CAA7B;AACAN,YAAUS,IAAV,CAAeJ,KAAf,CAAqBC,KAArB,GAA6B,CAAC,MAAD,CAA7B;AACAN,YAAUU,OAAV,CAAkBL,KAAlB,CAAwBC,KAAxB,GAAgC,CAAC,MAAD,CAAhC;AACAN,YAAUW,MAAV,CAAiBN,KAAjB,CAAuBC,KAAvB,GAA+B,CAAC,UAAD,CAA/B;AACAN,YAAUY,KAAV,CAAgBP,KAAhB,CAAsBC,KAAtB,GAA8B,CAAC,OAAD,CAA9B;AACAN,YAAUa,IAAV,CAAeR,KAAf,CAAqBC,KAArB,GAA6B,CAAC,MAAD,CAA7B;AACAN,YAAUc,QAAV,CAAmBT,KAAnB,CAAyBC,KAAzB,GAAiC,CAAC,MAAD,CAAjC;AACAN,YAAUe,OAAV,CAAkBV,KAAlB,CAAwBC,KAAxB,GAAgC,CAAC,MAAD,CAAhC;AACAN,YAAUgB,IAAV,CAAeX,KAAf,CAAqBC,KAArB,GAA6B,CAAC,UAAD,EAAa,MAAb,EAAqB,UAArB,CAA7B;AACAN,YAAUiB,OAAV,CAAkBZ,KAAlB,CAAwBC,KAAxB,GAAgC,CAAC,YAAD,CAAhC;AACAN,YAAUkB,IAAV,CAAeb,KAAf,CAAqBC,KAArB,GAA6B,KAA7B;AACAN,YAAUmB,IAAV,CAAed,KAAf,CAAqBC,KAArB,GAA6B,KAA7B;AACAN,YAAUoB,IAAV,CAAef,KAAf,CAAqBC,KAArB,GAA6B,CAAC,QAAD,CAA7B;AACAN,YAAUqB,MAAV,CAAiBhB,KAAjB,CAAuBC,KAAvB,GAA+B,CAAC,QAAD,CAA/B;AACAN,YAAUsB,QAAV,CAAmBjB,KAAnB,CAAyBC,KAAzB,GAAiC,CAAC,UAAD,CAAjC;;AAEA,WAASU,IAAT,CAAcO,MAAd,EAAsB;AACpB,QAAI,EAAE,gBAAgBP,IAAlB,CAAJ,EAA6B,OAAO,IAAIA,IAAJ,CAASO,MAAT,CAAP;AAC7BvB,cAAUgB,IAAV,CAAeQ,KAAf,CAAqB,IAArB,EAA2BC,SAA3B;AACD;AACD5B,WAASmB,IAAT,EAAehB,UAAUgB,IAAzB;;AAEAA,OAAKU,KAAL,GAAa,UAASC,KAAT,EAAgBC,OAAhB,EAAyBC,IAAzB,EAA+B;AAC1C,QAAMC,OAAOD,MAAb;;AAEA,QAAIE,OAAOC,QAAP,CAAgBF,IAAhB,KAAyBA,KAAKP,MAAL,KAAgB,CAA7C,EAAgD;AAC9C,aAAO,IAAP;AACD;;AAED,WAAOO,IAAP;AACD,GARD;;AAUA,WAASb,OAAT,CAAiBgB,SAAjB,EAA4BC,KAA5B,EAAmC;AACjC,QAAI,EAAE,gBAAgBjB,OAAlB,CAAJ,EAAgC,OAAO,IAAIA,OAAJ,CAAYgB,SAAZ,EAAuBC,KAAvB,CAAP;AAChClC,cAAUiB,OAAV,CAAkBO,KAAlB,CAAwB,IAAxB,EAA8BC,SAA9B;AACD;AACD5B,WAASoB,OAAT,EAAkBjB,UAAUiB,OAA5B;;AAEAA,UAAQf,SAAR,CAAkBiC,KAAlB,GAA0B,SAASA,KAAT,GAAiB;AACzC,QAAIC,aAAapC,UAAUiB,OAAV,CAAkBf,SAAlB,CAA4BiC,KAA5B,CAAkCX,KAAlC,CAAwC,IAAxC,CAAjB;;AAEA,QAAI,KAAKa,SAAT,EAAoB;AAClBD,oBAAc,WAAd;AACD;;AAED,QAAI,KAAKE,SAAT,EAAoB;AAClBF,oBAAc,WAAd;AACD;;AAED,WAAOA,UAAP;AACD,GAZD;;AAcA,WAAShC,IAAT,CAAcmB,MAAd,EAAsB;AACpB,QAAI,EAAE,gBAAgBnB,IAAlB,CAAJ,EAA6B,OAAO,IAAIA,IAAJ,CAASmB,MAAT,CAAP;AAC7BvB,cAAUI,IAAV,CAAeoB,KAAf,CAAqB,IAArB,EAA2BC,SAA3B;AACD;AACD5B,WAASO,IAAT,EAAeJ,UAAUI,IAAzB;;AAEAA,OAAKF,SAAL,CAAeiC,KAAf,GAAuB,SAASA,KAAT,GAAiB;AACtC,WAAO,cAAc,KAAKI,OAAL,GAAe,MAAM,KAAKA,OAAX,GAAqB,GAApC,GAA0C,EAAxD,CAAP;AACD,GAFD;;AAIAnC,OAAKF,SAAL,CAAesC,UAAf,GAA4B,SAASA,UAAT,CAAoBC,IAApB,EAA0Bb,OAA1B,EAAmC;AAC7Da,WAAOzC,UAAUI,IAAV,CAAeF,SAAf,CAAyBwC,cAAzB,CAAwCD,IAAxC,EAA8Cb,OAA9C,CAAP;AACA;AACA,QAAI,KAAKW,OAAT,EAAkB;AAChB,aAAOE,KAAKE,MAAL,CAAY,yBAAZ,CAAP;AACD;;AAED,WAAOF,KAAKE,MAAL,CAAY,qBAAZ,CAAP;AACD,GARD;;AAUAvC,OAAKsB,KAAL,GAAa,SAASA,KAAT,CAAeC,KAAf,EAAsBC,OAAtB,EAA+B;AAC1CD,YAAQA,MAAMiB,MAAN,EAAR;;AAEA,QAAIjB,UAAU,IAAd,EAAoB;AAClB,aAAOA,KAAP;AACD;;AAED,QAAI/B,OAAOiD,EAAP,CAAUC,IAAV,CAAelB,QAAQmB,QAAvB,CAAJ,EAAsC;AACpCpB,cAAQ/B,OAAOiD,EAAP,CAAUlB,KAAV,EAAiBC,QAAQmB,QAAzB,EAAmCC,MAAnC,EAAR;AACD,KAFD,MAEO;AACLrB,cAAQ,IAAIsB,IAAJ,CAAStB,QAAQ,GAAR,GAAcC,QAAQmB,QAA/B,CAAR;AACD;;AAED,WAAOpB,KAAP;AACD,GAdD;;AAgBA,WAASb,QAAT,GAAoB;AAClB,QAAI,EAAE,gBAAgBA,QAAlB,CAAJ,EAAiC,OAAO,IAAIA,QAAJ,EAAP;AACjCd,cAAUc,QAAV,CAAmBU,KAAnB,CAAyB,IAAzB,EAA+BC,SAA/B;AACD;AACD5B,WAASiB,QAAT,EAAmBd,UAAUc,QAA7B;;AAEAA,WAASY,KAAT,GAAiB,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACrC,WAAOA,MAAMiB,MAAN,EAAP;AACD,GAFD;;AAIA,WAAS1B,IAAT,GAAgB;AACd,QAAI,EAAE,gBAAgBA,IAAlB,CAAJ,EAA6B,OAAO,IAAIA,IAAJ,EAAP;AAC7BlB,cAAUkB,IAAV,CAAeM,KAAf,CAAqB,IAArB,EAA2BC,SAA3B;AACD;AACD5B,WAASqB,IAAT,EAAelB,UAAUkB,IAAzB;;AAEAA,OAAKhB,SAAL,CAAeiC,KAAf,GAAuB,SAASA,KAAT,GAAiB;AACtC,WAAO,iBAAP;AACD,GAFD;;AAKA,MAAMe,2BAA2B,CAAC,OAAD,EAAU,YAAV,EAAwB,SAAxB,CAAjC;;AAEA,WAAS5B,QAAT,CAAkB6B,IAAlB,EAAwBC,IAAxB,EAA8B;AAC5B,QAAI,EAAE,gBAAgB9B,QAAlB,CAAJ,EAAiC,OAAO,IAAIA,QAAJ,CAAa6B,IAAb,EAAmBC,IAAnB,CAAP;AACjCpD,cAAUsB,QAAV,CAAmBE,KAAnB,CAAyB,IAAzB,EAA+BC,SAA/B;;AAEA,QAAI9B,EAAE0D,OAAF,CAAU,KAAKF,IAAf,CAAJ,EAA0B;AACxB,WAAKG,OAAL,GAAe,KAAKC,GAApB;AACD,KAFD,MAEO,IAAI5D,EAAE6D,QAAF,CAAWN,wBAAX,EAAqC,KAAKC,IAA1C,CAAJ,EAAqD;AAC1D,WAAKG,OAAL,GAAe,KAAKH,IAApB;AACD,KAFM,MAEA;AACL,YAAM,IAAIM,KAAJ,CAAU,mCAAmCP,yBAAyBQ,IAAzB,CAA8B,IAA9B,CAA7C,CAAN;AACD;AACF;AACD7D,WAASyB,QAAT,EAAmBtB,UAAUsB,QAA7B;;AAEAA,WAASI,KAAT,GAAiBJ,SAASpB,SAAT,CAAmBwB,KAAnB,GAA2B,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAChEA,YAAQA,MAAMgC,MAAN,EAAR;;AAEA;AACA;AACA,QAAIhC,MAAMJ,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED;AACAI,YAAQA,MAAMiC,KAAN,CAAY,CAAZ,CAAR;;AAEA,WAAOnE,IAAIoE,QAAJ,CAAanC,KAAb,CAAmBC,KAAnB,EAA0BmC,SAA1B,EAAP;AACD,GAbD;;AAeAxC,WAASpB,SAAT,CAAmBiC,KAAnB,GAA2B,SAASA,KAAT,GAAiB;AAC1C,WAAO,KAAKmB,OAAZ;AACD,GAFD;;AAIA,WAASnC,IAAT,GAAgB;AACd,QAAI,EAAE,gBAAgBA,IAAlB,CAAJ,EAA6B;AAC3B,UAAM4C,MAAMC,OAAOC,MAAP,CAAc9C,KAAKjB,SAAnB,CAAZ;AACAiB,WAAKK,KAAL,CAAWuC,GAAX,EAAgBtC,SAAhB;AACA,aAAOsC,GAAP;AACD;AACD/D,cAAUmB,IAAV,CAAeK,KAAf,CAAqB,IAArB,EAA2BC,SAA3B;AACD;AACD5B,WAASsB,IAAT,EAAenB,UAAUmB,IAAzB;;AAEAA,OAAKjB,SAAL,CAAeiC,KAAf,GAAuB,SAASA,KAAT,CAAeP,OAAf,EAAwB;AAC7C,WAAO,UAAUjC,EAAEuE,GAAF,CAAM,KAAKC,MAAX,EAAmB;AAAA,aAASvC,QAAQwC,MAAR,CAAezC,KAAf,CAAT;AAAA,KAAnB,EAAmD+B,IAAnD,CAAwD,IAAxD,CAAV,GAA0E,GAAjF;AACD,GAFD;;AAIA,MAAM3D,UAAU;AACdoB,cADc;AAEdf,cAFc;AAGdU,sBAHc;AAIdI,cAJc;AAKdI,sBALc;AAMdL,oBANc;AAOdD;AAPc,GAAhB;;AAUArB,IAAE0E,KAAF,CAAQtE,OAAR,EAAiB,UAACuE,QAAD,EAAWf,GAAX,EAAmB;AAClC,QAAI,CAACe,SAASf,GAAd,EAAmBe,SAASf,GAAT,GAAeA,GAAf;AACnB,QAAI,CAACe,SAASC,MAAd,EAAsB;AACpBD,eAASC,MAAT,GAAkB,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;AACzC,eAAO,IAAIF,QAAJ,CAAaE,QAAQ5C,OAArB,CAAP;AACD,OAFD;AAGD;AACF,GAPD;;AASA,SAAO7B,OAAP;AACD,CAvLD","file":"data-types.js","sourcesContent":["'use strict';\n\nconst wkx = require('wkx');\nconst _ = require('lodash');\nconst moment = require('moment-timezone');\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';\n\n  BaseTypes.DATE.types.mysql = ['DATETIME'];\n  BaseTypes.STRING.types.mysql = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mysql = ['STRING'];\n  BaseTypes.TEXT.types.mysql = ['BLOB'];\n  BaseTypes.INTEGER.types.mysql = ['LONG'];\n  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mysql = ['FLOAT'];\n  BaseTypes.TIME.types.mysql = ['TIME'];\n  BaseTypes.DATEONLY.types.mysql = ['DATE'];\n  BaseTypes.BOOLEAN.types.mysql = ['TINY'];\n  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];\n\n  function BLOB(length) {\n    if (!(this instanceof BLOB)) return new BLOB(length);\n    BaseTypes.BLOB.apply(this, arguments);\n  }\n  inherits(BLOB, BaseTypes.BLOB);\n\n  BLOB.parse = function(value, options, next) {\n    const data = next();\n\n    if (Buffer.isBuffer(data) && data.length === 0) {\n      return null;\n    }\n\n    return data;\n  };\n\n  function DECIMAL(precision, scale) {\n    if (!(this instanceof DECIMAL)) return new DECIMAL(precision, scale);\n    BaseTypes.DECIMAL.apply(this, arguments);\n  }\n  inherits(DECIMAL, BaseTypes.DECIMAL);\n\n  DECIMAL.prototype.toSql = function toSql() {\n    let definition = BaseTypes.DECIMAL.prototype.toSql.apply(this);\n\n    if (this._unsigned) {\n      definition += ' UNSIGNED';\n    }\n\n    if (this._zerofill) {\n      definition += ' ZEROFILL';\n    }\n\n    return definition;\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.prototype.toSql = function toSql() {\n    return 'DATETIME' + (this._length ? '(' + this._length + ')' : '');\n  };\n\n  DATE.prototype._stringify = function _stringify(date, options) {\n    date = BaseTypes.DATE.prototype._applyTimezone(date, options);\n    // Fractional DATETIMEs only supported on MySQL 5.6.4+\n    if (this._length) {\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n    }\n\n    return date.format('YYYY-MM-DD HH:mm:ss');\n  };\n\n  DATE.parse = function parse(value, options) {\n    value = value.string();\n\n    if (value === null) {\n      return value;\n    }\n\n    if (moment.tz.zone(options.timezone)) {\n      value = moment.tz(value, options.timezone).toDate();\n    } else {\n      value = new Date(value + ' ' + options.timezone);\n    }\n\n    return value;\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function parse(value) {\n    return value.string();\n  };\n\n  function UUID() {\n    if (!(this instanceof UUID)) return new UUID();\n    BaseTypes.UUID.apply(this, arguments);\n  }\n  inherits(UUID, BaseTypes.UUID);\n\n  UUID.prototype.toSql = function toSql() {\n    return 'CHAR(36) BINARY';\n  };\n\n\n  const SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];\n\n  function GEOMETRY(type, srid) {\n    if (!(this instanceof GEOMETRY)) return new GEOMETRY(type, srid);\n    BaseTypes.GEOMETRY.apply(this, arguments);\n\n    if (_.isEmpty(this.type)) {\n      this.sqlType = this.key;\n    } else if (_.includes(SUPPORTED_GEOMETRY_TYPES, this.type)) {\n      this.sqlType = this.type;\n    } else {\n      throw new Error('Supported geometry types are: ' + SUPPORTED_GEOMETRY_TYPES.join(', '));\n    }\n  }\n  inherits(GEOMETRY, BaseTypes.GEOMETRY);\n\n  GEOMETRY.parse = GEOMETRY.prototype.parse = function parse(value) {\n    value = value.buffer();\n\n    // Empty buffer, MySQL doesn't support POINT EMPTY\n    // check, https://dev.mysql.com/worklog/task/?id=2381\n    if (value.length === 0) {\n      return null;\n    }\n\n    // For some reason, discard the first 4 bytes\n    value = value.slice(4);\n\n    return wkx.Geometry.parse(value).toGeoJSON();\n  };\n\n  GEOMETRY.prototype.toSql = function toSql() {\n    return this.sqlType;\n  };\n\n  function ENUM() {\n    if (!(this instanceof ENUM)) {\n      const obj = Object.create(ENUM.prototype);\n      ENUM.apply(obj, arguments);\n      return obj;\n    }\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.prototype.toSql = function toSql(options) {\n    return 'ENUM(' + _.map(this.values, value => options.escape(value)).join(', ') + ')';\n  };\n\n  const exports = {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    BLOB\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n    if (!DataType.extend) {\n      DataType.extend = function extend(oldType) {\n        return new DataType(oldType.options);\n      };\n    }\n  });\n\n  return exports;\n};\n"]}