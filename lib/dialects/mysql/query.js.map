{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mysql/query.js"],"names":["Utils","require","debug","getLogger","debugContext","AbstractQuery","uuid","sequelizeErrors","_","Query","connection","sequelize","options","instance","model","v4","extend","logging","console","log","plain","raw","showWarnings","checkLoggingOption","sql","benchmark","queryBegin","Date","now","Promise","resolve","reject","query","err","results","formatError","setMaxListeners","then","warningStatus","logWarnings","formatResults","data","result","isInsertQuery","handleInsertQuery","constructor","name","autoIncrementField","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","push","field","isSelectQuery","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","enumRegex","Field","type","test","Type","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isUpsertQuery","isVersionQuery","version","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","run","warningMessage","messages","warningResults","_warningRow","_warningResult","hasOwnProperty","Message","keys","_objectKey","join","errno","code","match","message","fields","values","split","undefined","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","DatabaseError","reduce","acc","item","Key_name","Seq_in_index","attribute","Column_name","length","Sub_part","order","Collation","column_name","map","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","default"],"mappings":"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","file":"query.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:mysql');\nconst AbstractQuery = require('../abstract/query');\nconst uuid = require('uuid');\nconst sequelizeErrors = require('../../errors.js');\nconst _ = require('lodash');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.uuid = uuid.v4();\n    this.options = Utils._.extend({\n      logging: console.log,\n      plain: false,\n      raw: false,\n      showWarnings: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  run(sql) {\n    this.sql = sql;\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    const showWarnings = this.sequelize.options.showWarnings || this.options.showWarnings;\n\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.connection.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n    return new Utils.Promise((resolve, reject) => {\n      this.connection.query({ sql: this.sql }, (err, results) => {\n        debug(`executed(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n        if (benchmark) {\n          this.sequelize.log('Executed (' + (this.connection.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);\n        }\n\n        if (err) {\n          err.sql = sql;\n\n          reject(this.formatError(err));\n        } else {\n          resolve(results);\n        }\n      }).setMaxListeners(100);\n    })\n    // Log warnings if we've got them.\n    .then(results => {\n      if (showWarnings && results && results.warningStatus > 0) {\n        return this.logWarnings(results);\n      }\n      return results;\n    })\n    // Return formatted results...\n    .then(results => this.formatResults(results));\n  }\n\n    /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primiary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementField\n          && this.model.autoIncrementField === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isShowTablesQuery()) {\n      result = this.handleShowTablesQuery(data);\n    } else if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI'\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n\n    } else if (this.isCallQuery()) {\n      result = data[0];\n    } else if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\n      result = data.affectedRows;\n    } else if (this.isVersionQuery()) {\n      result = data[0].version;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, data.affectedRows];\n    } else if (this.isShowConstraintsQuery()) {\n      result = data;\n    } else if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, data];\n    }\n\n    return result;\n  }\n\n  logWarnings(results) {\n    return this.run('SHOW WARNINGS').then(warningResults => {\n      const warningMessage = 'MySQL Warnings (' + (this.connection.uuid||'default') + '): ';\n      const messages = [];\n      for (const _warningRow of warningResults) {\n        for (const _warningResult of _warningRow) {\n          if (_warningResult.hasOwnProperty('Message')) {\n            messages.push(_warningResult.Message);\n          } else {\n            for (const _objectKey of _warningResult.keys()) {\n              messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n            }\n          }\n        }\n      }\n\n      this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n      return results;\n    });\n  }\n\n  formatError(err) {\n    switch (err.errno || err.code) {\n      case 1062: {\n        const match = err.message.match(/Duplicate entry '(.*)' for key '?((.|\\s)*?)'?$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[match[2]];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = Utils._.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[2]] = match[1];\n        }\n\n        const errors = [];\n        Utils._.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', field, value\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({message, errors, parent: err, fields});\n      }\n      case 1451: {\n        const match = err.message.match(/FOREIGN KEY \\(`(.*)`\\) REFERENCES `(.*)` \\(`(.*)`\\)(?: ON .*)?\\)$/);\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          fields: null,\n          index: match ? match[3] : undefined,\n          parent: err\n        });\n      }\n      case 1452: {\n        const match = err.message.match(/FOREIGN KEY \\(`(.*)`\\) REFERENCES `(.*)` \\(`(.*)`\\)(.*)\\)$/);\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          fields: null,\n          index: match ? match[1] : undefined,\n          parent: err\n        });\n      }\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = _.reduce(data, (acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return Utils._.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]}