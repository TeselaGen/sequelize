{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mysql/query-generator.js"],"names":["Utils","require","AbstractQueryGenerator","QueryGenerator","__proto__","dialect","createSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","options","_","extend","engine","charset","rowFormat","query","primaryKeys","foreignKeys","attrStr","attr","hasOwnProperty","dataType","match","includes","push","quoteIdentifier","replace","values","table","quoteTable","join","comment","isString","escape","collation","collate","initialAutoIncrement","pkString","map","pk","uniqueKeys","each","columns","indexName","singleField","fields","length","fkey","template","trim","showTablesQuery","addColumnQuery","key","definition","attributeToSQL","context","foreignKey","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","fkName","attrName","finalQuery","renameColumnQuery","attrBefore","upsertQuery","insertValues","updateValues","where","rawAttributes","onDuplicate","Object","keys","insertQuery","deleteQuery","truncate","getWhereConditions","limit","isUndefined","showIndexesQuery","database","showConstraintsQuery","constraintName","sql","removeIndexQuery","indexNameOrAttributes","underscore","attribute","isPlainObject","type","toString","bind","allowNull","autoIncrement","_binary","defaultValueSchemable","defaultValue","unique","primaryKey","after","references","model","onDelete","toUpperCase","onUpdate","attributesToSQL","result","field","findAutoIncrementField","factory","name","identifier","addTicks","removeTicks","getForeignKeysQuery","schemaName","getForeignKeyQuery","columnName","schema","wrapSingleQuote","dropForeignKeyQuery","module","exports"],"mappings":"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","file":"query-generator.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nconst QueryGenerator = {\n  __proto__: AbstractQueryGenerator,\n  dialect: 'mysql',\n\n  createSchema() {\n    return 'SHOW TABLES';\n  },\n\n  showSchemasQuery() {\n    return 'SHOW TABLES';\n  },\n\n  versionQuery() {\n    return 'SELECT VERSION() as `version`';\n  },\n\n  createTableQuery(tableName, attributes, options) {\n    options = Utils._.extend({\n      engine: 'InnoDB',\n      charset: null,\n      rowFormat: null\n    }, options || {});\n\n    const query = 'CREATE TABLE IF NOT EXISTS <%= table %> (<%= attributes%>) ENGINE=<%= engine %><%= comment %><%= charset %><%= collation %><%= initialAutoIncrement %><%= rowFormat %>';\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (attributes.hasOwnProperty(attr)) {\n        const dataType = attributes[attr];\n        let match;\n\n        if (Utils._.includes(dataType, 'PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (Utils._.includes(dataType, 'REFERENCES')) {\n             // MySQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1].replace(/PRIMARY KEY/, ''));\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType.replace(/PRIMARY KEY/, ''));\n          }\n        } else if (Utils._.includes(dataType, 'REFERENCES')) {\n          // MySQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1]);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);\n        }\n      }\n    }\n\n    const values = {\n      table: this.quoteTable(tableName),\n      attributes: attrStr.join(', '),\n      comment: options.comment && Utils._.isString(options.comment) ? ' COMMENT ' + this.escape(options.comment) : '',\n      engine: options.engine,\n      charset: options.charset ? ' DEFAULT CHARSET=' + options.charset : '',\n      collation: options.collate ? ' COLLATE ' + options.collate : '',\n      rowFormat: options.rowFormat ? ' ROW_FORMAT=' + options.rowFormat : '',\n      initialAutoIncrement: options.initialAutoIncrement ? ' AUTO_INCREMENT=' + options.initialAutoIncrement : ''\n    };\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      Utils._.each(options.uniqueKeys, (columns, indexName) => {\n        if (!columns.singleField) { // If it's a single field its handled in column def, not as an index\n          if (!Utils._.isString(indexName)) {\n            indexName = 'uniq_' + tableName + '_' + columns.fields.join('_');\n          }\n          values.attributes += ', UNIQUE ' + this.quoteIdentifier(indexName) + ' (' + Utils._.map(columns.fields, this.quoteIdentifier).join(', ') + ')';\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      values.attributes += ', PRIMARY KEY (' + pkString + ')';\n    }\n\n    for (const fkey in foreignKeys) {\n      if (foreignKeys.hasOwnProperty(fkey)) {\n        values.attributes += ', FOREIGN KEY (' + this.quoteIdentifier(fkey) + ') ' + foreignKeys[fkey];\n      }\n    }\n\n    return Utils._.template(query)(values).trim() + ';';\n  },\n\n  showTablesQuery() {\n    return 'SHOW TABLES;';\n  },\n\n  addColumnQuery(table, key, dataType) {\n    const definition = this.attributeToSQL(dataType, {\n      context: 'addColumn',\n      tableName: table,\n      foreignKey: key\n    });\n    return `ALTER TABLE ${this.quoteTable(table)} ADD ${this.quoteIdentifier(key)} ${definition};`;\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP ${this.quoteIdentifier(attributeName)};`;\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.match(/REFERENCES/)) {\n        const fkName = this.quoteIdentifier(tableName + '_' + attributeName + '_foreign_idx');\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        constraintString.push(`${fkName} FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push('`' + attributeName + '` `' + attributeName + '` ' + definition);\n      }\n    }\n\n    let finalQuery = '';\n    if (attrString.length) {\n      finalQuery += 'CHANGE ' + attrString.join(', ');\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n    if (constraintString.length) {\n      finalQuery += 'ADD CONSTRAINT ' + constraintString.join(', ');\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} ${finalQuery};`;\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push('`' + attrBefore + '` `' + attrName + '` ' + definition);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} CHANGE ${attrString.join(', ')};`;\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, rawAttributes, options) {\n    options.onDuplicate = 'UPDATE ';\n\n    options.onDuplicate += Object.keys(updateValues).map(key => {\n      key = this.quoteIdentifier(key);\n      return key + '=VALUES(' + key +')';\n    }).join(', ');\n\n    return this.insertQuery(tableName, insertValues, rawAttributes, options);\n  },\n\n  deleteQuery(tableName, where, options) {\n    options = options || {};\n\n    const table = this.quoteTable(tableName);\n    if (options.truncate === true) {\n      // Truncate does not allow LIMIT and WHERE\n      return 'TRUNCATE ' + table;\n    }\n\n    where = this.getWhereConditions(where);\n    let limit = '';\n\n    if (Utils._.isUndefined(options.limit)) {\n      options.limit = 1;\n    }\n\n    if (options.limit) {\n      limit = ' LIMIT ' + this.escape(options.limit);\n    }\n\n    let query = 'DELETE FROM ' + table;\n    if (where) query += ' WHERE ' + where;\n    query += limit;\n\n    return query;\n  },\n\n  showIndexesQuery(tableName, options) {\n    return 'SHOW INDEX FROM ' + this.quoteTable(tableName) + ((options || {}).database ? ' FROM `' + options.database + '`' : '');\n  },\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = [\n      'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',\n      'CONSTRAINT_NAME AS constraintName,',\n      'CONSTRAINT_SCHEMA AS constraintSchema,',\n      'CONSTRAINT_TYPE AS constraintType,',\n      'TABLE_NAME AS tableName,',\n      'TABLE_SCHEMA AS tableSchema',\n      'from INFORMATION_SCHEMA.TABLE_CONSTRAINTS',\n      `WHERE table_name='${tableName}'`\n    ].join(' ');\n\n    if (constraintName) {\n      sql += ` AND constraint_name = '${constraintName}'`;\n    }\n\n    return sql + ';';\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    return `DROP INDEX ${this.quoteIdentifier(indexName)} ON ${this.quoteTable(tableName)}`;\n  },\n\n  attributeToSQL(attribute, options) {\n    if (!Utils._.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let template = attribute.type.toString({ escape: this.escape.bind(this) });\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' auto_increment';\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' DEFAULT ' + this.escape(attribute.defaultValue);\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.after) {\n      template += ' AFTER ' + this.quoteIdentifier(attribute.after);\n    }\n\n    if (attribute.references) {\n\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ' REFERENCES ' + this.quoteTable(attribute.references.model);\n\n      if (attribute.references.key) {\n        template += ' (' + this.quoteIdentifier(attribute.references.key) + ')';\n      } else {\n        template += ' (' + this.quoteIdentifier('id') + ')';\n      }\n\n      if (attribute.onDelete) {\n        template += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      if (attribute.onUpdate) {\n        template += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();\n      }\n    }\n\n    return template;\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  },\n\n  findAutoIncrementField(factory) {\n    const fields = [];\n\n    for (const name in factory.attributes) {\n      if (factory.attributes.hasOwnProperty(name)) {\n        const definition = factory.attributes[name];\n\n        if (definition && definition.autoIncrement) {\n          fields.push(name);\n        }\n      }\n    }\n\n    return fields;\n  },\n\n  quoteIdentifier(identifier) {\n    if (identifier === '*') return identifier;\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} schemaName The name of the schema.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName, schemaName) {\n    return \"SELECT CONSTRAINT_NAME as constraint_name FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '\" + tableName + /* jshint ignore: line */\n      \"' AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='\" + schemaName + \"' AND REFERENCED_TABLE_NAME IS NOT NULL;\"; /* jshint ignore: line */\n  },\n\n  /**\n   * Generates an SQL query that returns the foreign key constraint of a given column.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} columnName The name of the column.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  getForeignKeyQuery(table, columnName) {\n    let tableName = table.tableName || table;\n    if (table.schema) {\n      tableName = table.schema + '.' + tableName;\n    }\n    return 'SELECT CONSTRAINT_NAME as constraint_name'\n      + ' FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE'\n      + ' WHERE (REFERENCED_TABLE_NAME = ' + wrapSingleQuote(tableName)\n      + ' AND REFERENCED_COLUMN_NAME = ' + wrapSingleQuote(columnName)\n      + ') OR (TABLE_NAME = ' + wrapSingleQuote(tableName)\n      + ' AND COLUMN_NAME = ' + wrapSingleQuote(columnName)\n      + ')';\n  },\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} foreignKey The name of the foreign key constraint.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return 'ALTER TABLE ' + this.quoteTable(tableName) + ' DROP FOREIGN KEY ' + this.quoteIdentifier(foreignKey) + ';';\n  }\n};\n\n// private methods\nfunction wrapSingleQuote(identifier){\n  return Utils.addTicks(identifier, '\\'');\n}\n\nmodule.exports = QueryGenerator;\n"]}