{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/mysql/query-interface.js"],"names":["_","require","UnknownConstraintError","removeColumn","tableName","columnName","options","sequelize","query","QueryGenerator","getForeignKeyQuery","assign","raw","spread","results","length","constraint_name","dropForeignKeyQuery","then","removeColumnQuery","removeConstraint","constraintName","sql","showConstraintsQuery","Object","type","QueryTypes","SHOWCONSTRAINTS","constraint","constraints","constraintType","removeIndexQuery","exports"],"mappings":"AAAA;;AAEA;;;;;;;;AAQA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,yBAAyBD,QAAQ,cAAR,EAAwBC,sBAAvD;;AAEA;;;;;;;;;;;AAWA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,UAAjC,EAA6CC,OAA7C,EAAsD;AAAA;;AACpDA,YAAUA,WAAW,EAArB;;AAEA,SAAO,KAAKC,SAAL,CAAeC,KAAf,CACH,KAAKC,cAAL,CAAoBC,kBAApB,CAAuCN,SAAvC,EAAkDC,UAAlD,CADG,EAEHL,EAAEW,MAAF,CAAS,EAAEC,KAAK,IAAP,EAAT,EAAwBN,OAAxB,CAFG,EAIJO,MAJI,CAIG,mBAAW;AACjB;AACA,QAAI,CAACC,QAAQC,MAAT,IAAmBD,QAAQ,CAAR,EAAWE,eAAX,KAA+B,SAAtD,EAAiE;AAC/D;AACA;AACD;AACD,WAAO,MAAKT,SAAL,CAAeC,KAAf,CACL,MAAKC,cAAL,CAAoBQ,mBAApB,CAAwCb,SAAxC,EAAmDU,QAAQ,CAAR,EAAWE,eAA9D,CADK,EAELhB,EAAEW,MAAF,CAAS,EAAEC,KAAK,IAAP,EAAT,EAAwBN,OAAxB,CAFK,CAAP;AAID,GAdI,EAeJY,IAfI,CAeC;AAAA,WAAM,MAAKX,SAAL,CAAeC,KAAf,CACV,MAAKC,cAAL,CAAoBU,iBAApB,CAAsCf,SAAtC,EAAiDC,UAAjD,CADU,EAEVL,EAAEW,MAAF,CAAS,EAAEC,KAAK,IAAP,EAAT,EAAwBN,OAAxB,CAFU,CAAN;AAAA,GAfD,CAAP;AAmBD;;AAGD,SAASc,gBAAT,CAA0BhB,SAA1B,EAAqCiB,cAArC,EAAqDf,OAArD,EAA8D;AAAA;;AAC5D,MAAMgB,MAAM,KAAKb,cAAL,CAAoBc,oBAApB,CAAyCnB,SAAzC,EAAoDiB,cAApD,CAAZ;;AAEA,SAAO,KAAKd,SAAL,CAAeC,KAAf,CAAqBc,GAArB,EAA0BE,OAAOb,MAAP,CAAc,EAAd,EAAkBL,OAAlB,EAA2B,EAAEmB,MAAM,KAAKlB,SAAL,CAAemB,UAAf,CAA0BC,eAAlC,EAA3B,CAA1B,EACJT,IADI,CACC,uBAAe;AACnB,QAAMU,aAAaC,YAAY,CAAZ,CAAnB;AACA,QAAIrB,cAAJ;AACA,QAAIoB,cAAcA,WAAWE,cAA7B,EAA6C;AAC3C,UAAIF,WAAWE,cAAX,KAA8B,aAAlC,EAAiD;AAC/CtB,gBAAQ,OAAKC,cAAL,CAAoBQ,mBAApB,CAAwCb,SAAxC,EAAmDiB,cAAnD,CAAR;AACD,OAFD,MAEO;AACLb,gBAAQ,OAAKC,cAAL,CAAoBsB,gBAApB,CAAqCH,WAAWxB,SAAhD,EAA2DwB,WAAWP,cAAtE,CAAR;AACD;AACF,KAND,MAMO;AACL,YAAM,IAAInB,sBAAJ,iBAAyCmB,cAAzC,kBAAoEjB,SAApE,qBAAN;AACD;;AAED,WAAO,OAAKG,SAAL,CAAeC,KAAf,CAAqBA,KAArB,EAA4BF,OAA5B,CAAP;AACD,GAfI,CAAP;AAgBD;;AAED0B,QAAQZ,gBAAR,GAA2BA,gBAA3B;AACAY,QAAQ7B,YAAR,GAAuBA,YAAvB","file":"query-interface.js","sourcesContent":["'use strict';\n\n/**\n Returns an object that treats MySQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\nconst _ = require('lodash');\nconst UnknownConstraintError = require('../../errors').UnknownConstraintError;\n\n/**\n  A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n\n  @method removeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName     The name of the table.\n  @param  {String} columnName    The name of the attribute that we want to remove.\n  @param  {Object} options\n @private\n */\nfunction removeColumn(tableName, columnName, options) {\n  options = options || {};\n\n  return this.sequelize.query(\n      this.QueryGenerator.getForeignKeyQuery(tableName, columnName),\n      _.assign({ raw: true }, options)\n    )\n    .spread(results => {\n      //Exclude primary key constraint\n      if (!results.length || results[0].constraint_name === 'PRIMARY') {\n        // No foreign key constraints found, so we can remove the column\n        return;\n      }\n      return this.sequelize.query(\n        this.QueryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name),\n        _.assign({ raw: true }, options)\n      );\n    })\n    .then(() => this.sequelize.query(\n      this.QueryGenerator.removeColumnQuery(tableName, columnName),\n      _.assign({ raw: true }, options)\n    ));\n}\n\n\nfunction removeConstraint(tableName, constraintName, options) {\n  const sql = this.QueryGenerator.showConstraintsQuery(tableName, constraintName);\n\n  return this.sequelize.query(sql, Object.assign({}, options, { type: this.sequelize.QueryTypes.SHOWCONSTRAINTS }))\n    .then(constraints => {\n      const constraint = constraints[0];\n      let query;\n      if (constraint && constraint.constraintType) {\n        if (constraint.constraintType === 'FOREIGN KEY') {\n          query = this.QueryGenerator.dropForeignKeyQuery(tableName, constraintName);\n        } else {\n          query = this.QueryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n        }\n      } else {\n        throw new UnknownConstraintError(`Constraint ${constraintName} on table ${tableName} does not exist`);\n      }\n\n      return this.sequelize.query(query, options);\n    });\n}\n\nexports.removeConstraint = removeConstraint;\nexports.removeColumn = removeColumn;\n"]}