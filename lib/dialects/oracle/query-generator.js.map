{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/oracle/query-generator.js"],"names":["Utils","require","DataTypes","AbstractQueryGenerator","_","crc32","uuid","oracleReservedWords","throwMethodUndefined","methodName","Error","QueryGenerator","options","dialect","createSchema","schema","quoteIdentifier","wrapSingleQuote","join","showSchemasQuery","dropSchema","tableName","quoteTable","versionQuery","createTableQuery","attributes","query","completeQuery","self","primaryKeys","foreignKeys","attrStr","checkStr","values","table","regex","chkRegex","attr","hasOwnProperty","dataType","match","includes","push","replace","column","isPlainObject","toUpperCase","trim","checkCond","condition","pkString","map","pk","bind","length","primaryKeyName","crcName","fkey","indexOf","fkName","indexes","idxToDelete","forEach","index","idx","unique","fields","field","attribute","canContinue","uniqueKeys","keys","Object","fieldIdx","currUnique","i","indexName","name","_generateUniqueConstraintName","constraintToAdd","splice","each","columns","canBeUniq","primaryKey","currField","isString","attrToReplace","indexUpperName","charAt","template","_generateSeqName","seqName","seq","split","toLowerCase","describeTableQuery","sql","currTableName","renameTableQuery","before","after","showConstraintsQuery","showTablesQuery","subQuery","dropTableQuery","addConstraintQuery","onUpdate","constraintSnippet","getConstraintSnippet","quoteIdentifiers","addColumnQuery","key","definition","attributeToSQL","context","removeColumnQuery","attributeName","changeColumnQuery","modifyQuery","alterQuery","attrString","constraintString","attrName","fullQuery","finalQuery","secondQuery","renameColumnQuery","attrBefore","newName","upsertQuery","insertValues","updateValues","where","rawAttributes","insertQuery","valueHash","modelAttributes","defaults","valueQuery","emptyQuery","modelAttributeMap","realTableName","primaryKeyReturn","value","returningQuery","AttributeKey","modelAttribute","_dialect","supports","onDuplicate","removeNullValuesFromHash","omitNull","autoIncrement","allowNull","escape","undefined","element","pkReturn","type","toSql","returning","tableKeys","sequelize","models","currentModelKey","find","modelKey","currentModel","hasPrimaryKeys","replacements","bulkInsertQuery","attrValueHashes","tuples","allAttributes","allQueries","attrValueHash","forOwn","array","row","attrs","queryToLaunch","rows","deleteQuery","truncate","getWhereConditions","limit","showIndexesQuery","owner","getOwnerToGoodCase","request","removeIndexQuery","indexNameOrAttributes","underscore","references","Model","model","log","onDelete","ENUM","DOUBLE","toString","_binary","defaultValueSchemable","defaultValue","attributesToSQL","result","findAutoIncrementField","factory","createTrigger","dropTrigger","renameTrigger","createFunction","dropFunction","renameFunction","identifier","force","addTicks","getConstraintsOnColumn","getForeignKeysQuery","param","as","isObject","nameIndexes","rawTablename","onlyAttributeNames","dropForeignKeyQuery","foreignKey","dropConstraintQuery","getPrimaryKeyConstraintQuery","isIdentityPrimaryKey","dropIdentityColumn","columnName","constraintName","constraint","setAutocommitQuery","setIsolationLevelQuery","parent","generateTransactionId","v4","startTransactionQuery","transaction","commitTransactionQuery","rollbackTransactionQuery","selectFromTableFragment","tables","mainTableAs","mainFragment","addLimitAndOffset","fragment","offset","isSubQuery","hasIncludeWhere","hasIncludeRequired","hasMultiAssociation","orders","order","getQueryOrders","include","subQueryOrder","primaryKeyField","booleanValue","module","exports","extend","clone"],"mappings":"AAAA;;AAEA;;AACA,IAAMA,QAAQC,QAAQ,aAAR,CAAd;AACA,IAAMC,YAAYD,QAAQ,kBAAR,CAAlB;AACA,IAAME,yBAAyBF,QAAQ,6BAAR,CAA/B;AACA,IAAMG,IAAIH,QAAQ,QAAR,CAAV;AACA,IAAMI,QAAQJ,QAAQ,QAAR,EAAkBI,KAAhC;AACA,IAAMC,OAAOL,QAAQ,MAAR,CAAb;;AAEA;AACA,IAAMM,sBAAsB,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB,EAAkC,KAAlC,EAAyC,OAAzC,EAAkD,QAAlD,EAA4D,OAA5D,EAAqE,KAArE,EAA4E,UAA5E,EAAwF,UAAxF,EAAoG,OAApG,EAA6G,SAA7G,EAAwH,KAAxH,EAA+H,KAA/H,EAAsI,SAAtI,EAAiJ,YAAjJ,EAA+J,OAA/J,EAAwK,IAAxK,EAA8K,KAA9K,EAAqL,IAArL,EAA2L,OAA3L,EAAoM,eAApM,EAAqN,eAArN,EAAsO,YAAtO,EAAoP,WAApP,EAAiQ,QAAjQ,EAA2Q,QAA3Q,EAAqR,QAArR,EAA+R,OAA/R,EAAwS,SAAxS,EAAmT,OAAnT,EAA4T,QAA5T,EAAsU,MAAtU,EAA8U,OAA9U,EAAuV,MAAvV,EAA+V,IAA/V,EAAqW,OAArW,EAA8W,iBAA9W,EAAiY,QAAjY,EAA2Y,SAA3Y,EAAsZ,MAAtZ,EAA8Z,OAA9Z,EAAua,SAAva,EAAkb,QAAlb,EAA4b,MAA5b,EAAoc,SAApc,EAA+c,WAA/c,EAA4d,OAA5d,EAAqe,YAAre,EAAmf,QAAnf,EAA6f,OAA7f,EAAsgB,OAAtgB,EAA+gB,MAA/gB,EAAuhB,OAAvhB,EAAgiB,OAAhiB,EAAyiB,2BAAziB,EAAskB,SAAtkB,EAAilB,UAAjlB,EAA6lB,QAA7lB,EAAumB,SAAvmB,EAAknB,SAAlnB,EAA6nB,QAA7nB,EAAuoB,WAAvoB,EAAopB,eAAppB,EAAqqB,SAArqB,EAAgrB,UAAhrB,EAA4rB,iBAA5rB,EAA+sB,UAA/sB,EAA2tB,SAA3tB,EAAsuB,SAAtuB,EAAivB,cAAjvB,EAAiwB,YAAjwB,EAA+wB,aAA/wB,EAA8xB,UAA9xB,EAA0yB,UAA1yB,EAAszB,aAAtzB,EAAq0B,SAAr0B,EAAg1B,MAAh1B,EAAw1B,cAAx1B,EAAw2B,iBAAx2B,EAA23B,QAA33B,EAAq4B,SAAr4B,EAAg5B,gBAAh5B,EAAk6B,aAAl6B,EAAi7B,QAAj7B,EAA27B,OAA37B,EAAo8B,UAAp8B,EAAg9B,UAAh9B,EAA49B,UAA59B,EAAw+B,WAAx+B,EAAq/B,WAAr/B,EAAkgC,MAAlgC,EAA0gC,KAA1gC,EAAihC,QAAjhC,EAA2hC,OAA3hC,EAAoiC,OAApiC,EAA6iC,YAA7iC,EAA2jC,OAA3jC,EAAokC,KAApkC,EAA2kC,SAA3kC,EAAslC,SAAtlC,EAAimC,SAAjmC,EAA4mC,YAA5mC,EAA0nC,UAA1nC,EAAsoC,QAAtoC,EAAgpC,QAAhpC,EAA0pC,OAA1pC,EAAmqC,MAAnqC,EAA2qC,WAA3qC,EAAwrC,SAAxrC,EAAmsC,YAAnsC,EAAitC,UAAjtC,EAA6tC,UAA7tC,EAAyuC,aAAzuC,EAAwvC,KAAxvC,EAA+vC,QAA/vC,EAAywC,MAAzwC,EAAixC,MAAjxC,EAAyxC,MAAzxC,EAAiyC,MAAjyC,EAAyyC,QAAzyC,EAAmzC,KAAnzC,EAA0zC,SAA1zC,EAAq0C,OAAr0C,EAA80C,QAA90C,EAAw1C,QAAx1C,EAAk2C,YAAl2C,EAAg3C,UAAh3C,EAA43C,WAA53C,EAAy4C,WAAz4C,EAAs5C,SAAt5C,EAAi6C,QAAj6C,EAA26C,QAA36C,EAAq7C,SAAr7C,EAAg8C,QAAh8C,EAA08C,SAA18C,EAAq9C,YAAr9C,EAAm+C,uBAAn+C,EAA4/C,OAA5/C,EAAqgD,MAArgD,EAA6gD,MAA7gD,EAAqhD,YAArhD,EAAmiD,SAAniD,EAA8iD,OAA9iD,EAAujD,MAAvjD,EAA+jD,OAA/jD,EAAwkD,KAAxkD,EAA+kD,OAA/kD,EAAwlD,SAAxlD,EAAmmD,UAAnmD,EAA+mD,WAA/mD,EAA4nD,MAA5nD,EAAooD,MAApoD,EAA4oD,UAA5oD,EAAwpD,QAAxpD,EAAkqD,UAAlqD,EAA8qD,aAA9qD,EAA6rD,OAA7rD,EAAssD,OAAtsD,EAA+sD,QAA/sD,EAAytD,MAAztD,EAAiuD,UAAjuD,EAA6uD,QAA7uD,EAAuvD,QAAvvD,EAAiwD,MAAjwD,EAAywD,YAAzwD,EAAuxD,cAAvxD,EAAuyD,WAAvyD,EAAozD,IAApzD,EAA0zD,WAA1zD,EAAu0D,IAAv0D,EAA60D,WAA70D,EAA01D,WAA11D,EAAu2D,OAAv2D,EAAg3D,SAAh3D,EAA23D,SAA33D,EAAs4D,WAAt4D,EAAm5D,eAAn5D,EAAo6D,SAAp6D,EAA+6D,WAA/6D,EAA47D,UAA57D,EAAw8D,QAAx8D,EAAk9D,UAAl9D,EAA89D,WAA99D,EAA2+D,SAA3+D,EAAs/D,KAAt/D,EAA6/D,SAA7/D,EAAwgE,cAAxgE,EAAwhE,WAAxhE,EAAqiE,MAAriE,EAA6iE,IAA7iE,EAAmjE,WAAnjE,EAAgkE,iBAAhkE,EAAmlE,MAAnlE,EAA2lE,KAA3lE,EAAkmE,MAAlmE,EAA0mE,OAA1mE,EAAmnE,OAAnnE,EAA4nE,MAA5nE,EAAooE,OAApoE,EAA6oE,SAA7oE,EAAwpE,MAAxpE,EAAgqE,OAAhqE,EAAyqE,MAAzqE,EAAirE,MAAjrE,EAAyrE,KAAzrE,EAAgsE,OAAhsE,EAAysE,MAAzsE,EAAitE,QAAjtE,EAA2tE,KAA3tE,EAAkuE,SAAluE,EAA6uE,SAA7uE,EAAwvE,wBAAxvE,EAAkxE,2BAAlxE,EAA+yE,MAA/yE,EAAuzE,QAAvzE,EAAi0E,QAAj0E,EAA20E,KAA30E,EAAk1E,aAAl1E,EAAi2E,cAAj2E,EAAi3E,YAAj3E,EAA+3E,cAA/3E,EAA+4E,aAA/4E,EAA85E,eAA95E,EAA+6E,eAA/6E,EAAg8E,SAAh8E,EAA28E,UAA38E,EAAu9E,UAAv9E,EAAm+E,KAAn+E,EAA0+E,QAA1+E,EAAo/E,SAAp/E,EAA+/E,YAA//E,EAA6gF,OAA7gF,EAAshF,UAAthF,EAAkiF,UAAliF,EAA8iF,kBAA9iF,EAAkkF,MAAlkF,EAA0kF,QAA1kF,EAAolF,OAAplF,EAA6lF,MAA7lF,EAAqmF,iBAArmF,EAAwnF,UAAxnF,EAAooF,UAApoF,EAAgpF,OAAhpF,EAAypF,UAAzpF,EAAqqF,OAArqF,EAA8qF,QAA9qF,EAAwrF,QAAxrF,EAAksF,SAAlsF,EAA6sF,KAA7sF,EAAotF,MAAptF,EAA4tF,cAA5tF,EAA4uF,SAA5uF,EAAuvF,SAAvvF,EAAkwF,YAAlwF,EAAgxF,SAAhxF,EAA2xF,SAA3xF,EAAsyF,WAAtyF,EAAmzF,YAAnzF,EAAi0F,YAAj0F,EAA+0F,MAA/0F,EAAu1F,SAAv1F,EAAk2F,YAAl2F,EAAg3F,YAAh3F,EAA83F,YAA93F,EAA44F,WAA54F,EAAy5F,QAAz5F,EAAm6F,QAAn6F,EAA66F,KAA76F,EAAo7F,SAAp7F,EAA+7F,QAA/7F,EAAy8F,MAAz8F,EAAi9F,QAAj9F,EAA29F,SAA39F,EAAs+F,WAAt+F,EAAm/F,QAAn/F,EAA6/F,OAA7/F,EAAsgG,aAAtgG,EAAqhG,IAArhG,EAA2hG,KAA3hG,EAAkiG,SAAliG,EAA6iG,KAA7iG,EAAojG,UAApjG,EAAgkG,KAAhkG,EAAukG,IAAvkG,EAA6kG,QAA7kG,EAAulG,MAAvlG,EAA+lG,QAA/lG,EAAymG,MAAzmG,EAAinG,SAAjnG,EAA4nG,gBAA5nG,EAA8oG,QAA9oG,EAAwpG,IAAxpG,EAA8pG,OAA9pG,EAAuqG,cAAvqG,EAAurG,SAAvrG,EAAksG,UAAlsG,EAA8sG,KAA9sG,EAAqtG,SAArtG,EAAguG,UAAhuG,EAA4uG,WAA5uG,EAAyvG,UAAzvG,EAAqwG,qBAArwG,EAA4xG,oBAA5xG,EAAkzG,oBAAlzG,EAAw0G,oBAAx0G,EAA81G,qBAA91G,EAAq3G,0BAAr3G,EAAi5G,SAAj5G,EAA45G,aAA55G,EAA26G,cAA36G,EAA27G,SAA37G,EAAs8G,YAAt8G,EAAo9G,SAAp9G,EAA+9G,WAA/9G,EAA4+G,MAA5+G,EAAo/G,aAAp/G,EAAmgH,kBAAngH,EAAuhH,WAAvhH,EAAoiH,UAApiH,EAAgjH,SAAhjH,EAA2jH,OAA3jH,EAAokH,SAApkH,EAA+kH,aAA/kH,EAA8lH,WAA9lH,EAA2mH,YAA3mH,EAAynH,WAAznH,EAAsoH,SAAtoH,EAAipH,QAAjpH,EAA2pH,OAA3pH,EAAoqH,OAApqH,EAA6qH,OAA7qH,EAAsrH,OAAtrH,EAA+rH,KAA/rH,EAAssH,KAAtsH,EAA6sH,MAA7sH,EAAqtH,QAArtH,EAA+tH,MAA/tH,EAAuuH,SAAvuH,EAAkvH,SAAlvH,EAA6vH,aAA7vH,EAA4wH,UAA5wH,EAAwxH,KAAxxH,EAA+xH,YAA/xH,EAA6yH,aAA7yH,EAA4zH,SAA5zH,EAAu0H,QAAv0H,EAAi1H,SAAj1H,EAA41H,OAA51H,EAAq2H,WAAr2H,EAAk3H,QAAl3H,EAA43H,UAA53H,EAAw4H,YAAx4H,EAAs5H,QAAt5H,EAAg6H,WAAh6H,EAA66H,OAA76H,EAAs7H,SAAt7H,EAAi8H,QAAj8H,EAA28H,MAA38H,EAAm9H,OAAn9H,EAA49H,UAA59H,EAAw+H,KAAx+H,EAA++H,OAA/+H,EAAw/H,QAAx/H,EAAkgI,MAAlgI,EAA0gI,MAA1gI,EAAkhI,QAAlhI,EAA4hI,WAA5hI,EAAyiI,KAAziI,EAAgjI,gBAAhjI,EAAkkI,QAAlkI,EAA4kI,KAA5kI,EAAmlI,OAAnlI,EAA4lI,QAA5lI,EAAsmI,YAAtmI,EAAonI,SAApnI,EAA+nI,SAA/nI,EAA0oI,WAA1oI,EAAupI,UAAvpI,EAAmqI,QAAnqI,EAA6qI,UAA7qI,EAAyrI,cAAzrI,EAAysI,SAAzsI,EAAotI,wBAAptI,EAA8uI,mBAA9uI,EAAmwI,KAAnwI,EAA0wI,OAA1wI,EAAmxI,QAAnxI,EAA6xI,aAA7xI,EAA4yI,QAA5yI,EAAszI,MAAtzI,EAA8zI,MAA9zI,EAAs0I,uBAAt0I,EAA+1I,UAA/1I,EAA22I,UAA32I,EAAu3I,MAAv3I,EAA+3I,MAA/3I,EAAu4I,eAAv4I,EAAw5I,OAAx5I,EAAi6I,WAAj6I,EAA86I,SAA96I,EAAy7I,OAAz7I,EAAk8I,cAAl8I,EAAk9I,YAAl9I,EAAg+I,MAAh+I,EAAw+I,SAAx+I,EAAm/I,OAAn/I,EAA4/I,WAA5/I,EAAygJ,YAAzgJ,EAAuhJ,QAAvhJ,EAAiiJ,0BAAjiJ,EAA6jJ,gBAA7jJ,EAA+kJ,SAA/kJ,EAA0lJ,SAA1lJ,EAAqmJ,QAArmJ,EAA+mJ,SAA/mJ,EAA0nJ,QAA1nJ,EAAooJ,OAApoJ,EAA6oJ,QAA7oJ,EAAupJ,YAAvpJ,EAAqqJ,eAArqJ,EAAsrJ,OAAtrJ,EAA+rJ,WAA/rJ,EAA4sJ,MAA5sJ,EAAotJ,KAAptJ,EAA2tJ,MAA3tJ,EAAmuJ,QAAnuJ,EAA6uJ,WAA7uJ,EAA0vJ,MAA1vJ,EAAkwJ,IAAlwJ,EAAwwJ,UAAxwJ,EAAoxJ,OAApxJ,EAA6xJ,SAA7xJ,EAAwyJ,aAAxyJ,EAAuzJ,cAAvzJ,EAAu0J,SAAv0J,EAAk1J,UAAl1J,EAA81J,MAA91J,EAAs2J,UAAt2J,EAAk3J,IAAl3J,EAAw3J,MAAx3J,EAAg4J,KAAh4J,EAAu4J,KAAv4J,EAA84J,KAA94J,EAAq5J,YAAr5J,EAAm6J,MAAn6J,EAA26J,OAA36J,EAAo7J,QAAp7J,EAA87J,WAA97J,EAA28J,QAA38J,EAAq9J,eAAr9J,EAAs+J,OAAt+J,EAA++J,UAA/+J,EAA2/J,QAA3/J,EAAqgK,WAArgK,EAAkhK,QAAlhK,EAA4hK,OAA5hK,EAAqiK,KAAriK,EAA4iK,MAA5iK,EAAojK,OAApjK,EAA6jK,UAA7jK,EAAykK,YAAzkK,EAAulK,OAAvlK,EAAgmK,QAAhmK,EAA0mK,SAA1mK,EAAqnK,UAArnK,EAAioK,SAAjoK,EAA4oK,MAA5oK,EAAopK,MAAppK,EAA4pK,UAA5pK,EAAwqK,OAAxqK,EAAirK,MAAjrK,EAAyrK,SAAzrK,EAAosK,MAApsK,EAA4sK,OAA5sK,EAAqtK,WAArtK,EAAkuK,SAAluK,EAA6uK,KAA7uK,EAAovK,MAApvK,EAA4vK,MAA5vK,CAA5B;;AAEA;AACA,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAAUC,UAAV,EAAsB;AACjD,QAAM,IAAIC,KAAJ,CAAU,iBAAiBD,UAAjB,GAA8B,sDAAxC,CAAN;AACD,CAFD;;AAIA,IAAME,iBAAiB;AACrBC,WAAS,EADY;AAErBC,WAAS,QAFY;;AAIrBC,cAJqB,wBAIRC,MAJQ,EAIA;AACnBA,aAAS,KAAKC,eAAL,CAAqBD,MAArB,CAAT;AACA,WAAO,CACL,SADK,EAEL,oBAFK,EAGL,0BAHK,EAIL,kBAJK,EAKL,OALK,EAML,iEANK,EAM8DE,gBAAgBF,MAAhB,CAN9D,EAMuF,GANvF,EAOL,uBAPK,EAQL,wBARK,EAQqBE,gBAAgB,iBAAiBF,MAAjB,GAA0B,+CAA1C,CARrB,EAQiH,GARjH,EASL,wBATK,EASqBE,gBAAgB,wBAAwBF,MAAxC,CATrB,EASsE,GATtE,EAUL,wBAVK,EAUqBE,gBAAgB,2BAA2BF,MAA3C,CAVrB,EAUyE,GAVzE,EAWL,wBAXK,EAWqBE,gBAAgB,0BAA0BF,MAA1C,CAXrB,EAWwE,GAXxE,EAYL,wBAZK,EAYqBE,gBAAgB,iCAAiCF,MAAjD,CAZrB,EAY+E,GAZ/E,EAaL,wBAbK,EAaqBE,gBAAgB,mCAAmCF,MAAnD,CAbrB,EAaiF,GAbjF,EAcL,wBAdK,EAcqBE,gBAAgB,8BAA8BF,MAA9C,CAdrB,EAc4E,GAd5E,EAeL,wBAfK,EAeqBE,gBAAgB,6BAA6BF,MAA7C,CAfrB,EAe2E,GAf3E;AAgBL;AACA;AACA;AACA,4BAnBK,EAmBqBE,gBAAgB,gBAAgBF,MAAhB,GAAyB,2BAAzC,CAnBrB,EAmB4F,GAnB5F,EAoBL,WApBK,EAqBL,MArBK,EAsBLG,IAtBK,CAsBA,GAtBA,CAAP;AAuBD,GA7BoB;AA+BrBC,kBA/BqB,8BA+BF;AACjB,WAAO,8FAAP;AACD,GAjCoB;AAmCrBC,YAnCqB,sBAmCVC,SAnCU,EAmCC;AACpB,WAAO,eAAe,KAAKC,UAAL,CAAgBD,SAAhB,CAAf,GAA4C,UAAnD;AACD,GArCoB;AAuCrBE,cAvCqB,0BAuCN;AACb,WAAO,8EAAP;AACD,GAzCoB;AA4CrBC,kBA5CqB,4BA4CJH,SA5CI,EA4COI,UA5CP,EA4CmBb,OA5CnB,EA4C4B;AAAA;;AAC/C,QAAIc,QAAQ,+CAAZ;AACA,QAAMC,gBAAgB,2HAAtB;AAAA,QACEC,OAAO,IADT;AAEA,QAAMC,cAAc,EAApB;AAAA,QAAwBC,cAAc,EAAtC;AAAA,QAA0CC,UAAU,EAApD;AAAA,QAAwDC,WAAW,EAAnE;;AAEA,QAAMC,SAAS;AACbC,aAAO,KAAKZ,UAAL,CAAgBD,SAAhB;AADM,KAAf;;AAIA,QAAMc,QAAQ,uCAAd,CAV+C,CAUQ;AACvD,QAAMC,WAAW,kCAAjB,CAX+C,CAWM;;AAErD;AACA,SAAK,IAAIC,IAAT,IAAiBZ,UAAjB,EAA6B;AAC3B,UAAIA,WAAWa,cAAX,CAA0BD,IAA1B,CAAJ,EAAqC;AACnC,YAAME,WAAWd,WAAWY,IAAX,CAAjB;AACA,YAAIG,cAAJ;;AAEAH,eAAO,KAAKrB,eAAL,CAAqBqB,IAArB,CAAP;;AAEA;AACA,YAAIrC,MAAMI,CAAN,CAAQqC,QAAR,CAAiBF,QAAjB,EAA2B,aAA3B,CAAJ,EAA+C;AAC7C;AACAV,sBAAYa,IAAZ,CAAiBL,IAAjB;AACA,cAAIrC,MAAMI,CAAN,CAAQqC,QAAR,CAAiBF,QAAjB,EAA2B,YAA3B,CAAJ,EAA8C;AAC5CC,oBAAQD,SAASC,KAAT,CAAe,uBAAf,CAAR;AACAT,oBAAQW,IAAR,CAAaL,OAAO,GAAP,GAAaG,MAAM,CAAN,EAASG,OAAT,CAAiB,aAAjB,EAAgC,EAAhC,CAA1B;;AAEAb,wBAAYO,IAAZ,IAAoBG,MAAM,CAAN,EAASG,OAAT,CAAiBR,KAAjB,EAAwB,UAACK,KAAD,EAAQN,KAAR,EAAeU,MAAf,EAA0B;AACpE;AACA,kBAAIvB,YAAY,EAAhB;AACA,kBAAIrB,MAAMI,CAAN,CAAQyC,aAAR,CAAsBX,KAAtB,CAAJ,EAAkC;AAChC,oBAAIA,MAAMnB,MAAV,EAAkB;AAChBM,8BAAY,MAAKC,UAAL,CAAgBY,MAAMnB,MAAtB,IAAgC,GAA5C;AACD;AACDM,6BAAa,MAAKC,UAAL,CAAgBY,MAAMb,SAAtB,CAAb;AACD,eALD,MAKO;AACLA,4BAAYrB,MAAMI,CAAN,CAAQqC,QAAR,CAAiBlC,mBAAjB,EAAsC2B,MAAMY,WAAN,EAAtC,IAA6D,MAAMZ,KAAN,GAAc,GAA3E,GAAiFA,KAA7F;AACD;;AAED,qCAAqBb,SAArB,UAAmC,MAAKL,eAAL,CAAqB4B,MAArB,CAAnC;AACD,aAbmB,CAApB;AAcD,WAlBD,MAkBO;AACLb,oBAAQW,IAAR,CAAaL,OAAO,GAAP,GAAaE,SAASI,OAAT,CAAiB,aAAjB,EAAgC,EAAhC,EAAoCI,IAApC,EAA1B;AACD;AAEF,SAzBD,MAyBO,IAAI/C,MAAMI,CAAN,CAAQqC,QAAR,CAAiBF,QAAjB,EAA2B,YAA3B,CAAJ,EAA8C;;AAEnD;AACAC,kBAAQD,SAASC,KAAT,CAAe,uBAAf,CAAR;AACAT,kBAAQW,IAAR,CAAaL,OAAO,GAAP,GAAaG,MAAM,CAAN,CAA1B;;AAEAV,sBAAYO,IAAZ,IAAoBG,MAAM,CAAN,EAASG,OAAT,CAAiBR,KAAjB,EAAwB,UAACK,KAAD,EAAQN,KAAR,EAAeU,MAAf,EAA0B;AACpE;AACA,gBAAIvB,YAAY,EAAhB;AACA,gBAAIrB,MAAMI,CAAN,CAAQyC,aAAR,CAAsBX,KAAtB,CAAJ,EAAkC;AAChC,kBAAIA,MAAMnB,MAAV,EAAkB;AAChBM,4BAAY,MAAKC,UAAL,CAAgBY,MAAMnB,MAAtB,IAAgC,GAA5C;AACD;AACDM,2BAAa,MAAKC,UAAL,CAAgBY,MAAMb,SAAtB,CAAb;AACD,aALD,MAKO;AACLA,0BAAYrB,MAAMI,CAAN,CAAQqC,QAAR,CAAiBlC,mBAAjB,EAAsC2B,MAAMY,WAAN,EAAtC,IAA6D,MAAMZ,KAAN,GAAc,GAA3E,GAAiFA,KAA7F;AACD;;AAED,mCAAqBb,SAArB,UAAmC,MAAKL,eAAL,CAAqB4B,MAArB,CAAnC;AACD,WAbmB,CAApB;AAcD,SApBM,MAoBA,IAAI5C,MAAMI,CAAN,CAAQqC,QAAR,CAAiBF,QAAjB,EAA2B,OAA3B,CAAJ,EAAyC;AAC9C;AACAC,kBAAQD,SAASC,KAAT,CAAe,kBAAf,CAAR;AACAT,kBAAQW,IAAR,CAAaL,OAAO,GAAP,GAAaG,MAAM,CAAN,CAA1B;AACAA,gBAAM,CAAN,IAAWA,MAAM,CAAN,EAASG,OAAT,CAAiB,eAAjB,EAAkCN,IAAlC,CAAX;AACA,cAAMW,YAAYR,MAAM,CAAN,EAASG,OAAT,CAAiBP,QAAjB,EAA2B,UAACI,KAAD,EAAQI,MAAR,EAAgBK,SAAhB,EAA8B;AACzE,+BAAiB,MAAKjC,eAAL,CAAqB4B,MAArB,CAAjB,SAAiDK,SAAjD;AACD,WAFiB,CAAlB;;AAIAjB,mBAASU,IAAT,CAAcM,SAAd;AACD,SAVM,MAUA;AACLjB,kBAAQW,IAAR,CAAaL,OAAO,GAAP,GAAaE,QAA1B;AACD;AACF;AACF;;AAEDN,WAAO,YAAP,IAAuBF,QAAQb,IAAR,CAAa,IAAb,CAAvB;;AAEA,QAAMgC,WAAWrB,YAAYsB,GAAZ,CAAiB,cAAM;AACtC,aAAO,MAAKnC,eAAL,CAAqBoC,EAArB,CAAP;AACD,KAFgC,CAE9BC,IAF8B,CAEzB,IAFyB,CAAhB,EAEFnC,IAFE,CAEG,IAFH,CAAjB;;AAIA,QAAIgC,SAASI,MAAT,GAAkB,CAAtB,EAAyB;;AAEvB,UAAIC,iBAAiB,QAAKtB,OAAOC,KAAZ,GAAoBgB,QAApB,EAA+BP,OAA/B,CAAuC,UAAvC,EAAmD,EAAnD,CAArB,CAFuB,CAEsD;;AAE7E;AACA,UAAIY,eAAeD,MAAf,GAAwB,EAA5B,EAAgC;AAC9BC,yBAAiB,QAAKtB,OAAOC,KAAZ,GAAoB7B,MAAM6C,QAAN,CAApB,EAAsCP,OAAtC,CAA8C,UAA9C,EAA0D,EAA1D,CAAjB;AACA,YAAIY,eAAeD,MAAf,GAAwB,EAA5B,EAAgC;AAC9B,cAAME,UAAUnD,MAAS4B,OAAOC,KAAhB,SAAyBgB,QAAzB,CAAhB;AACAK,2BAAiB,QAAKC,OAAL,EAAeb,OAAf,CAAuB,UAAvB,EAAmC,EAAnC,CAAjB;AACD;AACF;;AAEDV,aAAOR,UAAP,IAAqB,iBAAiB8B,cAAjB,GAAkC,gBAAlC,GAAqDL,QAArD,GAAgE,GAArF;AACD;;AAED;AACA,SAAK,IAAMO,IAAX,IAAmB3B,WAAnB,EAAgC;AAC9B,UAAIA,YAAYQ,cAAZ,CAA2BmB,IAA3B,CAAJ,EAAsC;;AAEpC;AACA,YAAI3B,YAAY2B,IAAZ,EAAkBC,OAAlB,CAA0B,qBAA1B,IAAmD,CAAE,CAAzD,EAA4D;AAC1D5B,sBAAY2B,IAAZ,IAAoB3B,YAAY2B,IAAZ,EAAkBd,OAAlB,CAA0B,qBAA1B,EAAiD,EAAjD,CAApB;AACD;;AAED,YAAIgB,SAAS,QAAK1B,OAAOC,KAAZ,GAAoBuB,IAApB,EAA2Bd,OAA3B,CAAmC,OAAnC,EAA4C,EAA5C,CAAb;AACA;AACA,YAAIgB,OAAOL,MAAP,GAAgB,EAApB,EAAwB;AACtBK,mBAAS,QAAK1B,OAAOC,KAAZ,GAAoB7B,MAAMoD,IAAN,CAApB,EAAkCd,OAAlC,CAA0C,OAA1C,EAAmD,EAAnD,CAAT;AACA;AACA,cAAIgB,OAAOL,MAAP,GAAgB,EAApB,EAAwB;AACtB,gBAAME,WAAUnD,MAAS4B,OAAOC,KAAhB,SAAyBuB,IAAzB,CAAhB;AACAE,qBAAS,QAAKH,QAAL,EAAeb,OAAf,CAAuB,OAAvB,EAAgC,EAAhC,CAAT;AACD;AACF;;AAEDV,eAAOR,UAAP,IAAqB,iBAAiBkC,MAAjB,GAA0B,gBAA1B,GAA6C,KAAK3C,eAAL,CAAqByC,IAArB,CAA7C,GAA0E,IAA1E,GAAiF3B,YAAY2B,IAAZ,CAAtG;AACD;AACF;;AAED,QAAIzB,SAASsB,MAAT,GAAkB,CAAtB,EAAyB;AACvBrB,aAAOR,UAAP,IAAqB,OAAOO,SAASd,IAAT,CAAc,IAAd,CAA5B;AACD;;AAED;AACA,QAAIN,WAAWA,QAAQgD,OAAnB,IAA8BhD,QAAQgD,OAAR,CAAgBN,MAAhB,GAAyB,CAA3D,EAA8D;;AAE5D,UAAMO,cAAc,EAApB;AACAjD,cAAQgD,OAAR,CAAgBE,OAAhB,CAAwB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACtC,YAAID,MAAME,MAAN,KAAiB,IAArB,EAA2B;AACzB;AACA,cAAMC,SAASH,MAAMG,MAAN,CAAaf,GAAb,CAAiB,iBAAS;AACvC,gBAAI,OAAOgB,KAAP,KAAiB,QAArB,EAA+B;AAC7B,qBAAOA,KAAP;AACD,aAFD,MAEO;AACL,qBAAOA,MAAMC,SAAb;AACD;AACF,WANc,CAAf;;AAQA;AACA,cAAIC,cAAc,IAAlB;AACA,cAAIzD,QAAQ0D,UAAZ,EAAwB;AACtB,gBAAMC,OAAOC,OAAOD,IAAP,CAAY3D,QAAQ0D,UAApB,CAAb;;AAEA,iBAAK,IAAIG,WAAW,CAApB,EAAuBA,WAAWF,KAAKjB,MAAvC,EAA+CmB,UAA/C,EAA2D;AACzD,kBAAMC,aAAa9D,QAAQ0D,UAAR,CAAmBC,KAAKE,QAAL,CAAnB,CAAnB;;AAEA,kBAAIC,WAAWR,MAAX,CAAkBZ,MAAlB,KAA6BY,OAAOZ,MAAxC,EAAgD;AAC9C;AACA,qBAAK,IAAIqB,IAAI,CAAb,EAAgBA,IAAID,WAAWR,MAAX,CAAkBZ,MAAtC,EAA8CqB,GAA9C,EAAmD;AACjD,sBAAMR,QAAQO,WAAWR,MAAX,CAAkBS,CAAlB,CAAd;;AAEA,sBAAI3E,MAAMI,CAAN,CAAQqC,QAAR,CAAiByB,MAAjB,EAAyBC,KAAzB,CAAJ,EAAqC;AACnCE,kCAAc,KAAd;AACD,mBAFD,MAEO;AACL;AACAA,kCAAc,IAAd;AACA;AACD;AACF;AACF;AACF;;AAED,gBAAIA,WAAJ,EAAiB;AACf,kBAAIO,YAAY,UAAUb,KAAV,GAAkBA,MAAMc,IAAxB,GAA+B,EAA/C;;AAEA,kBAAID,cAAc,EAAd,IAAoBA,UAAUtB,MAAV,GAAmB,EAA3C,EAA+C;AAC7CsB,4BAAY,MAAKE,6BAAL,CAAmC7C,OAAOC,KAA1C,EAAiDgC,MAAjD,CAAZ;AACD;AACD,kBAAMa,kBAAkB;AACtBF,sBAAMD,SADgB;AAEtBV;AAFsB,eAAxB;AAIA,kBAAI,EAAE,gBAAgBtD,OAAlB,CAAJ,EAAgC;AAC9BA,wBAAQ0D,UAAR,GAAqB,EAArB;AACD;;AAED1D,sBAAQ0D,UAAR,CAAmBM,SAAnB,IAAgCG,eAAhC;AACAlB,0BAAYnB,IAAZ,CAAiBsB,GAAjB;AACD,aAhBD,MAgBO;AACL;AACAH,0BAAYnB,IAAZ,CAAiBsB,GAAjB;AACD;AACF;AACF;AACF,OAzDD;AA0DAH,kBAAYC,OAAZ,CAAoB,eAAO;AACzBlD,gBAAQgD,OAAR,CAAgBoB,MAAhB,CAAuBhB,GAAvB,EAA4B,CAA5B;AACD,OAFD;AAGD;;AAED,QAAIpD,WAAW,CAAC,CAACA,QAAQ0D,UAAzB,EAAqC;AACnCtE,YAAMI,CAAN,CAAQ6E,IAAR,CAAarE,QAAQ0D,UAArB,EAAiC,UAACY,OAAD,EAAUN,SAAV,EAAwB;AACvD,YAAIO,YAAY,KAAhB;;AAEA;AACAtD,oBAAYiC,OAAZ,CAAoB,sBAAc;AAChC;;AAEA,cAAI,CAAC9D,MAAMI,CAAN,CAAQqC,QAAR,CAAiByC,QAAQhB,MAAzB,EAAiCkB,UAAjC,CAAL,EAAmD;AACjDD,wBAAY,IAAZ;AACD;AACF,SAND;;AAQAD,gBAAQhB,MAAR,CAAeJ,OAAf,CAAuB,iBAAS;AAC9B,cAAIuB,YAAY,EAAhB;AACA,cAAI,CAACrF,MAAMI,CAAN,CAAQkF,QAAR,CAAiBnB,KAAjB,CAAL,EAA8B;AAC5BkB,wBAAYlB,MAAMC,SAAN,CAAgBzB,OAAhB,CAAwB,UAAxB,EAAoC,EAApC,CAAZ;AACD,WAFD,MAEO;AACL0C,wBAAYlB,MAAMxB,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAZ;AACD;AACD,cAAI0C,aAAa5D,UAAjB,EAA6B;AAC3B,gBAAIA,WAAW4D,SAAX,EAAsBvC,WAAtB,GAAoCY,OAApC,CAA4C,QAA5C,IAAwD,CAAC,CAA7D,EAAgE;AAC9D;AACA,kBAAM6B,gBAAgB9D,WAAW4D,SAAX,EAAsB1C,OAAtB,CAA8B,QAA9B,EAAwC,EAAxC,CAAtB;AACA;AACAV,qBAAOR,UAAP,GAAoBQ,OAAOR,UAAP,CAAkBkB,OAAlB,CAA0BlB,WAAW4D,SAAX,CAA1B,EAAiDE,aAAjD,CAApB;AACD;AACF;AACF,SAfD;;AAiBA;AACA,YAAIJ,SAAJ,EAAe;AACb,cAAI,CAACnF,MAAMI,CAAN,CAAQkF,QAAR,CAAiBV,SAAjB,CAAL,EAAkC;AAChCA,wBAAY,MAAKE,6BAAL,CAAmC7C,OAAOC,KAA1C,EAAiDgD,QAAQhB,MAAzD,CAAZ;AACD;;AAED;AACA,cAAIU,UAAUtB,MAAV,GAAmB,EAAvB,EAA2B;AACzBsB,wBAAY,MAAKE,6BAAL,CAAmC7C,OAAOC,KAA1C,EAAiDgD,QAAQhB,MAAzD,CAAZ;AACD;;AAED,cAAMsB,iBAAiBZ,UAAU9B,WAAV,EAAvB;;AAEA,cAAI9C,MAAMI,CAAN,CAAQqC,QAAR,CAAiBlC,mBAAjB,EAAsCiF,cAAtC,KAAyDA,eAAeC,MAAf,CAAsB,CAAtB,MAA6B,GAA1F,EAA+F;AAC7Fb,wBAAY,MAAMA,SAAN,GAAkB,GAA9B;AACD;;AAED,cAAMb,QAAQnD,QAAQ0D,UAAR,CAAmBY,QAAQL,IAA3B,CAAd;AACA,iBAAOjE,QAAQ0D,UAAR,CAAmBY,QAAQL,IAA3B,CAAP;AACAD,sBAAYA,UAAUjC,OAAV,CAAkB,SAAlB,EAA6B,EAA7B,CAAZ;AACAuC,kBAAQL,IAAR,GAAeD,SAAf;AACAhE,kBAAQ0D,UAAR,CAAmBM,SAAnB,IAAgCb,KAAhC;AACA9B,iBAAOR,UAAP,IAAqB,kBAAkBmD,SAAlB,GAA8B,WAA9B,GAA4C5E,MAAMI,CAAN,CAAQ+C,GAAR,CAAY+B,QAAQhB,MAApB,EAA4BtC,KAAKZ,eAAjC,EAAkDE,IAAlD,CAAuD,IAAvD,CAA5C,GAA2G,GAAhI;AACD;AACF,OArDD;AAsDD;;AAEDQ,YAAQ1B,MAAMI,CAAN,CAAQsF,QAAR,CAAiBhE,KAAjB,EAAwBO,MAAxB,EAAgCc,IAAhC,EAAR;AACA;AACArB,YAAQA,MAAMiB,OAAN,CAAc,IAAd,EAAoB,IAApB,CAAR;AACAV,WAAOT,gBAAP,GAA0BE,KAA1B;;AAEA,WAAO1B,MAAMI,CAAN,CAAQsF,QAAR,CAAiB/D,aAAjB,EAAgCM,MAAhC,EAAwCc,IAAxC,EAAP;AACD,GAnToB;;;AAqTrB;;;AAGA4C,kBAxTqB,4BAwTJtE,SAxTI,EAwTO;AAC1B,QAAIuE,UAAavE,SAAb,SAAJ;AACA,QAAIuE,QAAQtC,MAAR,GAAiB,EAArB,EAAyB;AACvBsC,gBAAUvF,MAAMuF,OAAN,CAAV;AACD;;AAED,QAAIA,QAAQlC,OAAR,CAAgB,GAAhB,IAAuB,CAAC,CAA5B,EAA+B;AAC7B,UAAMmC,MAAMD,QAAQE,KAAR,CAAc,GAAd,CAAZ;AACAD,UAAI,CAAJ,IAASA,IAAI,CAAJ,EAAOlD,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAT;;AAEA,aAAOkD,IAAI3E,IAAJ,CAAS,GAAT,CAAP;AACD;;AAED,WAAO0E,QAAQjD,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAP;AACD,GAtUoB;;;AAwUrB;;;;AAIAmC,+BA5UqB,yCA4US5C,KA5UT,EA4UgBgD,OA5UhB,EA4UyB;;AAE5C,QAAIN,YAAY,UAAO1C,KAAP,GAAegD,QAAQhE,IAAR,CAAa,EAAb,CAAf,EAAkCyB,OAAlC,CAA0C,UAA1C,EAAsD,EAAtD,EAA0DoD,WAA1D,EAAhB;;AAEA;AACA,QAAInB,UAAUtB,MAAV,GAAmB,EAAvB,EAA2B;AACzBsB,kBAAY,UAAO1C,KAAP,GAAe7B,MAAM6E,QAAQhE,IAAR,CAAa,EAAb,CAAN,CAAf,EAAyCyB,OAAzC,CAAiD,UAAjD,EAA6D,EAA7D,EAAiEoD,WAAjE,EAAZ;;AAEA,UAAInB,UAAUtB,MAAV,GAAmB,EAAvB,EAA2B;AACzB,YAAME,UAAUnD,MAAS6B,KAAT,SAAkBgD,QAAQhE,IAAR,CAAa,EAAb,CAAlB,CAAhB;AACA0D,oBAAY,UAAOpB,OAAP,EAAiBb,OAAjB,CAAyB,UAAzB,EAAqC,EAArC,EAAyCoD,WAAzC,EAAZ;AACD;AACF;;AAED,WAAOnB,SAAP;AACD,GA3VoB;AA6VrBoB,oBA7VqB,8BA6VF3E,SA7VE,EA6VSN,MA7VT,EA6ViB;AACpC;AACA,QAAMkF,MAAM,CAAC,6GAAD,EACV,0FADU,EAEV,2BAFU,EAGV,kHAHU,EAIVlF,SAAS,4EAAT,GAAwF,0CAJ9E,EAKV,yFALU,EAMV,qCANU,EAM6BG,IAN7B,CAMkC,EANlC,CAAZ;;AAQA,QAAMgF,gBAAgBlG,MAAMI,CAAN,CAAQyC,aAAR,CAAsBxB,SAAtB,IAAmCA,UAAUA,SAA7C,GAAyDA,SAA/E;;AAEA,QAAMY,SAAS;AACbZ,iBAAW6E,aADE;AAEbnF;AAFa,KAAf;;AAKA,WAAOf,MAAMI,CAAN,CAAQsF,QAAR,CAAiBO,GAAjB,EAAsBhE,MAAtB,EAA8Bc,IAA9B,EAAP;AACD,GA/WoB;AAiXrBoD,kBAjXqB,4BAiXJC,MAjXI,EAiXIC,KAjXJ,EAiXW;AAC9B,QAAM3E,QAAQ,kDAAd;AACA,WAAO1B,MAAMI,CAAN,CAAQsF,QAAR,CAAiBhE,KAAjB,EAAwB;AAC7B0E,oBAD6B;AAE7BC;AAF6B,KAAxB,CAAP;AAID,GAvXoB;AA2XrBC,sBA3XqB,gCA2XAjF,SA3XA,EA2XW;AAC9B,mGAA4FA,UAAUyB,WAAV,EAA5F;AACD,GA7XoB;AA+XrByD,iBA/XqB,6BA+XH;;AAEhB;AACA;;AAEA,QAAMC,WAAW,yEAAjB;;AAEA,QAAMP,MAAM,CAAC,yDAAD,EACV,SADU,EAEV,0EAFU,EAGV,SAHU,EAIV,uCAJU,EAKV,SALU,EAMV,yFANU,EAOV,4HAPU,EAQV,qCARU,EASV,qCATU,EAUV,iGAVU,EAWV,OAXU,EAYV,MAZU,EAaV,gBAbU,EAcV,QAdU;AAeV;AACA,yEAhBU,EAiBV,0DAjBU,EAkBV,8BAlBU,EAmBV,uBAnBU,EAoBV,iEApBU,EAoByD/E,IApBzD,CAoB8D,EApB9D,CAAZ;;AAsBA,QAAMe,SAAS;AACbuE;AADa,KAAf;;AAIA,WAAOxG,MAAMI,CAAN,CAAQsF,QAAR,CAAiBO,GAAjB,EAAsBhE,MAAtB,CAAP;AACD,GAjaoB;AAmarBwE,gBAnaqB,0BAmaNpF,SAnaM,EAmaK;AACxB,QAAIa,QAAQ,EAAZ;AACAA,YAAQ,KAAKZ,UAAL,CAAgBD,SAAhB,CAAR;;AAEA,QAAMK,QAAQ,CAAC,QAAD,EACZ,oEADY,EAEZ,qDAFY,EAGZ,qBAHY,CAAd;;AAKA,QAAMO,SAAS;AACbC;AADa,KAAf;;AAIA,WAAOlC,MAAMI,CAAN,CAAQsF,QAAR,CAAiBhE,MAAMR,IAAN,CAAW,EAAX,CAAjB,EAAiCe,MAAjC,EAAyCc,IAAzC,EAAP;AACD,GAjboB;AAmbrB2D,oBAnbqB,8BAmbFrF,SAnbE,EAmbST,OAnbT,EAmbkB;AACrCA,cAAUA,WAAW,EAArB;;AAEA;AACA,WAAOA,QAAQ+F,QAAf;AACA,QAAMC,oBAAoB,KAAKC,oBAAL,CAA0BxF,SAA1B,EAAqCT,OAArC,CAA1B;;AAEA,QAAI,OAAOS,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,kBAAY,KAAKyF,gBAAL,CAAsBzF,SAAtB,CAAZ;AACD,KAFD,MAEO;AACLA,kBAAY,KAAKC,UAAL,CAAgBD,SAAhB,CAAZ;AACD;;AAED,4BAAsBA,SAAtB,aAAuCuF,iBAAvC;AACD,GAjcoB;AAmcrBG,gBAncqB,0BAmcN7E,KAncM,EAmcC8E,GAncD,EAmcMzE,QAncN,EAmcgB;AACnC;AACA;AACAA,aAAS4B,KAAT,GAAiB6C,GAAjB;;AAEA,QAAMtF,QAAQ,iDAAd;AAAA,QACI0C,YAAYpE,MAAMI,CAAN,CAAQsF,QAAR,CAAiB,8BAAjB,EAAiD;AAC7DsB,cAD6D;AAE7DC,kBAAY,KAAKC,cAAL,CAAoB3E,QAApB,EAA8B;AACxC4E,iBAAS;AAD+B,OAA9B,EAETxE,OAFS,CAED,eAFC,EAEgBqE,GAFhB,EAEqBrE,OAFrB,CAE6B,IAF7B,EAEmC,GAFnC;AAFiD,KAAjD,CADhB;;AAQA,WAAO3C,MAAMI,CAAN,CAAQsF,QAAR,CAAiBhE,KAAjB,EAAwB;AAC7BQ,aAAO,KAAKZ,UAAL,CAAgBY,KAAhB,CADsB;AAE7BkC;AAF6B,KAAxB,CAAP;AAID,GApdoB;AAsdrBgD,mBAtdqB,6BAsdH/F,SAtdG,EAsdQgG,aAtdR,EAsduB;AAC1C,QAAM3F,QAAQ,+DAAd;;AAEA,WAAO1B,MAAMI,CAAN,CAAQsF,QAAR,CAAiBhE,KAAjB,EAAwB;AAC7BL,iBAAW,KAAKC,UAAL,CAAgBD,SAAhB,CADkB;AAE7BgG;AAF6B,KAAxB,CAAP;AAID,GA7doB;AA+drBC,mBA/dqB,6BA+dHjG,SA/dG,EA+dQI,UA/dR,EA+doB;AACvC,QAAM8F,cAAc,oDAApB;AACA,QAAMC,aAAa,2CAAnB;AACA,QAAI9F,QAAQ,EAAZ;AACA,QAAM+F,aAAa,EAAnB;AAAA,QAAuBC,mBAAmB,EAA1C;;AAEA,SAAK,IAAML,aAAX,IAA4B5F,UAA5B,EAAwC;AACtC,UAAIwF,aAAaxF,WAAW4F,aAAX,CAAjB;AACA,UAAIJ,WAAWzE,KAAX,CAAiB,YAAjB,CAAJ,EAAoC;AAClCkF,yBAAiBhF,IAAjB,CAAsB1C,MAAMI,CAAN,CAAQsF,QAAR,CAAiB,+DAAjB,EAAkF;AACtG/B,kBAAQ0D,gBAAgB,cAD8E;AAEtGM,oBAAUN,aAF4F;AAGtGJ,sBAAYA,WAAWtE,OAAX,CAAmB,mBAAnB,EAAwC,EAAxC;AAH0F,SAAlF,CAAtB;AAKD,OAND,MAMO;AACL,YAAIsE,WAAWvD,OAAX,CAAmB,OAAnB,IAA8B,CAAC,CAAnC,EAAsC;AACpCuD,uBAAaA,WAAWtE,OAAX,CAAmB,IAAnB,EAAyB,IAAzB,CAAb;AACD;AACD8E,mBAAW/E,IAAX,CAAgB1C,MAAMI,CAAN,CAAQsF,QAAR,CAAiB,mCAAjB,EAAsD;AACpEiC,oBAAUN,aAD0D;AAEpEJ;AAFoE,SAAtD,CAAhB;AAID;AACF;;AAED,QAAIW,YAAY,WACZ,yCADY,GAEZ,YAFY,GAGZ,mBAHY,GAIZ,6CAJY,GAKZ,4CALY,CAKiC;AALjC,MAMZ,OANY,GAOZ,SAPY,GAQZ,UARY,GASZ,OATJ;;AAWA,QAAIC,aAAa,EAAjB;AACA,QAAIJ,WAAWnE,MAAf,EAAuB;AACrBuE,oBAAcJ,WAAWvG,IAAX,CAAgB,IAAhB,CAAd;AACA2G,oBAAcH,iBAAiBpE,MAAjB,GAA0B,GAA1B,GAAgC,EAA9C;AACD;AACD,QAAIoE,iBAAiBpE,MAArB,EAA6B;AAC3BuE,oBAAc,oBAAoBH,iBAAiBxG,IAAjB,CAAsB,IAAtB,CAAlC;AACA;AACAQ,cAAQ8F,UAAR;AACD,KAJD,MAIO;AACL9F,cAAQ6F,WAAR;AACD;;AAED7F,YAAQ1B,MAAMI,CAAN,CAAQsF,QAAR,CAAiBhE,KAAjB,EAAwB;AAC9BL,iBAAW,KAAKC,UAAL,CAAgBD,SAAhB,CADmB;AAE9BK,aAAOmG;AAFuB,KAAxB,CAAR;;AAKA;AACA;AACA,QAAMC,cAAcpG,MAAMiB,OAAN,CAAc,UAAd,EAA0B,EAA1B,EAA8BA,OAA9B,CAAsC,MAAtC,EAA8C,EAA9C,CAApB;;AAEA,WAAOiF,YAAY5H,MAAMI,CAAN,CAAQsF,QAAR,CAAiBkC,SAAjB,EAA4B;AAC7CA,iBAAWlG,KADkC;AAE7CoG;AAF6C,KAA5B,CAAnB;AAID,GA7hBoB;AA+hBrBC,mBA/hBqB,6BA+hBH1G,SA/hBG,EA+hBQ2G,UA/hBR,EA+hBoBvG,UA/hBpB,EA+hBgC;AACnD,QAAMC,QAAQ,0EAAd;AAAA,QACIuG,UAAUzD,OAAOD,IAAP,CAAY9C,UAAZ,EAAwB,CAAxB,CADd;;AAGA,WAAOzB,MAAMI,CAAN,CAAQsF,QAAR,CAAiBhE,KAAjB,EAAwB;AAC7BL,iBAAW,KAAKC,UAAL,CAAgBD,SAAhB,CADkB;AAE7B+E,cAAQ4B,UAFqB;AAG7B3B,aAAO4B;AAHsB,KAAxB,CAAP;AAKD,GAxiBoB;;;AA0iBrB;;;;;AAKAC,aA/iBqB,uBA+iBT7G,SA/iBS,EA+iBE8G,YA/iBF,EA+iBgBC,YA/iBhB,EA+iB8BC,KA/iB9B,EA+iBqCC,aA/iBrC,EA+iBoD1H,OA/iBpD,EA+iB6D;AAChF,QAAIS,aAAY8G,YAAZ,IAA2BC,YAA3B,IAA0CC,KAA1C,IAAkDC,aAAlD,IAAkE1H,OAAtE,EAA+E;AAC7E;AACD;AACD,UAAM,IAAIF,KAAJ,CAAU,iBAAV,CAAN;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCD,GAvlBoB;;;AAylBrB;;;AAGA6H,aA5lBqB,uBA4lBTrG,KA5lBS,EA4lBFsG,SA5lBE,EA4lBSC,eA5lBT,EA4lB0B7H,OA5lB1B,EA4lBmC;AAAA;;AACtDA,cAAUA,WAAW,EAArB;AACAR,MAAEsI,QAAF,CAAW9H,OAAX,EAAoB,KAAKA,OAAzB;;AAEA,QAAI+H,aAAa,qEAAjB;AAAA,QACIC,aAAa,2CADjB;AAAA,QAEI1E,SAAS,EAFb;AAAA,QAGIjC,SAAS,EAHb;AAAA,QAIIJ,cAAc,EAJlB;AAAA,QAKIgH,oBAAoB,EALxB;AAAA,QAMIC,gBAAgB,KAAKxH,UAAL,CAAgBY,KAAhB,CANpB;AAAA,QAOI6G,mBAAmB,EAPvB;AAQA,QAAI/B,YAAJ;AAAA,QACItF,cADJ;AAAA,QAEIsH,cAFJ;;AAMA;AACA,QAAMC,iBAAiB,yEAAvB;;AAEA,QAAIR,eAAJ,EAAqB;;AAEnB;AACA,UAAMlE,OAAOC,OAAOD,IAAP,CAAYkE,eAAZ,CAAb;AACA,UAAIzE,MAAM,CAAV;;AAEA,aAAOA,MAAMO,KAAKjB,MAAlB,EAA0B;AACxB,YAAM4F,eAAe3E,KAAKP,GAAL,CAArB;AACA,YAAMmF,iBAAiBV,gBAAgBS,YAAhB,CAAvB;AACA,YAAIC,eAAe/D,UAAnB,EAA+B;AAC7BvD,sBAAYa,IAAZ,CAAiByG,cAAjB;AAED;AACDnF;AACD;;AAEDhE,YAAMI,CAAN,CAAQ6E,IAAR,CAAawD,eAAb,EAA8B,UAACrE,SAAD,EAAY4C,GAAZ,EAAoB;AAChD6B,0BAAkB7B,GAAlB,IAAyB5C,SAAzB;AACA,YAAIA,UAAUD,KAAd,EAAqB;AACnB0E,4BAAkBzE,UAAUD,KAA5B,IAAqCC,SAArC;AACD;AACF,OALD;AAMD;;AAED,QAAI,KAAKgF,QAAL,CAAcC,QAAd,CAAuB,kBAAvB,KAA8CzI,QAAQ0I,WAA1D,EAAuE;AACrEX,oBAAc,uBAAuB/H,QAAQ0I,WAA7C;AACAV,oBAAc,uBAAuBhI,QAAQ0I,WAA7C;AACD;;AAEDd,gBAAYxI,MAAMuJ,wBAAN,CAA+Bf,SAA/B,EAA0C,KAAK5H,OAAL,CAAa4I,QAAvD,CAAZ;AACA,SAAKxC,GAAL,IAAYwB,SAAZ,EAAuB;AACrB,UAAIA,UAAUlG,cAAV,CAAyB0E,GAAzB,CAAJ,EAAmC;AACjCgC,gBAAQR,UAAUxB,GAAV,CAAR;AACA9C,eAAOxB,IAAP,CAAY,KAAK1B,eAAL,CAAqBgG,GAArB,CAAZ;;AAEA;AACA,YAAI6B,qBAAqBA,kBAAkB7B,GAAlB,CAArB,IAA+C6B,kBAAkB7B,GAAlB,EAAuByC,aAAvB,KAAyC,IAAxF,IAAgG,CAACT,KAArG,EAA4G;AAC1G/G,iBAAOS,IAAP,CAAY,SAAZ;AAED,SAHD,MAGO;AACL,cAAImG,qBAAqBA,kBAAkB7B,GAAlB,CAArB,IAA+C,CAAC6B,kBAAkB7B,GAAlB,EAAuB0C,SAAvE,IAAoFV,MAAM1F,MAAN,KAAiB,CAAzG,EAA4G;AAC1G;AACA0F,oBAAQ,GAAR;AACD;AACD/G,iBAAOS,IAAP,CAAY,KAAKiH,MAAL,CAAYX,KAAZ,EAAoBH,qBAAqBA,kBAAkB7B,GAAlB,CAAtB,IAAiD4C,SAApE,EAA+E,EAAEzC,SAAS,QAAX,EAA/E,CAAZ;AACD;AACF;AACF;;AAED,QAAI/B,aAAa,EAAjB;;AAEAvD,gBAAYiC,OAAZ,CAAoB,mBAAW;AAC7B,UAAI+F,QAAQ1F,KAAR,CAAc4B,WAAd,OAAgC,KAApC,EAA2C;AACzCX,sBAAcA,WAAW9B,MAAX,GAAoB,CAApB,GAAwB,QAAxB,GAAmC,OAAjD;;AAEA,YAAMwG,8BAA4BD,QAAQE,IAAR,CAAaC,KAAb,EAA5B,MAAN;AACAjB,yBAAiBrG,IAAjB,CAAsBoH,QAAtB;AACD,OALD,MAKO;AACL1E,sBAAcA,WAAW9B,MAAX,GAAoB,CAApB,GAAwB,MAAM,OAAKtC,eAAL,CAAqB6I,QAAQ1F,KAA7B,CAA9B,GAAoE,OAAKnD,eAAL,CAAqB6I,QAAQ1F,KAA7B,CAAlF;AACA,YAAM2F,mBAAgBD,QAAQ1F,KAAxB,SAAiC0F,QAAQE,IAAR,CAAaC,KAAb,EAAjC,MAAN;AACAjB,yBAAiBrG,IAAjB,CAAsBoH,SAAtB;AACD;AACF,KAXD;;AAaA;AACA,QAAIlJ,QAAQqJ,SAAR,IAAqB7E,eAAe,EAAxC,EAA4C;AAC1C,UAAM8E,YAAY1F,OAAOD,IAAP,CAAY,KAAK4F,SAAL,CAAeC,MAA3B,CAAlB;AACA,UAAMlE,gBAAgBlG,MAAMI,CAAN,CAAQyC,aAAR,CAAsBX,KAAtB,IAA+BA,MAAMb,SAArC,GAAiDa,KAAvE;;AAEA,UAAMmI,kBAAkBH,UAAUI,IAAV,CAAe,oBAAY;AACjD,eAAO,OAAKH,SAAL,CAAeC,MAAf,CAAsBG,QAAtB,EAAgClJ,SAAhC,KAA8C6E,aAArD;AACD,OAFuB,CAAxB;;AAIA,UAAMsE,eAAe,KAAKL,SAAL,CAAeC,MAAf,CAAsBC,eAAtB,CAArB;AACA,UAAI,CAAC,CAACG,YAAD,IAAiB,CAACA,aAAaC,cAAhC,KAAmDhC,eAAvD,EAAwE;AACtE;AACA,YAAItE,QAAQsE,gBAAgBjE,OAAOD,IAAP,CAAYkE,eAAZ,EAA6B,CAA7B,CAAhB,EAAiDtE,KAA7D;;AAEA,YAAInE,MAAMI,CAAN,CAAQqC,QAAR,CAAiBlC,mBAAjB,EAAsC4D,MAAMrB,WAAN,EAAtC,CAAJ,EAAgE;AAC9D;AACAqB,kBAAQ,aAAR;AACD;AACD,YAAM2F,kBAAgB3F,KAAhB,aAAN;AACAiB,qBAAa,KAAKpE,eAAL,CAAqByH,gBAAgBjE,OAAOD,IAAP,CAAYkE,eAAZ,EAA6B,CAA7B,CAAhB,EAAiDtE,KAAtE,CAAb;AACA4E,yBAAiBrG,IAAjB,CAAsBoH,QAAtB;AACD;AACF;;AAED,QAAMY,eAAe;AACnB;AACAtF,4BAFmB;AAGnB2D,wBAAkBA,iBAAiB7H,IAAjB,CAAsB,GAAtB,CAHC;AAInBgB,aAAO4G,aAJY;AAKnBrH,kBAAYyC,OAAOhD,IAAP,CAAY,GAAZ,CALO;AAMnBe,cAAQA,OAAOf,IAAP,CAAY,GAAZ;AANW,KAArB;;AASA,QAAIN,QAAQqJ,SAAR,IAAqBS,aAAajJ,UAAlC,IAAgDiJ,aAAajJ,UAAb,CAAwB6B,MAAxB,GAAiC,CAArF,EAAwF;AACtF5B,cAAQuH,cAAR;AACAyB,mBAAa/B,UAAb,GAA0B3I,MAAMI,CAAN,CAAQsF,QAAR,CAAiBiD,UAAjB,EAA6B+B,YAA7B,CAA1B;AACD,KAHD,MAGO;AACLhJ,cAASgJ,aAAajJ,UAAb,CAAwB6B,MAAxB,GAAiCqF,UAAjC,GAA8CC,UAAvD;AACD;;AAED,WAAO5I,MAAMI,CAAN,CAAQsF,QAAR,CAAiBhE,KAAjB,EAAwBgJ,YAAxB,CAAP;AACD,GA1tBoB;;;AA6tBrB;;;;;;;;;;AAUAC,iBAvuBqB,2BAuuBLtJ,SAvuBK,EAuuBMuJ,eAvuBN,EAuuBuBhK,OAvuBvB,EAuuBgCa,UAvuBhC,EAuuB4C;AAAA;;AAC/D,QAAMC,QAAQ,uGAAd;AAAA,QACIkH,aAAa,+DADjB;AAAA,QAEIiC,SAAS,EAFb;AAAA,QAGIC,gBAAgB,EAHpB;AAIA,QAAIC,aAAa,EAAjB;;AAEA/K,UAAMI,CAAN,CAAQ0D,OAAR,CAAgB8G,eAAhB,EAAiC,yBAAiB;AAChD;AACA,UAAM1G,SAASM,OAAOD,IAAP,CAAYyG,aAAZ,CAAf;AACA,UAAI9G,OAAOZ,MAAP,KAAkB,CAAlB,IAAuB7B,WAAWyC,OAAO,CAAP,CAAX,EAAsBuF,aAA7C,IAA8DuB,cAAc9G,OAAO,CAAP,CAAd,MAA6B,IAA/F,EAAqG;AACnG6G,mBAAWrI,IAAX,CAAgBkG,UAAhB;AACA;AACD;;AAED;AACA5I,YAAMI,CAAN,CAAQ6K,MAAR,CAAeD,aAAf,EAA8B,UAAChC,KAAD,EAAQhC,GAAR,EAAgB;AAC5C,YAAI8D,cAAcpH,OAAd,CAAsBsD,GAAtB,MAA+B,CAAC,CAApC,EAAuC;AACrC,cAAIgC,UAAU,IAAV,IAAkBvH,WAAWuF,GAAX,EAAgByC,aAAtC,EACE;;AAEFqB,wBAAcpI,IAAd,CAAmBsE,GAAnB;AACD;AACF,OAPD;AAQD,KAjBD;;AAmBA;AACA,QAAI8D,cAAcxH,MAAd,GAAuB,CAA3B,EAA8B;AAC5B;AACAtD,YAAMI,CAAN,CAAQ0D,OAAR,CAAgB8G,eAAhB,EAAiC,UAACI,aAAD,EAAgBhH,GAAhB,EAAqBkH,KAArB,EAA+B;AAC9D;AACA,YAAIC,MAAM,SAAV;AACA,YAAMC,QAAQN,cAAc3H,GAAd,CAAkB,eAAO;AACrC,iBAAO,OAAKwG,MAAL,CAAYqB,cAAchE,GAAd,CAAZ,IAAkC,OAAlC,GAA4CA,GAA5C,GAAkD,GAAzD;AACD,SAFa,EAEX9F,IAFW,CAEN,GAFM,CAAd;AAGAiK,eAAOC,KAAP;AACAD,eAAOnH,MAAMkH,MAAM5H,MAAN,GAAe,CAArB,GAAyB,sBAAzB,GAAkD,YAAzD;AACAuH,eAAOnI,IAAP,CAAYyI,GAAZ;AACD,OATD;AAUAJ,iBAAWrI,IAAX,CAAgBhB,KAAhB;AAED,KAdD,MAcO;AACL;AACA,UAAI2J,gBAAgB,uDAApB;AACAA,uBAAiBN,WAAW,CAAX,CAAjB;AACAM,uBAAiB,qBAAjB;AACAA,uBAAkBN,WAAWzH,MAAX,GAAoB,CAAtC;AACA+H,uBAAiB,sGAAjB;;AAEAN,mBAAa,CAACM,aAAD,CAAb;AACAP,oBAAcpI,IAAd,CAAmB8B,OAAOD,IAAP,CAAYqG,gBAAgB,CAAhB,CAAZ,EAAgC,CAAhC,CAAnB;AACD;;AAED,QAAMF,eAAe;AACnBxI,aAAO,KAAKZ,UAAL,CAAgBD,SAAhB,CADY;AAEnBI,kBAAYqJ,cAAc3H,GAAd,CAAkB,gBAAQ;AACpC,eAAO,OAAKnC,eAAL,CAAqBqB,IAArB,CAAP;AACD,OAFW,EAETnB,IAFS,CAEJ,GAFI,CAFO;AAKnBoK,YAAMT,OAAO3J,IAAP,CAAY,GAAZ;AALa,KAArB;;AAQA,WAAOlB,MAAMI,CAAN,CAAQsF,QAAR,CAAiBqF,WAAW7J,IAAX,CAAgB,GAAhB,CAAjB,EAAuCwJ,YAAvC,CAAP;AACD,GAryBoB;AAuyBrBa,aAvyBqB,uBAuyBTlK,SAvyBS,EAuyBEgH,KAvyBF,EAuyBSzH,OAvyBT,EAuyBkB;AACrCA,cAAUA,WAAW,EAArB;;AAEA,QAAMsB,QAAQb,SAAd;AACA,QAAIT,QAAQ4K,QAAR,KAAqB,IAAzB,EAA+B;AAC7B;AACA,aAAO,oBAAoBtJ,KAA3B;AACD;;AAEDmG,YAAQ,KAAKoD,kBAAL,CAAwBpD,KAAxB,CAAR;AACA,QAAIqD,QAAQ,EAAZ;AACA,QAAMhK,QAAQ,mDAAd;;AAEA,QAAI,CAAC,CAACd,QAAQ8K,KAAd,EAAqB;AACnB;AACA;AACA;AACA,UAAIrD,MAAM/E,MAAN,GAAe,CAAnB,EAAsB;AACpB;AACAoI,gBAAQ,iEAAiE9K,QAAQ8K,KAAzE,GAAiF,GAAzF;AACD,OAHD,MAGO;AACL;AACAA,gBAAQ,mEAAmE9K,QAAQ8K,KAA3E,GAAmF,GAA3F;AACD;AACF;;AAED,QAAMhB,eAAe;AACnBgB,kBADmB;AAEnBxJ,aAAO,KAAKZ,UAAL,CAAgBY,KAAhB,CAFY;AAGnBmG;AAHmB,KAArB;;AAMA,QAAIqC,aAAarC,KAAjB,EAAwB;AACtBqC,mBAAarC,KAAb,GAAqB,YAAYqC,aAAarC,KAA9C;AACD;;AAED,WAAOrI,MAAMI,CAAN,CAAQsF,QAAR,CAAiBhE,KAAjB,EAAwBgJ,YAAxB,CAAP;AACD,GA50BoB;AA80BrBiB,kBA90BqB,4BA80BJtK,SA90BI,EA80BO;AAC1B,QAAIuK,QAAQ,EAAZ;;AAEA,QAAIxL,EAAEyC,aAAF,CAAgBxB,SAAhB,CAAJ,EAAgC;AAC9BuK,cAAQvK,UAAUN,MAAlB;AACAM,kBAAYA,UAAUA,SAAtB;AACD;;AAED,QAAM4E,MAAM,CAAC,2EAAD,EACV,yBADU,EAEV,2BAFU,EAGV,mEAHU,EAIV,2FAJU,EAKV2F,MAAMtI,MAAN,GAAe,CAAf,GAAmB,4BAA4B,KAAKuI,kBAAL,CAAwBD,KAAxB,CAA5B,GAA6D,IAAhF,GAAuF,EAL7E,EAMV,mCANU,CAAZ;;AAQA,QAAME,UAAU7F,IAAI/E,IAAJ,CAAS,EAAT,CAAhB;AACA,WAAOlB,MAAMI,CAAN,CAAQsF,QAAR,CAAiBoG,OAAjB,EAA0B;AAC/BzK;AAD+B,KAA1B,CAAP;AAGD,GAl2BoB;AAo2BrB0K,kBAp2BqB,4BAo2BJ1K,SAp2BI,EAo2BO2K,qBAp2BP,EAo2B8B;AACjD,QAAM/F,MAAM,6BAAZ;AACA,QAAIrB,YAAYoH,qBAAhB;;AAEA,QAAI,OAAOpH,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,kBAAY5E,MAAMiM,UAAN,CAAiB5K,YAAY,GAAZ,GAAkB2K,sBAAsB9K,IAAtB,CAA2B,GAA3B,CAAnC,CAAZ;AACD;;AAED,QAAMe,SAAS;AACbZ,0BADa;AAEbuD;AAFa,KAAf;;AAKA,WAAO5E,MAAMI,CAAN,CAAQsF,QAAR,CAAiBO,GAAjB,EAAsBhE,MAAtB,CAAP;AACD,GAl3BoB;AAo3BrBiF,gBAp3BqB,0BAo3BN9C,SAp3BM,EAo3BK;AAAA;;AACxB,QAAI,CAACpE,MAAMI,CAAN,CAAQyC,aAAR,CAAsBuB,SAAtB,CAAL,EAAuC;AACrCA,kBAAY;AACV2F,cAAM3F;AADI,OAAZ;AAGD;;AAED;AACA,QAAIA,UAAU8H,UAAd,EAA0B;;AAExB,UAAI9H,UAAU+H,KAAV,IAAmB/H,UAAU+H,KAAV,CAAgB9K,SAAhB,KAA8B+C,UAAU8H,UAAV,CAAqBE,KAA1E,EAAiF;AAC/E,aAAKjC,SAAL,CAAekC,GAAf,CAAmB,2DACf,6DADJ;AAEAjI,kBAAUkI,QAAV,GAAqB,EAArB;AACAlI,kBAAUuC,QAAV,GAAqB,EAArB;AACD;AACF;;AAED,QAAIjB,iBAAJ;;AAEA,QAAItB,UAAU2F,IAAV,YAA0B7J,UAAUqM,IAAxC,EAA8C;AAC5C,UAAInI,UAAU2F,IAAV,CAAe9H,MAAf,IAAyB,CAACmC,UAAUnC,MAAxC,EAAgDmC,UAAUnC,MAAV,GAAmBmC,UAAU2F,IAAV,CAAe9H,MAAlC;;AAEhD;AACAyD,iBAAWtB,UAAU2F,IAAV,CAAeC,KAAf,EAAX;AACAtE,kBAAY,8BAA8B1F,MAAMI,CAAN,CAAQ+C,GAAR,CAAYiB,UAAUnC,MAAtB,EAA8B,iBAAS;AAC/E,eAAO,OAAK0H,MAAL,CAAYX,KAAZ,CAAP;AACD,OAFyC,EAEvC9H,IAFuC,CAElC,IAFkC,CAA9B,GAEI,IAFhB;AAGA,aAAOwE,QAAP;AACD,KATD,MASO;AACL,UAAItB,UAAUqF,aAAd,EAA6B;AAC3B/D,mBAAW,uDAAX;AACD,OAFD,MAEO;AACL,YAAItB,UAAU2F,IAAV,IAAkB3F,UAAU2F,IAAV,CAAe/C,GAAf,KAAuB9G,UAAUsM,MAAV,CAAiBxF,GAA9D,EAAmE;AACjEtB,qBAAWtB,UAAU2F,IAAV,CAAeC,KAAf,EAAX;AACD,SAFD,MAEO;AACL,cAAI5F,UAAU2F,IAAd,EAAoB;AAClBrE,uBAAWtB,UAAU2F,IAAV,CAAe0C,QAAf,EAAX;AACD,WAFD,MAEO;AACL/G,uBAAW,EAAX;AACD;AACF;AACF;AACF;;AAED;AACA,QAAItB,UAAU2F,IAAV,IAAkB3F,UAAU2F,IAAV,KAAmB,MAArC,IAA+C3F,UAAU2F,IAAV,CAAe2C,OAAf,KAA2B,IAA1E,IACF1M,MAAM2M,qBAAN,CAA4BvI,UAAUwI,YAAtC,CADF,EACuD;AACrDlH,kBAAY,cAAc,KAAKiE,MAAL,CAAYvF,UAAUwI,YAAtB,CAA1B;AACD;;AAED,QAAI,CAACxI,UAAUqF,aAAf,EAA8B;AAC5B;AACA,UAAIrF,UAAUsF,SAAV,KAAwB,KAA5B,EAAmC;AACjChE,oBAAY,WAAZ;AACD,OAFD,MAEO,IAAI,CAACtB,UAAUgB,UAAX,IAAyB,CAACpF,MAAM2M,qBAAN,CAA4BvI,UAAUwI,YAAtC,CAA9B,EAAmF;AACxFlH,oBAAY,OAAZ;AACD;AACF;;AAGD,QAAItB,UAAUH,MAAV,KAAqB,IAArB,IAA6B,CAACG,UAAUgB,UAA5C,EAAwD;AACtDM,kBAAY,SAAZ;AACD;;AAED,QAAItB,UAAUgB,UAAd,EAA0B;AACxBM,kBAAY,cAAZ;AACD;;AAED,QAAItB,UAAU8H,UAAd,EAA0B;AACxBxG,kBAAY,iBAAiB,KAAKpE,UAAL,CAAgB8C,UAAU8H,UAAV,CAAqBE,KAArC,CAA7B;;AAEA,UAAIhI,UAAU8H,UAAV,CAAqBlF,GAAzB,EAA8B;AAC5BtB,oBAAY,OAAOtB,UAAU8H,UAAV,CAAqBlF,GAA5B,GAAkC,GAA9C;AACD,OAFD,MAEO;AACLtB,oBAAY,OAAO,IAAP,GAAc,GAA1B;AACD;;AAED,UAAItB,UAAUkI,QAAd,EAAwB;AACtB5G,oBAAY,gBAAgBtB,UAAUkI,QAAV,CAAmBxJ,WAAnB,EAA5B;AACD;;AAED;AACA;AACD;;AAED,WAAO4C,QAAP;AACD,GA38BoB;AA68BrBmH,iBA78BqB,2BA68BLpL,UA78BK,EA68BOb,OA78BP,EA68BgB;AACnC,QAAMkM,SAAS,EAAf;;AAEA,SAAK,IAAM9F,GAAX,IAAkBvF,UAAlB,EAA8B;AAC5B,UAAM2C,YAAY3C,WAAWuF,GAAX,CAAlB;AACA,UAAMK,gBAAgBjD,UAAUD,KAAV,IAAmB6C,GAAzC;AACA8F,aAAOzF,aAAP,IAAwB,KAAKH,cAAL,CAAoB9C,SAApB,EAA+BxD,OAA/B,EAAwC+B,OAAxC,CAAgD,eAAhD,EAAiE0E,aAAjE,CAAxB;AACD;;AAED,WAAOyF,MAAP;AACD,GAv9BoB;AAy9BrBC,wBAz9BqB,kCAy9BEC,OAz9BF,EAy9BW;AAC9B,QAAM9I,SAAS,EAAf;AACA,SAAK,IAAMW,IAAX,IAAmBmI,QAAQvL,UAA3B,EAAuC;AACrC,UAAIuL,QAAQvL,UAAR,CAAmBa,cAAnB,CAAkCuC,IAAlC,CAAJ,EAA6C;AAC3C,YAAMoC,aAAa+F,QAAQvL,UAAR,CAAmBoD,IAAnB,CAAnB;;AAEA,YAAIoC,cAAcA,WAAWwC,aAA7B,EAA4C;AAC1CvF,iBAAOxB,IAAP,CAAYmC,IAAZ;AACD;AACF;AACF;;AAED,WAAOX,MAAP;AACD,GAt+BoB;AAw+BrB+I,eAx+BqB,2BAw+BL;AACdzM,yBAAqB,eAArB;AACD,GA1+BoB;AA4+BrB0M,aA5+BqB,yBA4+BP;AACZ1M,yBAAqB,aAArB;AACD,GA9+BoB;AAg/BrB2M,eAh/BqB,2BAg/BL;AACd3M,yBAAqB,eAArB;AACD,GAl/BoB;AAo/BrB4M,gBAp/BqB,4BAo/BJ;AACf5M,yBAAqB,gBAArB;AACD,GAt/BoB;AAw/BrB6M,cAx/BqB,0BAw/BN;AACb7M,yBAAqB,cAArB;AACD,GA1/BoB;AA4/BrB8M,gBA5/BqB,4BA4/BJ;AACf9M,yBAAqB,gBAArB;AACD,GA9/BoB;;;AAggCrB;;;;AAIAqL,oBApgCqB,8BAogCFhH,IApgCE,EAogCI;;AAEvB,QAAI7E,MAAMI,CAAN,CAAQqC,QAAR,CAAiBlC,mBAAjB,EAAsCsE,KAAK/B,WAAL,EAAtC,CAAJ,EAA+D;AAC7D;AACA,aAAO+B,IAAP;AACD,KAHD,MAGO;AACL;AACA,aAAOA,KAAK/B,WAAL,EAAP;AACD;AACF,GA7gCoB;AA+gCrB9B,iBA/gCqB,2BA+gCLuM,UA/gCK,EA+gCOC,KA/gCP,EA+gCc;AACjC,QAAID,eAAe,GAAnB,EAAwB,OAAOA,UAAP;;AAExB,QAAIC,UAAU,IAAd,EAAoB;AAClB,aAAOxN,MAAMyN,QAAN,CAAeF,UAAf,EAA2B,GAA3B,CAAP;AACD,KAFD,MAEO,IAAIA,WAAW7J,OAAX,CAAmB,GAAnB,IAA0B,CAAE,CAA5B,IAAiC6J,WAAW7J,OAAX,CAAmB,IAAnB,IAA2B,CAAE,CAAlE,EAAqE;AAC1E,aAAO1D,MAAMyN,QAAN,CAAeF,UAAf,EAA2B,GAA3B,CAAP;AACD,KAFM,MAEA;AACL;;AAEA,UAAIvN,MAAMI,CAAN,CAAQqC,QAAR,CAAiBlC,mBAAjB,EAAsCgN,WAAWzK,WAAX,EAAtC,CAAJ,EAAqE;AACnE,eAAO9C,MAAMyN,QAAN,CAAeF,UAAf,EAA2B,GAA3B,CAAP;AACD;AACD,aAAOA,UAAP;AACD;AACF,GA9hCoB;AAgiCrBG,wBAhiCqB,kCAgiCExL,KAhiCF,EAgiCSU,MAhiCT,EAgiCiB;AACpC,QAAMvB,YAAYa,MAAMb,SAAN,IAAmBa,KAArC;;AAEA,QAAM+D,MAAM,CAAC,qEAAD,EACV5E,UAAUyB,WAAV,EADU,EAEV,KAFU,EAGVZ,MAAMnB,MAAN,GAAe,oBAAoB,KAAK8K,kBAAL,CAAwB3J,MAAMnB,MAA9B,CAApB,GAA4D,IAA3E,GAAkF,EAHxE,EAIV,uBAJU,EAKV6B,OAAOE,WAAP,EALU,EAMV,+CANU,EAMuC5B,IANvC,CAM4C,EAN5C,CAAZ;;AAQA,WAAO+E,GAAP;AACD,GA5iCoB;AA8iCrB0H,qBA9iCqB,+BA8iCDzL,KA9iCC,EA8iCM;AACzB;AACA,QAAMb,YAAYa,MAAMb,SAAN,IAAmBa,KAArC;AACA,QAAM+D,MAAM,CAAC,2HAAD,EACV5E,UAAUyB,WAAV,EADU,EAEV,IAFU,EAGVZ,MAAMnB,MAAN,GAAe,oBAAoB,KAAK8K,kBAAL,CAAwB3J,MAAMnB,MAA9B,CAApB,GAA4D,IAA3E,GAAkF,EAHxE,EAIV,uCAJU,EAI+BG,IAJ/B,CAIoC,EAJpC,CAAZ;;AAMA,WAAO+E,GAAP;AACD,GAxjCoB;AA2jCrB3E,YA3jCqB,sBA2jCVsM,KA3jCU,EA2jCHC,EA3jCG,EA2jCC;AACpB,QAAI3L,QAAQ,EAAZ;;AAEA,QAAI9B,EAAE0N,QAAF,CAAWF,KAAX,CAAJ,EAAuB;AACrB,UAAIA,MAAM7M,MAAV,EAAkB;AAChBmB,iBAAS,KAAKlB,eAAL,CAAqB4M,MAAM7M,MAA3B,IAAqC,GAA9C;AACD;AACD,UAAIf,MAAMI,CAAN,CAAQqC,QAAR,CAAiBlC,mBAAjB,EAAsCqN,MAAMvM,SAAN,CAAgByB,WAAhB,EAAtC,KAAwE8K,MAAMvM,SAAN,CAAgBqC,OAAhB,CAAwB,GAAxB,MAAiC,CAA7G,EAAgH;AAC9GxB,iBAAS,KAAKlB,eAAL,CAAqB4M,MAAMvM,SAA3B,EAAsC,IAAtC,CAAT;AACD,OAFD,MAEO;AACLa,iBAAS,KAAKlB,eAAL,CAAqB4M,MAAMvM,SAA3B,CAAT;AACD;AACF,KATD,MASO;AACL;AACA,UAAIrB,MAAMI,CAAN,CAAQqC,QAAR,CAAiBlC,mBAAjB,EAAsCqN,MAAM9K,WAAN,EAAtC,KAA8D8K,MAAMlK,OAAN,CAAc,GAAd,MAAuB,CAAzF,EAA4F;AAC1FxB,gBAAQ,KAAKlB,eAAL,CAAqB4M,KAArB,EAA4B,IAA5B,CAAR;AACD,OAFD,MAEO;AACL1L,gBAAQ,KAAKlB,eAAL,CAAqB4M,KAArB,CAAR;AACD;AACF;;AAED;AACA,QAAIC,EAAJ,EAAQ;AACN,UAAIA,GAAGnK,OAAH,CAAW,GAAX,IAAkB,CAAE,CAApB,IAAyBmK,GAAGnK,OAAH,CAAW,GAAX,MAAoB,CAAjD,EAAoD;AAClDxB,iBAAS,MAAM,KAAKlB,eAAL,CAAqB6M,EAArB,EAAyB,IAAzB,CAAf;AACD,OAFD,MAEO;AACL3L,iBAAS,MAAM,KAAKlB,eAAL,CAAqB6M,EAArB,CAAf;AACD;AACF;AACD,WAAO3L,KAAP;AACD,GAzlCoB;AA2lCrB6L,aA3lCqB,uBA2lCTnK,OA3lCS,EA2lCAoK,YA3lCA,EA2lCc;AACjC,WAAOhO,MAAMI,CAAN,CAAQ+C,GAAR,CAAYS,OAAZ,EAAqB,iBAAS;AACnC,UAAI,CAACG,MAAMzB,cAAN,CAAqB,MAArB,CAAL,EAAmC;AACjC,YAAM2L,qBAAqBlK,MAAMG,MAAN,CAAaf,GAAb,CAAiB;AAAA,iBAAU,OAAOgB,KAAP,KAAiB,QAAlB,GAA8BA,KAA9B,GAAuCA,MAAMU,IAAN,IAAcV,MAAMC,SAApE;AAAA,SAAjB,CAA3B;AACA,YAAIQ,YAAY5E,MAAMiM,UAAN,CAAiB+B,eAAe,GAAf,GAAqBC,mBAAmB/M,IAAnB,CAAwB,GAAxB,CAAtC,CAAhB;AACA,YAAI0D,UAAUlB,OAAV,CAAkB,GAAlB,IAAyB,CAAC,CAA1B,IAA+BkB,UAAUlB,OAAV,CAAkB,GAAlB,IAAyB,CAAC,CAAzD,IAA8DkB,UAAUlB,OAAV,CAAkB,GAAlB,IAAyB,CAAC,CAAxF,IAA6FkB,UAAUlB,OAAV,CAAkB,GAAlB,IAAyB,CAAC,CAA3H,EAA8H;AAC5H;AACAkB,4BAAgBA,SAAhB;AACD;AACDb,cAAMc,IAAN,GAAaD,SAAb;AACD;;AAED,aAAOb,KAAP;AACD,KAZM,CAAP;AAaD,GAzmCoB;AA2mCrBmK,qBA3mCqB,+BA2mCD7M,SA3mCC,EA2mCU8M,UA3mCV,EA2mCsB;AACzC,WAAO,KAAKC,mBAAL,CAAyB/M,SAAzB,EAAoC8M,UAApC,CAAP;AACD,GA7mCoB;AA+mCrBE,8BA/mCqB,wCA+mCQhN,SA/mCR,EA+mCmB;;AAEtC,QAAM4E,MAAM,CAAC,+CAAD,EACV,mDADU,EAEV,6GAFU,EAGV,4BAHU,EAIV5E,UAAUA,SAAV,GAAsBA,UAAUA,SAAV,CAAoByB,WAApB,EAAtB,GAA0DzB,UAAUyB,WAAV,EAJhD,EAKV,KALU,EAMVzB,UAAUN,MAAV,GAAmB,wBAAwB,KAAK8K,kBAAL,CAAwBxK,UAAUN,MAAlC,CAAxB,GAAoE,KAAvF,GAA+F,GANrF,EAOV,mCAPU,EAQV,kDARU,EASV,8BATU,EAUV,yCAVU,EAUiCG,IAVjC,CAUsC,EAVtC,CAAZ;;AAYA,WAAO+E,GAAP;AACD,GA9nCoB;;;AAgoCrB;;;AAGAqI,sBAnoCqB,gCAmoCAjN,SAnoCA,EAmoCW;AAC9B,WAAO,CAAC,4HAAD,EACLA,UAAUA,SAAV,GAAsBA,UAAUA,SAAV,CAAoByB,WAApB,EAAtB,GAA0DzB,UAAUyB,WAAV,EADrD,EAEL,KAFK,EAGLzB,UAAUN,MAAV,GAAmB,mBAAmB,KAAK8K,kBAAL,CAAwBxK,UAAUN,MAAlC,CAAnB,GAA+D,KAAlF,GAA0F,GAHrF,EAG0FG,IAH1F,CAG+F,EAH/F,CAAP;AAID,GAxoCoB;;;AA0oCrB;;;;AAIAqN,oBA9oCqB,8BA8oCFlN,SA9oCE,EA8oCSmN,UA9oCT,EA8oCqB;AACxC,QAAMtM,QAAQ,KAAKZ,UAAL,CAAgBD,SAAhB,CAAd;;AAEA,WAAO,iBAAiBa,KAAjB,GAAyB,UAAzB,GAAsCsM,UAAtC,GAAmD,gBAA1D;AACD,GAlpCoB;AAopCrBJ,qBAppCqB,+BAopCD/M,SAppCC,EAopCUoN,cAppCV,EAopC0B;AAC7C,QAAMxI,MAAM,8DAAZ;;AAEA,WAAOjG,MAAMI,CAAN,CAAQsF,QAAR,CAAiBO,GAAjB,EAAsB;AAC3B/D,aAAO,KAAKZ,UAAL,CAAgBD,SAAhB,CADoB;AAE3BqN,kBAAYD;AAFe,KAAtB,CAAP;AAID,GA3pCoB;AA6pCrBE,oBA7pCqB,8BA6pCF3F,KA7pCE,EA6pCK;AACxB,QAAIA,KAAJ,EAAW;AACT;AACD;AACD,WAAO,EAAP;AACD,GAlqCoB;AAoqCrB4F,wBApqCqB,kCAoqCE5F,KApqCF,EAoqCSpI,OApqCT,EAoqCkB;AACrC,QAAIA,QAAQiO,MAAZ,EAAoB;AAClB;AACD;;AAED;AACA,WAAO,iDAAP;AACD,GA3qCoB;AA6qCrBC,uBA7qCqB,mCA6qCG;AACtB;AACA;AACA,WAAOzO,MAAMC,KAAKyO,EAAL,EAAN,CAAP;AACD,GAjrCoB;AAmrCrBC,uBAnrCqB,iCAmrCCC,WAnrCD,EAmrCc;AACjC,QAAIA,YAAYJ,MAAhB,EAAwB;AACtB,aAAO,gBAAgBI,YAAYpK,IAA5B,GAAmC,GAA1C;AACD;;AAED,WAAO,mBAAP;AACD,GAzrCoB;AA2rCrBqK,wBA3rCqB,kCA2rCED,WA3rCF,EA2rCe;AAClC,QAAIA,YAAYJ,MAAhB,EAAwB;AACtB;AACD;;AAED,WAAO,oBAAP;AACD,GAjsCoB;AAmsCrBM,0BAnsCqB,oCAmsCIF,WAnsCJ,EAmsCiB;AACpC,QAAIA,YAAYJ,MAAhB,EAAwB;AACtB,aAAO,4BAA4BI,YAAYpK,IAAxC,GAA+C,GAAtD;AACD;;AAED,WAAO,sBAAP;AACD,GAzsCoB;AA2sCrBuK,yBA3sCqB,mCA2sCGxO,OA3sCH,EA2sCYwL,KA3sCZ,EA2sCmB3K,UA3sCnB,EA2sC+B4N,MA3sC/B,EA2sCuCC,WA3sCvC,EA2sCoD;AACvE,QAAIC,eAAe,YAAY9N,WAAWP,IAAX,CAAgB,IAAhB,CAAZ,GAAoC,QAApC,GAA+CmO,MAAlE;;AAEA,QAAIC,WAAJ,EAAiB;AACfC,sBAAgB,MAAMD,WAAtB;AACD;;AAED,WAAOC,YAAP;AACD,GAntCoB;AAqtCrBC,mBArtCqB,6BAqtCH5O,OArtCG,EAqtCMwL,KArtCN,EAqtCa;AAChC,QAAIqD,WAAW,EAAf;AACA,QAAMC,SAAS9O,QAAQ8O,MAAR,IAAkB,CAAjC;AAAA,QACIC,aAAa/O,QAAQgP,eAAR,IAA2BhP,QAAQiP,kBAAnC,IAAyDjP,QAAQkP,mBADlF;;AAGA,QAAIC,SAAS,EAAb;AACA,QAAInP,QAAQoP,KAAZ,EAAmB;AACjBD,eAAS,KAAKE,cAAL,CAAoBrP,OAApB,EAA6BwL,KAA7B,EAAoCuD,UAApC,CAAT;AACD;;AAED,QAAI/O,QAAQ8K,KAAR,IAAiB9K,QAAQ8O,MAA7B,EAAqC;AACnC,UAAI,CAAC9O,QAAQoP,KAAT,IAAmBpP,QAAQsP,OAAR,IAAmB,CAACH,OAAOI,aAAP,CAAqB7M,MAAhE,EAAyE;AACvEmM,oBAAa7O,QAAQoP,KAAR,IAAiB,CAACL,UAAnB,GAAiC,IAAjC,GAAwC,YAApD;AACAF,oBAAYrD,MAAMgE,eAAlB;AACD;;AAED,UAAIxP,QAAQ8O,MAAR,IAAkB9O,QAAQ8K,KAA9B,EAAqC;AACnC+D,oBAAY,aAAa,KAAK9F,MAAL,CAAY+F,MAAZ,CAAb,GAAmC,OAA/C;AACD;;AAED,UAAI9O,QAAQ8K,KAAZ,EAAmB;AACjB+D,oBAAY,iBAAiB,KAAK9F,MAAL,CAAY/I,QAAQ8K,KAApB,CAAjB,GAA8C,YAA1D;AACD;AACF;;AAED,WAAO+D,QAAP;AACD,GA/uCoB;AAivCrBY,cAjvCqB,wBAivCRrH,KAjvCQ,EAivCD;AAClB,WAAO,CAAC,CAACA,KAAF,GAAU,CAAV,GAAc,CAArB;AACD;AAnvCoB,CAAvB;;AAuvCA;AACA,SAAS/H,eAAT,CAAyBsM,UAAzB,EAAqC;AACnC,SAAOvN,MAAMyN,QAAN,CAAeF,UAAf,EAA2B,GAA3B,CAAP;AACD;;AAED+C,OAAOC,OAAP,GAAiBvQ,MAAMI,CAAN,CAAQoQ,MAAR,CAAexQ,MAAMI,CAAN,CAAQqQ,KAAR,CAActQ,sBAAd,CAAf,EAAsDQ,cAAtD,CAAjB","file":"query-generator.js","sourcesContent":["'use strict';\n\n/* jshint -W110 */\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst _ = require('lodash');\nconst crc32 = require('js-crc').crc32;\nconst uuid = require('uuid');\n\n//List of Oracle reserved words https://docs.oracle.com/cd/B19306_01/em.102/b40103/app_oracle_reserved_words.htm\nconst oracleReservedWords = ['ACCESS', 'ACCOUNT', 'ACTIVATE', 'ADD', 'ADMIN', 'ADVISE', 'AFTER', 'ALL', 'ALL_ROWS', 'ALLOCATE', 'ALTER', 'ANALYZE', 'AND', 'ANY', 'ARCHIVE', 'ARCHIVELOG', 'ARRAY', 'AS', 'ASC', 'AT', 'AUDIT', 'AUTHENTICATED', 'AUTHORIZATION', 'AUTOEXTEND', 'AUTOMATIC', 'BACKUP', 'BECOME', 'BEFORE', 'BEGIN', 'BETWEEN', 'BFILE', 'BITMAP', 'BLOB', 'BLOCK', 'BODY', 'BY', 'CACHE', 'CACHE_INSTANCES', 'CANCEL', 'CASCADE', 'CAST', 'CFILE', 'CHAINED', 'CHANGE', 'CHAR', 'CHAR_CS', 'CHARACTER', 'CHECK', 'CHECKPOINT', 'CHOOSE', 'CHUNK', 'CLEAR', 'CLOB', 'CLONE', 'CLOSE', 'CLOSE_CACHED_OPEN_CURSORS', 'CLUSTER', 'COALESCE', 'COLUMN', 'COLUMNS', 'COMMENT', 'COMMIT', 'COMMITTED', 'COMPATIBILITY', 'COMPILE', 'COMPLETE', 'COMPOSITE_LIMIT', 'COMPRESS', 'COMPUTE', 'CONNECT', 'CONNECT_TIME', 'CONSTRAINT', 'CONSTRAINTS', 'CONTENTS', 'CONTINUE', 'CONTROLFILE', 'CONVERT', 'COST', 'CPU_PER_CALL', 'CPU_PER_SESSION', 'CREATE', 'CURRENT', 'CURRENT_SCHEMA', 'CURREN_USER', 'CURSOR', 'CYCLE', 'DANGLING', 'DATABASE', 'DATAFILE', 'DATAFILES', 'DATAOBJNO', 'DATE', 'DBA', 'DBHIGH', 'DBLOW', 'DBMAC', 'DEALLOCATE', 'DEBUG', 'DEC', 'DECIMAL', 'DECLARE', 'DEFAULT', 'DEFERRABLE', 'DEFERRED', 'DEGREE', 'DELETE', 'DEREF', 'DESC', 'DIRECTORY', 'DISABLE', 'DISCONNECT', 'DISMOUNT', 'DISTINCT', 'DISTRIBUTED', 'DML', 'DOUBLE', 'DROP', 'DUMP', 'EACH', 'ELSE', 'ENABLE', 'END', 'ENFORCE', 'ENTRY', 'ESCAPE', 'EXCEPT', 'EXCEPTIONS', 'EXCHANGE', 'EXCLUDING', 'EXCLUSIVE', 'EXECUTE', 'EXISTS', 'EXPIRE', 'EXPLAIN', 'EXTENT', 'EXTENTS', 'EXTERNALLY', 'FAILED_LOGIN_ATTEMPTS', 'FALSE', 'FAST', 'FILE', 'FIRST_ROWS', 'FLAGGER', 'FLOAT', 'FLOB', 'FLUSH', 'FOR', 'FORCE', 'FOREIGN', 'FREELIST', 'FREELISTS', 'FROM', 'FULL', 'FUNCTION', 'GLOBAL', 'GLOBALLY', 'GLOBAL_NAME', 'GRANT', 'GROUP', 'GROUPS', 'HASH', 'HASHKEYS', 'HAVING', 'HEADER', 'HEAP', 'IDENTIFIED', 'IDGENERATORS', 'IDLE_TIME', 'IF', 'IMMEDIATE', 'IN', 'INCLUDING', 'INCREMENT', 'INDEX', 'INDEXED', 'INDEXES', 'INDICATOR', 'IND_PARTITION', 'INITIAL', 'INITIALLY', 'INITRANS', 'INSERT', 'INSTANCE', 'INSTANCES', 'INSTEAD', 'INT', 'INTEGER', 'INTERMEDIATE', 'INTERSECT', 'INTO', 'IS', 'ISOLATION', 'ISOLATION_LEVEL', 'KEEP', 'KEY', 'KILL', 'LABEL', 'LAYER', 'LESS', 'LEVEL', 'LIBRARY', 'LIKE', 'LIMIT', 'LINK', 'LIST', 'LOB', 'LOCAL', 'LOCK', 'LOCKED', 'LOG', 'LOGFILE', 'LOGGING', 'LOGICAL_READS_PER_CALL', 'LOGICAL_READS_PER_SESSION', 'LONG', 'MANAGE', 'MASTER', 'MAX', 'MAXARCHLOGS', 'MAXDATAFILES', 'MAXEXTENTS', 'MAXINSTANCES', 'MAXLOGFILES', 'MAXLOGHISTORY', 'MAXLOGMEMBERS', 'MAXSIZE', 'MAXTRANS', 'MAXVALUE', 'MIN', 'MEMBER', 'MINIMUM', 'MINEXTENTS', 'MINUS', 'MINVALUE', 'MLSLABEL', 'MLS_LABEL_FORMAT', 'MODE', 'MODIFY', 'MOUNT', 'MOVE', 'MTS_DISPATCHERS', 'MULTISET', 'NATIONAL', 'NCHAR', 'NCHAR_CS', 'NCLOB', 'NEEDED', 'NESTED', 'NETWORK', 'NEW', 'NEXT', 'NOARCHIVELOG', 'NOAUDIT', 'NOCACHE', 'NOCOMPRESS', 'NOCYCLE', 'NOFORCE', 'NOLOGGING', 'NOMAXVALUE', 'NOMINVALUE', 'NONE', 'NOORDER', 'NOOVERRIDE', 'NOPARALLEL', 'NOPARALLEL', 'NOREVERSE', 'NORMAL', 'NOSORT', 'NOT', 'NOTHING', 'NOWAIT', 'NULL', 'NUMBER', 'NUMERIC', 'NVARCHAR2', 'OBJECT', 'OBJNO', 'OBJNO_REUSE', 'OF', 'OFF', 'OFFLINE', 'OID', 'OIDINDEX', 'OLD', 'ON', 'ONLINE', 'ONLY', 'OPCODE', 'OPEN', 'OPTIMAL', 'OPTIMIZER_GOAL', 'OPTION', 'OR', 'ORDER', 'ORGANIZATION', 'OSLABEL', 'OVERFLOW', 'OWN', 'PACKAGE', 'PARALLEL', 'PARTITION', 'PASSWORD', 'PASSWORD_GRACE_TIME', 'PASSWORD_LIFE_TIME', 'PASSWORD_LOCK_TIME', 'PASSWORD_REUSE_MAX', 'PASSWORD_REUSE_TIME', 'PASSWORD_VERIFY_FUNCTION', 'PCTFREE', 'PCTINCREASE', 'PCTTHRESHOLD', 'PCTUSED', 'PCTVERSION', 'PERCENT', 'PERMANENT', 'PLAN', 'PLSQL_DEBUG', 'POST_TRANSACTION', 'PRECISION', 'PRESERVE', 'PRIMARY', 'PRIOR', 'PRIVATE', 'PRIVATE_SGA', 'PRIVILEGE', 'PRIVILEGES', 'PROCEDURE', 'PROFILE', 'PUBLIC', 'PURGE', 'QUEUE', 'QUOTA', 'RANGE', 'RAW', 'RBA', 'READ', 'READUP', 'REAL', 'REBUILD', 'RECOVER', 'RECOVERABLE', 'RECOVERY', 'REF', 'REFERENCES', 'REFERENCING', 'REFRESH', 'RENAME', 'REPLACE', 'RESET', 'RESETLOGS', 'RESIZE', 'RESOURCE', 'RESTRICTED', 'RETURN', 'RETURNING', 'REUSE', 'REVERSE', 'REVOKE', 'ROLE', 'ROLES', 'ROLLBACK', 'ROW', 'ROWID', 'ROWNUM', 'ROWS', 'RULE', 'SAMPLE', 'SAVEPOINT', 'SB4', 'SCAN_INSTANCES', 'SCHEMA', 'SCN', 'SCOPE', 'SD_ALL', 'SD_INHIBIT', 'SD_SHOW', 'SEGMENT', 'SEG_BLOCK', 'SEG_FILE', 'SELECT', 'SEQUENCE', 'SERIALIZABLE', 'SESSION', 'SESSION_CACHED_CURSORS', 'SESSIONS_PER_USER', 'SET', 'SHARE', 'SHARED', 'SHARED_POOL', 'SHRINK', 'SIZE', 'SKIP', 'SKIP_UNUSABLE_INDEXES', 'SMALLINT', 'SNAPSHOT', 'SOME', 'SORT', 'SPECIFICATION', 'SPLIT', 'SQL_TRACE', 'STANDBY', 'START', 'STATEMENT_ID', 'STATISTICS', 'STOP', 'STORAGE', 'STORE', 'STRUCTURE', 'SUCCESSFUL', 'SWITCH', 'SYS_OP_ENFORCE_NOT_NULL$', 'SYS_OP_NTCIMG$', 'SYNONYM', 'SYSDATE', 'SYSDBA', 'SYSOPER', 'SYSTEM', 'TABLE', 'TABLES', 'TABLESPACE', 'TABLESPACE_NO', 'TABNO', 'TEMPORARY', 'THAN', 'THE', 'THEN', 'THREAD', 'TIMESTAMP', 'TIME', 'TO', 'TOPLEVEL', 'TRACE', 'TRACING', 'TRANSACTION', 'TRANSITIONAL', 'TRIGGER', 'TRIGGERS', 'TRUE', 'TRUNCATE', 'TX', 'TYPE', 'UB2', 'UBA', 'UID', 'UNARCHIVED', 'UNDO', 'UNION', 'UNIQUE', 'UNLIMITED', 'UNLOCK', 'UNRECOVERABLE', 'UNTIL', 'UNUSABLE', 'UNUSED', 'UPDATABLE', 'UPDATE', 'USAGE', 'USE', 'USER', 'USING', 'VALIDATE', 'VALIDATION', 'VALUE', 'VALUES', 'VARCHAR', 'VARCHAR2', 'VARYING', 'VIEW', 'WHEN', 'WHENEVER', 'WHERE', 'WITH', 'WITHOUT', 'WORK', 'WRITE', 'WRITEDOWN', 'WRITEUP', 'XID', 'YEAR', 'ZONE'];\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function (methodName) {\n  throw new Error('The method \"' + methodName + '\" is not defined! Please add it to your sql dialect.');\n};\n\nconst QueryGenerator = {\n  options: {},\n  dialect: 'oracle',\n\n  createSchema(schema) {\n    schema = this.quoteIdentifier(schema);\n    return [\n      'DECLARE',\n      '  V_COUNT INTEGER;',\n      '  V_CURSOR_NAME INTEGER;',\n      '  V_RET INTEGER;',\n      'BEGIN',\n      '  SELECT COUNT(1) INTO V_COUNT FROM ALL_USERS WHERE USERNAME = ', wrapSingleQuote(schema), ';',\n      '  IF V_COUNT = 0 THEN',\n      '    EXECUTE IMMEDIATE ', wrapSingleQuote('CREATE USER ' + schema + ' IDENTIFIED BY 12345 DEFAULT TABLESPACE USERS'), ';',\n      '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT \"CONNECT\" TO ' + schema), ';',\n      '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT create table TO ' + schema), ';',\n      '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT create view TO ' + schema), ';',\n      '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT create any trigger TO ' + schema), ';',\n      '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT create any procedure TO ' + schema), ';',\n      '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT create sequence TO ' + schema), ';',\n      '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT create synonym TO ' + schema), ';',\n      // '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT select on dba_segments TO ' + schema), ';',\n      // '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT select on dba_constraints TO ' + schema), ';',\n      // '    EXECUTE IMMEDIATE ', wrapSingleQuote('GRANT select on dba_tables TO ' + schema), ';',\n      '    EXECUTE IMMEDIATE ', wrapSingleQuote('ALTER USER ' + schema + ' QUOTA UNLIMITED ON USERS'), ';',\n      '  END IF;',\n      'END;'\n    ].join(' ');\n  },\n\n  showSchemasQuery() {\n    return 'SELECT USERNAME AS \"schema_name\" FROM ALL_USERS WHERE COMMON = (\\'NO\\') AND USERNAME != user';\n  },\n\n  dropSchema(tableName) {\n    return 'DROP USER ' + this.quoteTable(tableName) + ' CASCADE';\n  },\n\n  versionQuery() {\n    return 'SELECT VERSION FROM PRODUCT_COMPONENT_VERSION WHERE PRODUCT LIKE \\'Oracle%\\'';\n  },\n\n\n  createTableQuery(tableName, attributes, options) {\n    let query = 'CREATE TABLE <%= table %> (<%= attributes %>)';\n    const completeQuery = \"BEGIN EXECUTE IMMEDIATE '<%= createTableQuery %>'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -955 THEN RAISE; END IF; END;\", \n      self = this;\n    const primaryKeys = [], foreignKeys = {}, attrStr = [], checkStr = [];\n\n    const values = {\n      table: this.quoteTable(tableName)\n    };\n\n    const regex = /REFERENCES ([a-zA-Z_.0-9]*) \\((.*)\\)/g; //Global regex\n    const chkRegex = /CHECK \\(([a-zA-Z_.0-9]*) (.*)\\)/g; //Check regex\n\n    //Starting by dealing with all attributes\n    for (let attr in attributes) {\n      if (attributes.hasOwnProperty(attr)) {\n        const dataType = attributes[attr];\n        let match;\n\n        attr = this.quoteIdentifier(attr);\n\n        // ORACLE doesn't support inline REFERENCES declarations: move to the end\n        if (Utils._.includes(dataType, 'PRIMARY KEY')) {\n          //Primary key\n          primaryKeys.push(attr);\n          if (Utils._.includes(dataType, 'REFERENCES')) {\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(attr + ' ' + match[1].replace(/PRIMARY KEY/, ''));\n\n            foreignKeys[attr] = match[2].replace(regex, (match, table, column) => {\n              //We don't want the table name to be quoted if we pass the schema name\n              let tableName = '';\n              if (Utils._.isPlainObject(table)) {\n                if (table.schema) {\n                  tableName = this.quoteTable(table.schema) + '.';\n                }\n                tableName += this.quoteTable(table.tableName);\n              } else {\n                tableName = Utils._.includes(oracleReservedWords, table.toUpperCase()) ? '\"' + table + '\"' : table;\n              }\n\n              return `REFERENCES ${tableName} (${this.quoteIdentifier(column)})`;\n            });\n          } else {\n            attrStr.push(attr + ' ' + dataType.replace(/PRIMARY KEY/, '').trim());\n          }\n\n        } else if (Utils._.includes(dataType, 'REFERENCES')) {\n\n          //Foreign key\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(attr + ' ' + match[1]);\n\n          foreignKeys[attr] = match[2].replace(regex, (match, table, column) => {\n            //We don't want the table name to be quoted if we pass the schema name\n            let tableName = '';\n            if (Utils._.isPlainObject(table)) {\n              if (table.schema) {\n                tableName = this.quoteTable(table.schema) + '.';\n              }\n              tableName += this.quoteTable(table.tableName);\n            } else {\n              tableName = Utils._.includes(oracleReservedWords, table.toUpperCase()) ? '\"' + table + '\"' : table;\n            }\n\n            return `REFERENCES ${tableName} (${this.quoteIdentifier(column)})`;\n          });\n        } else if (Utils._.includes(dataType, 'CHECK')) {\n          //Check constraints go to the end\n          match = dataType.match(/^(.+) (CHECK.*)$/);\n          attrStr.push(attr + ' ' + match[1]);\n          match[2] = match[2].replace('ATTRIBUTENAME', attr);\n          const checkCond = match[2].replace(chkRegex, (match, column, condition) => {\n            return `CHECK (${this.quoteIdentifier(column)} ${condition})`;\n          });\n\n          checkStr.push(checkCond);\n        } else {\n          attrStr.push(attr + ' ' + dataType);\n        }\n      }\n    }\n\n    values['attributes'] = attrStr.join(', ');\n\n    const pkString = primaryKeys.map((pk => {\n      return this.quoteIdentifier(pk);\n    }).bind(this)).join(', ');\n\n    if (pkString.length > 0) {\n\n      let primaryKeyName = `PK${values.table}${pkString}`.replace(/[.,\"\\s]/g, ''); //We replace the space if there are multiple columns\n\n      //Oracle doesn't support names with more that 32 characters, so we replace it by PK CRC32\n      if (primaryKeyName.length > 30) {\n        primaryKeyName = `PK${values.table}${crc32(pkString)}`.replace(/[.,\"\\s]/g, '');\n        if (primaryKeyName.length > 30) {\n          const crcName = crc32(`${values.table}_${pkString}`);\n          primaryKeyName = `PK${crcName}`.replace(/[.,\"\\s]/g, '');\n        }\n      }\n\n      values.attributes += ',CONSTRAINT ' + primaryKeyName + ' PRIMARY KEY (' + pkString + ')';\n    }\n\n    //Dealing with FKs\n    for (const fkey in foreignKeys) {\n      if (foreignKeys.hasOwnProperty(fkey)) {\n\n        //Oracle default response for FK, doesn't support if defined\n        if (foreignKeys[fkey].indexOf('ON DELETE NO ACTION') > - 1) {\n          foreignKeys[fkey] = foreignKeys[fkey].replace('ON DELETE NO ACTION', '');\n        }\n\n        let fkName = `FK${values.table}${fkey}`.replace(/[.\"]/g, '');\n        //Oracle doesn't support names with more that 32 characters, so we replace it by FK CRC(columns)\n        if (fkName.length > 30) {\n          fkName = `FK${values.table}${crc32(fkey)}`.replace(/[.\"]/g, '');\n          //If the name is still too long (table name very long), we generate only FK CRC(table_columns)\n          if (fkName.length > 30) {\n            const crcName = crc32(`${values.table}_${fkey}`);\n            fkName = `FK${crcName}`.replace(/[.\"]/g, '');\n          }\n        }\n\n        values.attributes += ',CONSTRAINT ' + fkName + ' FOREIGN KEY (' + this.quoteIdentifier(fkey) + ') ' + foreignKeys[fkey];\n      }\n    }\n\n    if (checkStr.length > 0) {\n      values.attributes += ', ' + checkStr.join(', ');\n    }\n\n    //Specific case for unique indexes with Oracle, we have to set the constraint on the column, if not, no FK will be possible (ORA-02270: no matching unique or primary key for this column-list)\n    if (options && options.indexes && options.indexes.length > 0) {\n\n      const idxToDelete = [];\n      options.indexes.forEach((index, idx) => {\n        if (index.unique === true) {\n          //If unique index, transform to unique constraint on column\n          const fields = index.fields.map(field => {\n            if (typeof field === 'string') {\n              return field;\n            } else {\n              return field.attribute;\n            }\n          });\n\n          //Now we have to be sure that the constraint isn't already declared in uniqueKeys\n          let canContinue = true;\n          if (options.uniqueKeys) {\n            const keys = Object.keys(options.uniqueKeys);\n\n            for (let fieldIdx = 0; fieldIdx < keys.length; fieldIdx++) {\n              const currUnique = options.uniqueKeys[keys[fieldIdx]];\n\n              if (currUnique.fields.length === fields.length) {\n                //lengths are the same, possible same constraint\n                for (let i = 0; i < currUnique.fields.length; i++) {\n                  const field = currUnique.fields[i];\n\n                  if (Utils._.includes(fields, field)) {\n                    canContinue = false;\n                  } else {\n                    //We have at least one different column, even if we found the same columns previously, we let the constraint be created\n                    canContinue = true;\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (canContinue) {\n              let indexName = 'name' in index ? index.name : '';\n\n              if (indexName === '' || indexName.length > 30) {\n                indexName = this._generateUniqueConstraintName(values.table, fields);\n              }\n              const constraintToAdd = {\n                name: indexName,\n                fields\n              };\n              if (!('uniqueKeys' in options)) {\n                options.uniqueKeys = {};\n              }\n\n              options.uniqueKeys[indexName] = constraintToAdd;\n              idxToDelete.push(idx);\n            } else {\n              //The constraint already exists, we remove it from the list\n              idxToDelete.push(idx);\n            }\n          }\n        }\n      });\n      idxToDelete.forEach(idx => {\n        options.indexes.splice(idx, 1);\n      });\n    }\n\n    if (options && !!options.uniqueKeys) {\n      Utils._.each(options.uniqueKeys, (columns, indexName) => {\n        let canBeUniq = false;\n\n        //Check if we can create the unique key\n        primaryKeys.forEach(primaryKey => {\n          //We can create an unique constraint if it's not on the primary key AND if it doesn't have unique in its definition\n\n          if (!Utils._.includes(columns.fields, primaryKey)) {\n            canBeUniq = true;\n          }\n        });\n\n        columns.fields.forEach(field => {\n          let currField = '';\n          if (!Utils._.isString(field)) {\n            currField = field.attribute.replace(/[.,\"\\s]/g, '');\n          } else {\n            currField = field.replace(/[.,\"\\s]/g, '');\n          }\n          if (currField in attributes) {\n            if (attributes[currField].toUpperCase().indexOf('UNIQUE') > -1) {\n              //We generate the attribute without UNIQUE\n              const attrToReplace = attributes[currField].replace('UNIQUE', '');\n              //We replace in the final string\n              values.attributes = values.attributes.replace(attributes[currField], attrToReplace);\n            }\n          }\n        });\n\n        //Oracle cannot have an unique AND a primary key on the same fields, prior to the primary key \n        if (canBeUniq) {\n          if (!Utils._.isString(indexName)) {\n            indexName = this._generateUniqueConstraintName(values.table, columns.fields);\n          }\n\n          //Oracle doesn't support names with more that 32 characters, so we replace it by PK timestamp\n          if (indexName.length > 30) {\n            indexName = this._generateUniqueConstraintName(values.table, columns.fields);\n          }\n\n          const indexUpperName = indexName.toUpperCase();\n\n          if (Utils._.includes(oracleReservedWords, indexUpperName) || indexUpperName.charAt(0) === '_') {\n            indexName = '\"' + indexName + '\"';\n          }\n\n          const index = options.uniqueKeys[columns.name];\n          delete options.uniqueKeys[columns.name];\n          indexName = indexName.replace(/[.,\\s]/g, '');\n          columns.name = indexName;\n          options.uniqueKeys[indexName] = index;\n          values.attributes += ', CONSTRAINT ' + indexName + ' UNIQUE (' + Utils._.map(columns.fields, self.quoteIdentifier).join(', ') + ')';\n        }\n      });\n    }\n\n    query = Utils._.template(query)(values).trim();\n    //we replace single quotes by two quotes in order for the execute statement to work\n    query = query.replace(/'/g, \"''\");\n    values.createTableQuery = query;\n\n    return Utils._.template(completeQuery)(values).trim();\n  },\n\n  /**\n   * Generating a sequence name - used by create / drop table for Oracle versions < 12\n   */\n  _generateSeqName(tableName) {\n    let seqName = `${tableName}_seq`;\n    if (seqName.length > 30) {\n      seqName = crc32(seqName);\n    }\n\n    if (seqName.indexOf('.') > -1) {\n      const seq = seqName.split('.');\n      seq[1] = seq[1].replace(/\"/g, '');\n\n      return seq.join('.');\n    }\n\n    return seqName.replace(/\"/g, '');\n  },\n\n  /**\n   * Generates a name for an unique constraint with te pattern : uniqTABLENAMECOLUMNNAMES\n   * If this indexName is too long for Oracle, it's hashed to have an acceptable length\n   */\n  _generateUniqueConstraintName(table, columns) {\n\n    let indexName = `uniq${table}${columns.join('')}`.replace(/[.,\"\\s]/g, '').toLowerCase();\n\n    //Oracle doesn't support names with more that 32 characters, so we replace it by PK timestamp\n    if (indexName.length > 30) {\n      indexName = `uniq${table}${crc32(columns.join(''))}`.replace(/[.,\"\\s]/g, '').toLowerCase();\n\n      if (indexName.length > 30) {\n        const crcName = crc32(`${table}_${columns.join('')}`);\n        indexName = `uniq${crcName}`.replace(/[.,\"\\s]/g, '').toLowerCase();\n      }\n    }\n\n    return indexName;\n  },\n\n  describeTableQuery(tableName, schema) {\n    //name, type, datalength (except number / nvarchar), datalength varchar, datalength number, nullable, default value, primary ?\n    const sql = ['SELECT atc.COLUMN_NAME, atc.DATA_TYPE, atc.DATA_LENGTH, atc.CHAR_LENGTH, atc.DEFAULT_LENGTH, atc.NULLABLE, ',\n      'CASE WHEN ucc.CONSTRAINT_NAME  LIKE\\'%PK%\\' THEN \\'PRIMARY\\' ELSE \\'\\' END AS \"PRIMARY\" ',\n      'FROM all_tab_columns atc ',\n      'LEFT OUTER JOIN all_cons_columns ucc ON(atc.table_name = ucc.table_name AND atc.COLUMN_NAME = ucc.COLUMN_NAME ) ',\n      schema ? 'WHERE (atc.OWNER=UPPER(\\'<%= schema %>\\') OR atc.OWNER=\\'<%= schema %>\\') ' : 'WHERE atc.OWNER=(SELECT USER FROM DUAL) ',\n      'AND (atc.TABLE_NAME=UPPER(\\'<%= tableName %>\\') OR atc.TABLE_NAME=\\'<%= tableName %>\\')',\n      'ORDER BY \"PRIMARY\", atc.COLUMN_NAME'].join('');\n\n    const currTableName = Utils._.isPlainObject(tableName) ? tableName.tableName : tableName;\n\n    const values = {\n      tableName: currTableName,\n      schema\n    };\n\n    return Utils._.template(sql)(values).trim();\n  },\n\n  renameTableQuery(before, after) {\n    const query = 'ALTER TABLE <%= before %> RENAME TO <%= after %>';\n    return Utils._.template(query)({\n      before,\n      after\n    });\n  },\n\n\n\n  showConstraintsQuery(tableName) {\n    return `SELECT CONSTRAINT_NAME constraint_name FROM user_cons_columns WHERE table_name = '${tableName.toUpperCase()}'`;\n  },\n\n  showTablesQuery() {\n\n    //Carefull, heavy load\n    //Thanks http://sqlblog.com/blogs/jamie_thomson/archive/2009/09/08/deriving-a-list-of-tables-in-dependency-order.aspx\n\n    const subQuery = 'SELECT USERNAME AS \"schema_name\" FROM ALL_USERS WHERE COMMON = (\\'NO\\')';\n\n    const sql = ['SELECT DISTINCT table_name, lvl, owner as table_schema ',\n      'FROM ( ',\n      'SELECT a.*, rank() over (partition by table_name order by lvl desc) rnk ',\n      'FROM ( ',\n      'SELECT  table_name, level lvl, owner ',\n      'FROM  (',\n      'SELECT DISTINCT a.table_name AS table_name, b.table_name AS parent_table_name, a.owner ',\n      'FROM dba_constraints a LEFT OUTER JOIN dba_constraints b ON a.r_constraint_name = b.constraint_name AND a.owner = b.owner ',\n      'WHERE a.owner IN (<%= subQuery %>) ',\n      'AND a.table_name NOT LIKE \\'%BIN%\\'',\n      ') START WITH parent_table_name IS NULL CONNECT BY NOCYCLE parent_table_name = PRIOR table_name ',\n      ') a  ',\n      ') b ',\n      'WHERE rnk = 1 ',\n      'UNION ',\n      //From here we search for all tables without any dependency\n      'SELECT table_name, 0 AS lvl, OWNER as TABLE_SCHEMA FROM dba_tables ',\n      'WHERE OWNER IN (<%= subQuery %>) AND table_name NOT IN (',\n      'SELECT DISTINCT(table_name) ',\n      'FROM all_cons_columns',\n      ') AND TABLESPACE_NAME IS NOT NULL ORDER BY lvl desc, table_name'].join('');\n\n    const values = {\n      subQuery\n    };\n\n    return Utils._.template(sql)(values);\n  },\n\n  dropTableQuery(tableName) {\n    let table = '';\n    table = this.quoteTable(tableName);\n\n    const query = ['BEGIN ',\n      'EXECUTE IMMEDIATE \\'DROP TABLE <%= table %> CASCADE CONSTRAINTS\\';',\n      ' EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN',\n      ' RAISE; END IF;END;'];\n\n    const values = {\n      table\n    };\n\n    return Utils._.template(query.join(''))(values).trim();\n  },\n\n  addConstraintQuery(tableName, options) {\n    options = options || {};\n\n    //Oracle doesn't support On update\n    delete options.onUpdate;\n    const constraintSnippet = this.getConstraintSnippet(tableName, options);\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return `ALTER TABLE ${tableName} ADD ${constraintSnippet}`;\n  },\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n\n    const query = 'ALTER TABLE <%= table %> ADD (<%= attribute %>)'\n      , attribute = Utils._.template('<%= key %> <%= definition %>')({\n        key,\n        definition: this.attributeToSQL(dataType, {\n          context: 'addColumn'\n        }).replace('ATTRIBUTENAME', key).replace(/'/g, \"'\")\n      });\n\n    return Utils._.template(query)({\n      table: this.quoteTable(table),\n      attribute\n    });\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    const query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>';\n\n    return Utils._.template(query)({\n      tableName: this.quoteTable(tableName),\n      attributeName\n    });\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const modifyQuery = 'ALTER TABLE <%= tableName %> MODIFY (<%= query %>)';\n    const alterQuery = 'ALTER TABLE <%= tableName %> <%= query %>';\n    let query = '';\n    const attrString = [], constraintString = [];\n\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.match(/REFERENCES/)) {\n        constraintString.push(Utils._.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>')({\n          fkName: attributeName + '_foreign_idx',\n          attrName: attributeName,\n          definition: definition.replace(/.+?(?=REFERENCES)/, '')\n        }));\n      } else {\n        if (definition.indexOf('CHECK') > -1) {\n          definition = definition.replace(/'/g, \"''\");\n        }\n        attrString.push(Utils._.template('<%= attrName %> <%= definition %>')({\n          attrName: attributeName,\n          definition\n        }));\n      }\n    }\n\n    let fullQuery = 'BEGIN '\n      + 'EXECUTE IMMEDIATE \\'<%= fullQuery %>\\';'\n      + ' EXCEPTION'\n      + ' WHEN OTHERS THEN'\n      + ' IF SQLCODE = -1442 OR SQLCODE = -1451 THEN'\n      + ' EXECUTE IMMEDIATE \\'<%= secondQuery %>\\';' //We execute the statement without the NULL / NOT NULL clause if the first statement failed due to this\n      + ' ELSE'\n      + ' RAISE;'\n      + ' END IF;'\n      + ' END;';\n\n    let finalQuery = '';\n    if (attrString.length) {\n      finalQuery += attrString.join(', ');\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n    if (constraintString.length) {\n      finalQuery += 'ADD CONSTRAINT ' + constraintString.join(', ');\n      //Here, we don't use modify\n      query = alterQuery;\n    } else {\n      query = modifyQuery;\n    }\n\n    query = Utils._.template(query)({\n      tableName: this.quoteTable(tableName),\n      query: finalQuery\n    });\n\n    //Oracle doesn't support if we try to define a NULL / NOT NULL column if it is already in this case \n    //see https://docs.oracle.com/cd/B28359_01/server.111/b28278/e900.htm#ORA-01451\n    const secondQuery = query.replace('NOT NULL', '').replace('NULL', '');\n\n    return fullQuery = Utils._.template(fullQuery)({\n      fullQuery: query,\n      secondQuery\n    });\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> RENAME COLUMN <%= before %> TO <%= after %>'\n      , newName = Object.keys(attributes)[0];\n\n    return Utils._.template(query)({\n      tableName: this.quoteTable(tableName),\n      before: attrBefore,\n      after: newName\n    });\n  },\n\n  /**\n   * NOT COMPLETE\n   * Override of upsertQuery, Oracle specific\n   * Format is MERGE INTO tableName USING DUAL ON (where condition) WHEN MATCHED THEN UpdateQuery(no table name) WHEN NOT MATCHED THEN InsertQuery(no INTO table name)\n   */\n  upsertQuery(tableName, insertValues, updateValues, where, rawAttributes, options) {\n    if (tableName ||insertValues ||updateValues ||where ||rawAttributes ||options) {\n      //Doing nothing, just checking the vars for eslint\n    }\n    throw new Error('Not implemented');\n\n    //All conditions in ON cannot be in the update statement (they are automatically setted by ON)\n    /*if (where && Utils._.isPlainObject(where)) {\n      let whereKeys = Object.keys(where);\n      whereKeys.forEach(whereKey => {\n        let whereObject = where[whereKey];\n        let toDeleteKeys = [];\n        // let toDeleteKeys = Object.keys(whereObject[0]);\n        whereObject.forEach(whereClause => {\n          toDeleteKeys.push(Object.keys(whereClause)[0])\n        });\n        toDeleteKeys.forEach(toDeleteKey => {\n          if (toDeleteKey in updateValues) {\n            delete updateValues[toDeleteKey];\n          }\n        });\n      });\n    }\n\n    let whereQuery = this.whereQuery(where, options);\n    let insertQuery = this.insertQuery(tableName, insertValues, rawAttributes, options);\n    let updateQuery = this.updateQuery(tableName, updateValues, null, options, rawAttributes);\n\n    //For merge, update doesn't need the table name\n    updateQuery = updateQuery.replace(this.quoteTable(tableName), '');\n\n    //For merge, insert doesn't need INTO table name\n    insertQuery = insertQuery.replace(`INTO ${this.quoteTable(tableName)}`, '');\n\n    //We had a full where query, we just don't want the WHERE\n    whereQuery = whereQuery.replace('WHERE ', '');\n\n    let query = `MERGE INTO ${this.quoteTable(tableName)} USING dual ON ${whereQuery} WHEN MATCHED THEN ${updateQuery} WHEN NOT MATCHED THEN ${insertQuery}`;\n\n    return query;*/\n  },\n\n  /*\n  * Override of insertQuery, Oracle specific\n  */\n  insertQuery(table, valueHash, modelAttributes, options) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    var valueQuery = 'INSERT INTO <%= table %> (<%= attributes %>) VALUES (<%= values %>)'\n      , emptyQuery = 'INSERT INTO <%= table %> VALUES (DEFAULT)'\n      , fields = []\n      , values = []\n      , primaryKeys = []\n      , modelAttributeMap = {}\n      , realTableName = this.quoteTable(table)\n      , primaryKeyReturn = [];\n    let key\n      , query\n      , value;\n\n\n\n    //We have to specify a variable that will be used as return value for the id\n    const returningQuery = '<%=valueQuery %> RETURNING <%=primaryKey %> INTO <%=primaryKeyReturn %>';\n\n    if (modelAttributes) {\n\n      //We search for the primaryKey\n      const keys = Object.keys(modelAttributes);\n      let idx = 0;\n\n      while (idx < keys.length) {\n        const AttributeKey = keys[idx];\n        const modelAttribute = modelAttributes[AttributeKey];\n        if (modelAttribute.primaryKey) {\n          primaryKeys.push(modelAttribute);\n\n        }\n        idx++;\n      }\n\n      Utils._.each(modelAttributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    if (this._dialect.supports['ON DUPLICATE KEY'] && options.onDuplicate) {\n      valueQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;\n      emptyQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;\n    }\n\n    valueHash = Utils.removeNullValuesFromHash(valueHash, this.options.omitNull);\n    for (key in valueHash) {\n      if (valueHash.hasOwnProperty(key)) {\n        value = valueHash[key];\n        fields.push(this.quoteIdentifier(key));\n\n        // SERIALS' can't be NULL in postgresql, use DEFAULT where supported\n        if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && !value) {\n          values.push('DEFAULT');\n          \n        } else {\n          if (modelAttributeMap && modelAttributeMap[key] && !modelAttributeMap[key].allowNull && value.length === 0) {\n            //Oracle refuses an insert in not null column with empty value (considered as null)\n            value = ' ';\n          }\n          values.push(this.escape(value, (modelAttributeMap && modelAttributeMap[key]) || undefined, { context: 'INSERT' }));\n        }\n      }\n    }\n\n    let primaryKey = '';\n\n    primaryKeys.forEach(element => {\n      if (element.field.toLowerCase() === 'uid') {\n        primaryKey += primaryKey.length > 0 ? ',\"uid\"' : '\"uid\"';\n\n        const pkReturn = `$:pkReturnVal;${element.type.toSql()}$`;\n        primaryKeyReturn.push(pkReturn);\n      } else {\n        primaryKey += primaryKey.length > 0 ? ',' + this.quoteIdentifier(element.field) : this.quoteIdentifier(element.field);\n        const pkReturn = `$:${element.field};${element.type.toSql()}$`;\n        primaryKeyReturn.push(pkReturn);\n      }\n    });\n\n    //If we want a return AND we haven't specified a primary key in the column list\n    if (options.returning && primaryKey === '') {\n      const tableKeys = Object.keys(this.sequelize.models);\n      const currTableName = Utils._.isPlainObject(table) ? table.tableName : table;\n\n      const currentModelKey = tableKeys.find(modelKey => {\n        return this.sequelize.models[modelKey].tableName === currTableName;\n      });\n\n      const currentModel = this.sequelize.models[currentModelKey];\n      if ((!currentModel || !currentModel.hasPrimaryKeys) && modelAttributes) {\n        //We don't have a primaryKey, so we will return the first column inserted\n        let field = modelAttributes[Object.keys(modelAttributes)[0]].field;\n\n        if (Utils._.includes(oracleReservedWords, field.toUpperCase())) {\n          //The column name we want to return is a reserved word, so we change it for the request to be OK\n          field = 'pkReturnVal';\n        }\n        const pkReturn = `$:${field};string$`;\n        primaryKey = this.quoteIdentifier(modelAttributes[Object.keys(modelAttributes)[0]].field);\n        primaryKeyReturn.push(pkReturn);\n      }\n    }\n\n    const replacements = {\n      // ignore: options.ignore ? this._dialect.supports.IGNORE : '',\n      primaryKey,\n      primaryKeyReturn: primaryKeyReturn.join(','),\n      table: realTableName,\n      attributes: fields.join(','),\n      values: values.join(',')\n    };\n\n    if (options.returning && replacements.attributes && replacements.attributes.length > 0) {\n      query = returningQuery;\n      replacements.valueQuery = Utils._.template(valueQuery)(replacements);\n    } else {\n      query = (replacements.attributes.length ? valueQuery : emptyQuery);\n    }\n\n    return Utils._.template(query)(replacements);\n  },\n\n\n  /**\n   * Oracle way to insert multiple rows inside a single statement\n   * INSERT ALL INSERT INTO table (column_name1,column_name2)\n      with row as (\n        SELECT value as \"column_name1\",value as \"column_name2\" FROM DUAL UNION ALL\n        SELECT value as \"column_name1\",value as \"column_name2\" FROM DUAL\n      )\n    SELECT * FROM row\n   * Unfortunately, with version minor 11 and sequences, we can't use this, we have to chain multiple insert queries\n   */\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const query = 'INSERT ALL INTO <%= table %> (<%= attributes %>) WITH rowAttr AS (<%= rows %>) SELECT * FROM rowAttr;'\n      , emptyQuery = 'INSERT INTO <%= table %> (<%= attributes %>) VALUES (DEFAULT)'\n      , tuples = []\n      , allAttributes = [];\n    let allQueries = [];\n\n    Utils._.forEach(attrValueHashes, attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      if (fields.length === 1 && attributes[fields[0]].autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      // normal case\n      Utils._.forOwn(attrValueHash, (value, key) => {\n        if (allAttributes.indexOf(key) === -1) {\n          if (value === null && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    //Loop over each row to insert\n    if (allAttributes.length > 0) {\n      //Loop over each attribute\n      Utils._.forEach(attrValueHashes, (attrValueHash, idx, array) => {\n        //Generating the row\n        let row = 'SELECT ';\n        const attrs = allAttributes.map(key => {\n          return this.escape(attrValueHash[key]) + ' AS \"' + key + '\"';\n        }).join(',');\n        row += attrs;\n        row += idx < array.length - 1 ? ' FROM DUAL UNION ALL' : ' FROM DUAL';\n        tuples.push(row);\n      });\n      allQueries.push(query);\n\n    } else {\n      //If we pass here, we don't have any attribute, just the id, so we take it to place it in the queries\n      let queryToLaunch = \"DECLARE x NUMBER := 0; BEGIN LOOP EXECUTE IMMEDIATE '\";\n      queryToLaunch += allQueries[0];\n      queryToLaunch += \"'; x:= x+1; IF x > \";\n      queryToLaunch += (allQueries.length - 1);\n      queryToLaunch += ' THEN EXIT; END IF; END LOOP; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -942 THEN RAISE; END IF; END;';\n\n      allQueries = [queryToLaunch];\n      allAttributes.push(Object.keys(attrValueHashes[0])[0]);\n    }\n\n    const replacements = {\n      table: this.quoteTable(tableName),\n      attributes: allAttributes.map(attr => {\n        return this.quoteIdentifier(attr);\n      }).join(','),\n      rows: tuples.join(' ')\n    };\n\n    return Utils._.template(allQueries.join(';'))(replacements);\n  },\n\n  deleteQuery(tableName, where, options) {\n    options = options || {};\n\n    const table = tableName;\n    if (options.truncate === true) {\n      // Truncate does not allow LIMIT and WHERE\n      return 'TRUNCATE TABLE ' + table;\n    }\n\n    where = this.getWhereConditions(where);\n    let limit = '';\n    const query = 'DELETE FROM <%= table %><%= where %><%= limit %>;';\n\n    if (!!options.limit) {\n      //Style of drop with limit with Oracle : delete from table where rowid IN (select rowid from table where rownum <= 10)\n      //If where have de drop statement inside where (as unit test delete.test.js), we don't do anything on limit\n      //We can add a limit\n      if (where.length > 0) {\n        //Where clause, we add this at the end\n        limit = ' AND rowid IN(SELECT rowid FROM <%= table %> WHERE rownum <=' + options.limit + ')';\n      } else {\n        //No where clause, create one\n        limit = ' WHERE rowid IN(SELECT rowid FROM <%= table %> WHERE rownum <=' + options.limit + ')';\n      }\n    }\n\n    const replacements = {\n      limit,\n      table: this.quoteTable(table),\n      where,\n    };\n\n    if (replacements.where) {\n      replacements.where = ' WHERE ' + replacements.where;\n    }\n\n    return Utils._.template(query)(replacements);\n  },\n\n  showIndexesQuery(tableName) {\n    let owner = '';\n\n    if (_.isPlainObject(tableName)) {\n      owner = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = ['SELECT i.index_name,i.table_name, i.column_name, u.uniqueness, i.descend ',\n      'FROM all_ind_columns i ',\n      'INNER JOIN all_indexes u ',\n      'ON (u.table_name = i.table_name AND u.index_name = i.index_name) ',\n      'WHERE (i.table_name = UPPER(\\'<%= tableName %>\\') OR i.table_name = \\'<%= tableName %>\\')',\n      owner.length > 0 ? ' AND u.TABLE_OWNER = \\'' + this.getOwnerToGoodCase(owner) + '\\'' : '',\n      ' ORDER BY INDEX_NAME, COLUMN_NAME'];\n\n    const request = sql.join('');\n    return Utils._.template(request)({\n      tableName\n    });\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    const sql = 'DROP INDEX <%= indexName %>';\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    const values = {\n      tableName,\n      indexName\n    };\n\n    return Utils._.template(sql)(values);\n  },\n\n  attributeToSQL(attribute) {\n    if (!Utils._.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // handle self referential constraints\n    if (attribute.references) {\n\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('Oracle does not support self referencial constraints, '\n          + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ' CHECK (ATTRIBUTENAME IN(' + Utils._.map(attribute.values, value => {\n        return this.escape(value);\n      }).join(', ') + '))';\n      return template;\n    } else {\n      if (attribute.autoIncrement) {\n        template = ' NUMBER(*,0) GENERATED BY DEFAULT ON NULL AS IDENTITY';\n      } else {\n        if (attribute.type && attribute.type.key === DataTypes.DOUBLE.key) {\n          template = attribute.type.toSql();\n        } else {\n          if (attribute.type) {\n            template = attribute.type.toString();\n          } else {\n            template = '';\n          }\n        }\n      }\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type && attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n      Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' DEFAULT ' + this.escape(attribute.defaultValue);\n    }\n\n    if (!attribute.autoIncrement) {\n      //If autoincrement, not null is setted automatically\n      if (attribute.allowNull === false) {\n        template += ' NOT NULL';\n      } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n        template += ' NULL';\n      }\n    }\n\n\n    if (attribute.unique === true && !attribute.primaryKey) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ' REFERENCES ' + this.quoteTable(attribute.references.model);\n\n      if (attribute.references.key) {\n        template += ' (' + attribute.references.key + ')';\n      } else {\n        template += ' (' + 'id' + ')';\n      }\n\n      if (attribute.onDelete) {\n        template += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      //Not supported by Oracle\n      //if (attribute.onUpdate) {    template += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();    }\n    }\n\n    return template;\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      const attributeName = attribute.field || key;\n      result[attributeName] = this.attributeToSQL(attribute, options).replace('ATTRIBUTENAME', attributeName);\n    }\n\n    return result;\n  },\n\n  findAutoIncrementField(factory) {\n    const fields = [];\n    for (const name in factory.attributes) {\n      if (factory.attributes.hasOwnProperty(name)) {\n        const definition = factory.attributes[name];\n\n        if (definition && definition.autoIncrement) {\n          fields.push(name);\n        }\n      }\n    }\n\n    return fields;\n  },\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  },\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  },\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  },\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  },\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  },\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  },\n\n  /**\n   * Method for setting the good case to the name passed in parameter used for defining the correct case for the owner\n   * Method to use ONLY for parameters in SYSTEM TABLES ! (in this case, owner used to be uppercase, except if it's a reserved word)\n   */\n  getOwnerToGoodCase(name) {\n\n    if (Utils._.includes(oracleReservedWords, name.toUpperCase())) {\n      //The name is reserved, we return in normal case\n      return name;\n    } else {\n      //The name is not reserved, we return in uppercase\n      return name.toUpperCase();\n    }\n  },\n\n  quoteIdentifier(identifier, force) {\n    if (identifier === '*') return identifier;\n\n    if (force === true) {\n      return Utils.addTicks(identifier, '\"');\n    } else if (identifier.indexOf('.') > - 1 || identifier.indexOf('->') > - 1) {\n      return Utils.addTicks(identifier, '\"');\n    } else {\n      //If there is a reserved word, we have to quote it\n\n      if (Utils._.includes(oracleReservedWords, identifier.toUpperCase())) {\n        return Utils.addTicks(identifier, '\"');\n      }\n      return identifier;\n    }\n  },\n\n  getConstraintsOnColumn(table, column) {\n    const tableName = table.tableName || table;\n\n    const sql = ['SELECT CONSTRAINT_NAME FROM user_cons_columns WHERE TABLE_NAME = \\'',\n      tableName.toUpperCase(),\n      '\\' ',\n      table.schema ? ' and OWNER = \\'' + this.getOwnerToGoodCase(table.schema) + '\\'' : '',\n      ' and COLUMN_NAME = \\'',\n      column.toUpperCase(),\n      '\\' AND POSITION IS NOT NULL ORDER BY POSITION'].join('');\n\n    return sql;\n  },\n\n  getForeignKeysQuery(table) {\n    //We don't call quoteTable as we don't want the schema in the table name, Oracle seperates it on another field\n    const tableName = table.tableName || table;\n    const sql = ['select table_name,constraint_name, owner from all_constraints where constraint_type in (\\'U\\', \\'R\\') and table_name = \\'',\n      tableName.toUpperCase(),\n      '\\'',\n      table.schema ? ' and owner = \\'' + this.getOwnerToGoodCase(table.schema) + '\\'' : '',\n      ' order by table_name, constraint_name'].join('');\n\n    return sql;\n  },\n\n\n  quoteTable(param, as) {\n    let table = '';\n\n    if (_.isObject(param)) {\n      if (param.schema) {\n        table += this.quoteIdentifier(param.schema) + '.';\n      }\n      if (Utils._.includes(oracleReservedWords, param.tableName.toUpperCase()) || param.tableName.indexOf('_') === 0) {\n        table += this.quoteIdentifier(param.tableName, true);\n      } else {\n        table += this.quoteIdentifier(param.tableName);\n      }\n    } else {\n      //If there is a reserved word, we have to quote it\n      if (Utils._.includes(oracleReservedWords, param.toUpperCase()) || param.indexOf('_') === 0) {\n        table = this.quoteIdentifier(param, true);\n      } else {\n        table = this.quoteIdentifier(param);\n      }\n    }\n\n    //Oracle don't support as for table aliases\n    if (as) {\n      if (as.indexOf('.') > - 1 || as.indexOf('_') === 0) {\n        table += ' ' + this.quoteIdentifier(as, true);\n      } else {\n        table += ' ' + this.quoteIdentifier(as);\n      }\n    }\n    return table;\n  },\n\n  nameIndexes(indexes, rawTablename) {\n    return Utils._.map(indexes, index => {\n      if (!index.hasOwnProperty('name')) {\n        const onlyAttributeNames = index.fields.map(field => (typeof field === 'string') ? field : (field.name || field.attribute));\n        let indexName = Utils.underscore(rawTablename + '_' + onlyAttributeNames.join('_'));\n        if (indexName.indexOf('[') > -1 || indexName.indexOf(']') > -1 || indexName.indexOf('(') > -1 || indexName.indexOf(')') > -1) {\n          //If we have special characters, we have to quote everything\n          indexName = `\"${indexName}\"`;\n        }\n        index.name = indexName;\n      }\n\n      return index;\n    });\n  },\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return this.dropConstraintQuery(tableName, foreignKey);\n  },\n\n  getPrimaryKeyConstraintQuery(tableName) {\n\n    const sql = ['SELECT cols.column_name, atc.identity_column ',\n      'FROM all_constraints cons, all_cons_columns cols ',\n      'INNER JOIN all_tab_columns atc ON(atc.table_name = cols.table_name AND atc.COLUMN_NAME = cols.COLUMN_NAME )',\n      'WHERE cols.table_name = \\'',\n      tableName.tableName ? tableName.tableName.toUpperCase() : tableName.toUpperCase(),\n      '\\' ',\n      tableName.schema ? 'AND cols.owner = \\'' + this.getOwnerToGoodCase(tableName.schema) + '\\' ' : ' ',\n      'AND cons.constraint_type = \\'P\\' ',\n      'AND cons.constraint_name = cols.constraint_name ',\n      'AND cons.owner = cols.owner ',\n      'ORDER BY cols.table_name, cols.position'].join('');\n\n    return sql;\n  },\n\n  /**\n   * Request to know if the table has a identity primary key, returns the name of the declaration of the identity if true\n   */\n  isIdentityPrimaryKey(tableName) {\n    return ['SELECT TABLE_NAME,COLUMN_NAME, COLUMN_NAME,GENERATION_TYPE,IDENTITY_OPTIONS FROM DBA_TAB_IDENTITY_COLS WHERE TABLE_NAME=\\'',\n      tableName.tableName ? tableName.tableName.toUpperCase() : tableName.toUpperCase(),\n      '\\' ',\n      tableName.schema ? 'AND OWNER = \\'' + this.getOwnerToGoodCase(tableName.schema) + '\\' ' : ' '].join('');\n  },\n\n  /**\n   * Drop identity\n   * Mandatory, Oracle doesn't support dropping a PK column if it's an identity -> results in database corruption\n   */\n  dropIdentityColumn(tableName, columnName) {\n    const table = this.quoteTable(tableName);\n\n    return 'ALTER TABLE ' + table + ' MODIFY ' + columnName + ' DROP IDENTITY';\n  },\n\n  dropConstraintQuery(tableName, constraintName) {\n    const sql = 'ALTER TABLE <%= table %> DROP CONSTRAINT \"<%= constraint %>\"';\n\n    return Utils._.template(sql)({\n      table: this.quoteTable(tableName),\n      constraint: constraintName\n    });\n  },\n\n  setAutocommitQuery(value) {\n    if (value) {\n      //Do nothing, just for eslint\n    }\n    return '';\n  },\n\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    //We force the transaction level to the highest to have consistent datas \n    return 'SET TRANSACTION ISOLATION LEVEL READ COMMITTED;';\n  },\n\n  generateTransactionId() {\n    //Oracle doesn't support transaction names > 32...\n    //To deal with -savepoint-XX , we generate the uuid and then get the crc32 of it\n    return crc32(uuid.v4());\n  },\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return 'SAVEPOINT \"' + transaction.name + '\"';\n    }\n\n    return 'BEGIN TRANSACTION';\n  },\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION';\n  },\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return 'ROLLBACK TO SAVEPOINT \"' + transaction.name + '\"';\n    }\n\n    return 'ROLLBACK TRANSACTION';\n  },\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs) {\n    let mainFragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;\n\n    if (mainTableAs) {\n      mainFragment += ' ' + mainTableAs;\n    }\n\n    return mainFragment;\n  },\n\n  addLimitAndOffset(options, model) {\n    let fragment = '';\n    const offset = options.offset || 0\n      , isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n\n    let orders = {};\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || (options.include && !orders.subQueryOrder.length)) {\n        fragment += (options.order && !isSubQuery) ? ', ' : ' ORDER BY ';\n        fragment += model.primaryKeyField;\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ' OFFSET ' + this.escape(offset) + ' ROWS';\n      }\n\n      if (options.limit) {\n        fragment += ' FETCH NEXT ' + this.escape(options.limit) + ' ROWS ONLY';\n      }\n    }\n\n    return fragment;\n  },\n\n  booleanValue(value) {\n    return !!value ? 1 : 0;\n  }\n\n};\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, \"'\");\n}\n\nmodule.exports = Utils._.extend(Utils._.clone(AbstractQueryGenerator), QueryGenerator);\n"]}