{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/oracle/query.js"],"names":["Utils","require","Promise","AbstractQuery","sequelizeErrors","parserStore","_","Query","connection","sequelize","options","instance","model","extend","logging","console","log","plain","raw","checkLoggingOption","outFormat","connectionManager","lib","OBJECT","sql","parameters","self","oracledb","regex","RegExp","match","replace","regExResult","exec","outParameters","parameterName","substring","length","type","dir","BIND_OUT","NUMBER","STRING","indexOf","benchmark","queryBegin","Date","now","uuid","startsWith","autocommit","resolve","autoCommit","undefined","execute","then","catch","error","message","formatError","Array","isArray","result","outBinds","commit","err","rollback","Object","keys","includes","key","row","formatedResult","formatResults","_run","data","isInsertQuery","handleInsertQuery","isShowTablesQuery","handleShowTablesQuery","rows","isDescribeQuery","modelAttributes","describeModelAttributes","forEach","_result","Default","COLUMN_NAME","toLowerCase","i","DATA_TYPE","toUpperCase","allowNull","NULLABLE","defaultValue","primaryKey","PRIMARY","isShowIndexesQuery","handleShowIndexesQuery","isSelectQuery","attrs","isSelectCountQuery","returnValue","count","COUNT","finalRows","rowKeys","returnObject","outKey","mapKeys","fieldMap","rowKey","value","convertStringToObj","push","attrKeys","attributes","attribute","attrKey","fieldName","field","rowsIdx","element","newRow","keysIdx","includeMap","name","parts","split","includeKeys","splice","join","firstIdx","realKey","substr","typeid","toLocaleString","parse","get","handleSelectQuery","isCallQuery","isUpdateQuery","isBulkUpdateQuery","rowsAffected","isBulkDeleteQuery","isVersionQuery","version","VERSION","versions","isForeignKeysQuery","isUpsertQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","results","rawValue","rowData","map","constraint","camelCase","path","obj","part","last","pop","shift","tableName","resultSet","TABLE_NAME","schema","TABLE_SCHEMA","errors","fields","uniqueKey","uniqueKeys","currKey","find","msg","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","ForeignKeyConstraintError","index","parent","DatabaseError","acc","indexRecord","INDEX_NAME","unique","UNIQUENESS","primary","order","DESCEND","collate","returnIndexes","accKeys","accKey","metaData","primaryKeyAttribute","pkReturnVal","autoIncrementField","autoIncrementFieldAlias","id","rawAttributes","hasOwnProperty","getInsertIdField","module","exports","default"],"mappings":"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","file":"query.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst Promise = require('../../promise');\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors.js');\nconst parserStore = require('../parserStore')('oracle');\nconst _ = require('lodash');\n\nclass Query extends AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    super();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = Utils._.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n\n    this.checkLoggingOption();\n    this.outFormat = options.outFormat || this.sequelize.connectionManager.lib.OBJECT;\n  }\n\n\n  getInsertIdField() {\n    return 'id';\n  }\n\n  _run(connection, sql, parameters) {\n    const self = this;\n\n    if (parameters) {\n      //Nothing, just for eslint\n    }\n\n    //We set the oracledb \n    const oracledb = self.sequelize.connectionManager.lib;\n    //Regexp for the bind params\n    const regex = new RegExp('([$][:][a-zA-Z_]+)[;]([a-zA-Z(0-9)[]+[$])');\n\n    //We remove the / that escapes quotes\n    if (sql.match(/^(SELECT|INSERT|DELETE)/)) {\n      this.sql = sql.replace(/; *$/, '');\n    } else {\n      this.sql = sql;\n    }\n\n    //Method to generate the object for Oracle out bindings; format -> $:name;type$\n    let regExResult = regex.exec(this.sql);\n    const outParameters = {};\n\n    while (regExResult !== null) { //if we have multiple params\n\n      //We extract the name of the parameter to bind, removes the $: at the beginning\n      const parameterName = regExResult[1].substring(2, regExResult[1].length);\n      //We extract the type, removes the $ at the end\n      const type = regExResult[2].substring(0, regExResult[2].length - 1);\n      \n      //We bind the type passed as argument to the real type\n      switch (type) {\n        case 'INTEGER':\n        case 'NUMBER':\n          outParameters[parameterName] = { dir: oracledb.BIND_OUT, type: oracledb.NUMBER };\n          break;\n        case 'STRING':\n          outParameters[parameterName] = { dir: oracledb.BIND_OUT, type: oracledb.STRING };\n          break;\n        default:\n          //Default, we choose String \n          outParameters[parameterName] = { dir: oracledb.BIND_OUT, type: oracledb.STRING };\n          break;\n      }\n\n      //Finally we replace the param in the sql by the correct format for Oracle:  $:name;type$ -> :name\n      if (this.sql.indexOf(regExResult[0]) > -1 && this.sql.indexOf(`'${regExResult[0]}'`) > -1) {\n        //if the parameters is between quotes\n        this.sql = this.sql.replace('\\'' + regExResult[0] + '\\'', `:${parameterName}`);\n      } else {\n        this.sql = this.sql.replace(regExResult[0], `:${parameterName}`);\n      }\n\n      //We exec the regexp again to see if there are other parameters  \n      regExResult = regex.exec(this.sql);\n    }\n\n    this.outParameters = outParameters;\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (connection.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n      // console.log('Executing (' + (connection.uuid || 'default') + '): ' + this.sql);\n\n      // TRANSACTION SUPPORT\n    if (_.startsWith(self.sql, 'BEGIN TRANSACTION')) {\n      self.autocommit = false;\n      return Promise.resolve();\n    } else if (_.startsWith(self.sql, 'SET AUTOCOMMIT ON')) {\n      self.autocommit = true;\n      return Promise.resolve();\n    } else if (_.startsWith(self.sql, 'SET AUTOCOMMIT OFF')) {\n      self.autocommit = false;\n      return Promise.resolve();\n    } else if (_.startsWith(self.sql, 'DECLARE x NUMBER')) {\n      //Calling a stored procedure for bulkInsert with NO attributes, returns nothing\n      if (self.autoCommit === undefined) {\n        if (connection.uuid) {\n          self.autoCommit = false;\n        } else {\n          self.autoCommit = true;\n        }\n      }\n      return connection.execute(self.sql, outParameters, {autoCommit : self.autoCommit})\n        .then(() => {\n          return {};\n        })\n        .catch(error => {\n          console.error(error.message);\n          throw self.formatError(error);\n        });\n    } else if (_.startsWith(self.sql, 'BEGIN')) {\n      //Call to stored procedures - BEGIN TRANSACTION has been treated before\n      if (self.autoCommit === undefined) {\n        if (connection.uuid) {\n          self.autoCommit = false;\n        } else {\n          self.autoCommit = true;\n        }\n      }\n\n      return connection.execute(self.sql, [], { outFormat: self.outFormat, autoCommit : self.autoCommit })\n      .then(result => {\n        if (!Array.isArray(result.outBinds)) {\n          return [result.outBinds];\n        }\n        return result.outBinds;\n      })\n      .catch(error => {\n        console.error(error.message);\n        throw self.formatError(error);\n      });\n    } else if (_.startsWith(self.sql, 'COMMIT TRANSACTION')) {\n      return connection.commit()\n        .then(() => {\n          return {};\n        })\n        .catch(err => {\n          throw self.formatError(err);\n        });\n    } else if (_.startsWith(self.sql, 'ROLLBACK TRANSACTION')) {\n      return connection.rollback()\n        .then(() => {\n          return {};\n        })\n        .catch(err => {\n          throw self.formatError(err);\n        });\n    } else if (_.startsWith(self.sql, 'SET TRANSACTION')) {\n      return Promise.resolve({});\n    } else {\n      // QUERY SUPPORT\n\n      //As Oracle does everything in transaction, if autoCommit is not defined, we set it to true \n      if (self.autoCommit === undefined) {\n        if (connection.uuid) {\n          self.autoCommit = false;\n        } else {\n          self.autoCommit = true;\n        }\n      }\n      if (Object.keys(self.outParameters).length > 0) {\n        //If we have some mapping with parameters to do - INSERT queries \n        return connection.execute(self.sql, self.outParameters, { outFormat: self.outFormat, autoCommit: self.autoCommit })\n        .then(result => {\n          if (benchmark) {\n            self.sequelize.log('Executed (' + (connection.uuid || 'default') + '): ' + self.sql, (Date.now() - queryBegin), self.options);\n          }\n            //console.log('Executed (' + (connection.uuid || 'default') + '): ' + self.sql);\n\n          //Specific case for insert\n          if (_.includes(self.sql, 'INSERT INTO')) {\n\n            //For returning into, oracle returns : {ID : [id]}, we need : [{ID : id}]\n            //Treating the outbinds parameters\n            const keys = Object.keys(self.outParameters);\n            const key = keys[0];\n\n            const row = {};\n            //Treating the outbinds parameters\n            row[key] = Array.isArray(result.outBinds[key]) ? result.outBinds[key][0] : result.outBinds[key]; \n            result = [row];\n\n          } else if (!Array.isArray(result.outBinds)) {\n            result = [result.outBinds];\n          }\n\n          const formatedResult = self.formatResults(result);\n\n          return [formatedResult];\n        })\n        .catch(error => {\n          // console.error(error.message);\n          throw self.formatError(error);\n        });\n      } else {\n        //Normal execution\n        return connection.execute(self.sql, [], { outFormat: self.outFormat, autoCommit: self.autoCommit })\n        .then(result => {\n          if (benchmark) {\n            self.sequelize.log('Executed (' + (connection.uuid || 'default') + '): ' + self.sql, (Date.now() - queryBegin), self.options);\n          }\n          // console.log('Executed (' + (connection.uuid || 'default') + '): ' + self.sql);\n          //const startId = metaData[query.getInsertIdField()] - metaData.changes + 1;\n          const formatedResult = self.formatResults(result);\n\n          return formatedResult === undefined ? {} : formatedResult;\n        })\n        .catch(error => {\n          // console.dir(error);\n          throw self.formatError(error);\n        });\n      }\n    }\n\n  };\n\n  run(sql, parameters) {\n    const self = this;\n\n    // return Promise.using(this.connection.lock(), function (connection) {\n    return self._run(this.connection, sql, parameters);\n    // });\n  };\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   * Oracle format : \n   * { rows: //All rows\n     [ [ 'Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production' ],\n       [ 'PL/SQL Release 11.2.0.1.0 - Production' ],\n       [ 'CORE\\t11.2.0.1.0\\tProduction' ],\n       [ 'TNS for 64-bit Windows: Version 11.2.0.1.0 - Production' ],\n       [ 'NLSRTL Version 11.2.0.1.0 - Production' ] ],\n    resultSet: undefined,\n    outBinds: undefined, //Used for dbms_put.line\n    rowsAffected: undefined, //Number of rows affecter\n    metaData: [ { name: 'BANNER' } ] }\n  *\n  * @param {Array} data - The result of the query execution.\n  */\n  formatResults(data) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n    } else if (this.isShowTablesQuery()) {\n      result = this.handleShowTablesQuery(data.rows);\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      const options = this.options;\n      let modelAttributes = [];\n      if ('describeModelAttributes' in options) {\n        //If we have the model attributes inside the options, we can use it to map the column names\n        modelAttributes = Object.keys(this.options.describeModelAttributes);\n      }\n      data.rows.forEach(_result => {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, ''); /* jshint ignore: line */\n        }\n\n        if (!(_result.COLUMN_NAME.toLowerCase() in result)) {\n          let key = _result.COLUMN_NAME.toLowerCase();\n\n          if (modelAttributes.length > 0) {\n            for (let i = 0; i < modelAttributes.length; i++) {\n              if (modelAttributes[i].toLowerCase() === key) {\n                key = modelAttributes[i];\n                i = modelAttributes.length;\n              }\n            }\n          } \n\n          result[key] = {\n            type: _result.DATA_TYPE.toUpperCase(),\n            allowNull: (_result.NULLABLE === 'N' ? false : true),\n            defaultValue: undefined,\n            primaryKey: _result.PRIMARY === 'PRIMARY'\n          };\n        }\n      });\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data.rows);\n    } else if (this.isSelectQuery()) {\n      const rows = data.rows;\n      let keys = [];\n      const attrs = {};\n      if (rows.length > 0) {\n        keys = Object.keys(rows[rows.length - 1]); //we get the keys\n\n        //Since Oracle returns the column name uppercase, we have to transform it to match the model definition\n        if (!this.model) {\n          //NO model, we will return everything in lowerCase, except for some specific cases\n          if (this.isSelectCountQuery() && this.sql.toLowerCase().indexOf('group') === - 1) {\n            //We should pass here if we only have SELECT COUNT(*) FROM TABLE (WHERE)\n            const match = this.sql.match(/.* AS (.*) FROM .*/i);\n            if (match[1]) {\n              //We use the alias\n              const returnValue = {};\n              returnValue[match[1]] = rows[0][match[1].toUpperCase()]; \n              return returnValue;\n            }\n            return {count : rows[0].COUNT};\n          }\n          let finalRows = [];\n          const rowKeys = Object.keys(rows[0]);\n          if (rowKeys.length > 0) {\n            rows.forEach(row => {\n              let returnObject = {};\n              rowKeys.forEach(rowKey => {\n                let outKey = '';\n                let mapKeys = [];\n                if (this.options && this.options.fieldMap) {\n                  mapKeys = Object.keys(this.options.fieldMap);\n                }\n                if (_.includes(mapKeys, rowKey.toLowerCase())) {\n                  //We have a fieldMap for the names\n                  outKey = this.options.fieldMap[rowKey.toLowerCase()];\n                } else {\n                  outKey = rowKey.toLowerCase();\n                }\n                const value = {};\n                if (outKey.indexOf('.') > -1) {\n                  //If there are dots in the key, we create an object\n                  this.convertStringToObj(outKey, row[rowKey], value);\n                  returnObject = value;\n                } else {\n                  returnObject[outKey] = row[rowKey];\n                }\n              });\n\n              //if plain, we have only one row and we don't want to return it into an array\n              if (this.options.plain) {\n                finalRows = returnObject;\n              } else {\n                finalRows.push(returnObject);\n              }\n            });\n          \n            return finalRows;\n          }\n          return rows;\n        }\n\n        //We have a model, we will map the properties returned by Oracle to the field names in the model\n        const attrKeys = Object.keys(this.model.attributes);\n        attrKeys.forEach(attrKey => {\n          //We map the fieldName in lowerCase to the real fieldName, makes it easy to rebuild the object\n          const attribute = this.model.attributes[attrKey];\n          //We generate an array like this : attribute(toLowerCase) : attribute(real case)\n          attrs[attribute.fieldName.toLowerCase()] = attribute.fieldName;\n\n          if (attribute.fieldName !== attribute.field) {\n            //Specific case where field and fieldName are differents, in DB it's field, in model we want fieldName\n            attrs[attribute.field.toLowerCase()] = attribute.fieldName;\n          }\n        });\n      }\n      const finalRows = [];\n\n      for(let rowsIdx = 0; rowsIdx < rows.length ; rowsIdx++) {\n        const element = rows[rowsIdx];\n        const newRow = {};\n\n        for(let keysIdx = 0; keysIdx < keys.length; keysIdx++) {\n          const key = keys[keysIdx];\n\n          //Oracle returns everything in uppercase, so we have to transform this\n          //As seen in development process, it only occurs for the first element, if it's foo.bar; foo will be uppercase, bar will be ok\n          if (key.indexOf('.') > -1) {\n            //We have the value of an include\n            if (this.options && this.options.includeMap) {\n              let name = '';\n              const parts = key.split('.');\n              //we have some includes, we have to map the names in returned row to includeMap\n              const includeKeys = Object.keys(this.options.includeMap);\n              for(let i = 0 ; i <  includeKeys.length; i++) {\n                if (parts[0].toUpperCase() ===  includeKeys[i].toUpperCase()) {\n                  parts.splice(0, 1); //We remove the first part\n                  name = `${includeKeys[i]}.${parts.join('.')}`;\n                  break;\n                }\n              }\n              //We reset the value with the \"good\" name\n              newRow[name] = element[key];\n            }\n          } else {\n            //No include, classic property\n            if (attrs[key.toLowerCase()] === undefined) {\n              //If we don't have a mapping name provided (from the model), we take it from sql\n              let firstIdx = -1;\n\n              //We first start by checking if this is defined as an alias \n              if (this.sql.toUpperCase().indexOf('AS ' + key) > -1) {\n                //This is an alias, we take it\n                firstIdx = this.sql.toUpperCase().indexOf('AS ' + key) + 3;\n              } else {\n                //No alias, we take the first occurence we find\n                firstIdx = this.sql.toUpperCase().indexOf(key);\n              }\n              \n              const realKey = this.sql.substr(firstIdx, key.length);\n              newRow[realKey] = element[key];\n            } else {\n              let typeid = this.model.attributes[attrs[key.toLowerCase()]].type.toLocaleString();\n\n              //For some types, the \"name\" of the type is returned with the length, we remove it\n              if (typeid.indexOf('(') > -1) {\n                typeid = typeid.substr(0, typeid.indexOf('('));\n              }\n\n              const parse = parserStore.get(typeid);\n              let value =  element[key];\n\n              if (value !== null & !!parse) {\n                value = parse(value);\n              }\n              newRow[attrs[key.toLowerCase()]] = value;\n            }\n          }\n        }\n        finalRows.push(newRow);\n      }\n\n      data.rows = finalRows;\n\n      result = this.handleSelectQuery(data.rows);\n    } else if (this.isCallQuery()) {\n      result = data.rows[0];\n    } else if (this.isUpdateQuery()) {\n      result = [result];\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.rowsAffected;\n    } else if (this.isBulkDeleteQuery()) {\n      result = data.rowsAffected;\n    } else if (this.isVersionQuery()) {\n      const version = data.rows[0].VERSION;\n      if (version) {\n        const versions = version.split('.');\n        result = `${versions[0]}.${versions[1]}.${versions[2]}`;\n      } else {\n        result = '0.0.0';\n      }\n    } else if (this.isForeignKeysQuery()) {\n      result = data.rows;\n    } else if (this.isUpsertQuery()) {\n      //Upsert Query, will return nothing\n      result = undefined;\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      const results = [];\n      if (data && data.rows) {\n        data.rows.forEach(rowData => {\n          const rawValue = {};\n        \n          const keys = Object.keys(rowData);\n          keys.forEach(key => {\n            rawValue[key.toLowerCase()] = rowData[key];\n          });\n        \n          results.push(rawValue);\n        });\n      }\n    \n      //Don't know why, but with this .spread works...\n      result = [results, results];\n    }\n\n    return result;\n  };\n\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as its generated by stored procedure\n    return data.rows.map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key].toLowerCase();\n      }\n      return constraint;\n    });\n  }\n\n  /**\n   * Convert string with dot notation to object\n   * ie : a.b.c -> a{b{c}}\n   */\n  convertStringToObj(path, value, obj) {\n    const parts = path.split('.');\n    let part;\n    const last = parts.pop();\n    part = parts.shift();\n    while (part) {\n      if ( typeof obj[part] !== 'object') {\n        obj[part] = {};\n      } \n      obj = obj[part];\n      part = parts.shift();\n    }\n    obj[last] = value;\n  };\n\n  isUpsertQuery() {\n    return this.sql.startsWith('MERGE');\n  };\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  };\n\n  formatError(err) {\n    let match;\n    //ORA-00001: unique constraint (USER.XXXXXXX) violated\n    match = err.message.match(/unique constraint ([\\s\\S]*) violated/);\n    if (match && match.length > 1) {\n      match[1] = match[1].replace('(', '').replace(')', '').split('.')[1]; //As we get (SEQUELIZE.UNIQNAME), we replace to have UNIQNAME\n      const errors = [];\n      let fields = []\n        , message = 'Validation error'\n        , uniqueKey = null;\n\n\n      if (this.model) {\n        const uniqueKeys = Object.keys(this.model.uniqueKeys);\n\n        const currKey = uniqueKeys.find(key => {\n          //We check directly AND with quotes -> \"a\"\" === a || \"a\" === \"a\"\n          return key.toUpperCase() === match[1].toUpperCase() || key.toUpperCase() === `\"${match[1].toUpperCase()}\"`;\n        });\n\n        if (currKey) {\n          uniqueKey = this.model.uniqueKeys[currKey];\n          fields = uniqueKey.fields;\n        }\n\n        if (uniqueKey && !!uniqueKey.msg) {\n          message = uniqueKey.msg;\n        }\n\n        fields.forEach(field => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field), 'unique violation', field, null));\n        });\n\n      }\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        err,\n        fields\n      });\n    }\n\n    //ORA-02291: integrity constraint (string.string) violated - parent key not found / ORA-02292: integrity constraint (string.string) violated - child record found\n    match = err.message.match(/ORA-02291/) ||\n      err.message.match(/ORA-02292/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  };\n\n\n  isShowIndexesQuery() {\n    return this.sql.indexOf('SELECT i.index_name,i.table_name, i.column_name, u.uniqueness') > - 1;\n  };\n\n  isSelectCountQuery() {\n    return this.sql.toUpperCase().indexOf('SELECT COUNT(*)') > - 1;\n  };\n\n  handleShowIndexesQuery(data) {\n    const acc = [];\n\n    //We first treat the datas\n    data.forEach(indexRecord => {\n      \n      //We create the object\n      if (!acc[indexRecord.INDEX_NAME]) {\n        acc[indexRecord.INDEX_NAME] = {\n          unique : indexRecord.UNIQUENESS === 'UNIQUE' ? true : false,\n          primary: (indexRecord.INDEX_NAME.toLowerCase().indexOf('pk') === 0),\n          name: indexRecord.INDEX_NAME.toLowerCase(),\n          tableName: indexRecord.TABLE_NAME.toLowerCase(),\n          type: undefined\n        };\n        acc[indexRecord.INDEX_NAME].fields = [];\n      }\n\n      //We create the fields\n      acc[indexRecord.INDEX_NAME].fields.push({\n        attribute: indexRecord.COLUMN_NAME,\n        length: undefined,\n        order: indexRecord.DESCEND,\n        collate: undefined\n      });\n\n    });\n    const returnIndexes = [];\n\n\n    const accKeys = Object.keys(acc);\n    accKeys.forEach(accKey => {\n      returnIndexes.push(acc[accKey]);\n    });\n\n    return returnIndexes;\n  };\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance && results.length > 0) {\n      if ('pkReturnVal' in results[0]) {\n        //The PK of the table is a reserved word (ex : uuid), we have to change the name in the result for the model to find the value correctly\n        results[0][this.model.primaryKeyAttribute] = results[0].pkReturnVal;\n        delete results[0].pkReturnVal;\n      }\n      // add the inserted row id to the instance\n      const autoIncrementField = this.model.autoIncrementField;\n      let autoIncrementFieldAlias = null, id = null;\n\n      if (this.model.rawAttributes.hasOwnProperty(autoIncrementField) &&\n        this.model.rawAttributes[autoIncrementField].field !== undefined)\n        autoIncrementFieldAlias = this.model.rawAttributes[autoIncrementField].field;\n\n      id = id || (results && results[0][this.getInsertIdField()]);\n      id = id || (metaData && metaData[this.getInsertIdField()]);\n      id = id || (results && results[0][autoIncrementField]);\n      id = id || (autoIncrementFieldAlias && results && results[0][autoIncrementFieldAlias]);\n\n      this.instance[autoIncrementField] = id;\n    }\n  };\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;"]}