{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/oracle/query-interface.js"],"names":["Utils","require","_","Promise","dropAllTables","options","skip","upperSkip","map","table","toUpperCase","dropAllTablesFct","each","tableNames","Object","keys","tableName","length","indexOf","dropTable","assign","cascade","doAfter","promises","idx","sequelizeInstance","elem","query","sql","then","resolve","showAllTables","getForeignKeysForTables","forEach","normalizedTableName","isObject","schema","foreignKeys","QueryGenerator","dropForeignKeyQuery","foreignKey","push","sequelize","removeColumn","attributeName","raw","constraintsSql","descriptionTableQuery","isIdentityPrimaryKey","spread","i","PKResult","column_name","dropIdentitySql","dropIdentityColumn","findConstraintSql","getConstraintsOnColumn","results","deleteRecursively","constraints","dropConstraintQuery","result","constraint_name","removeSql","removeColumnQuery","addOptionsForDescribe","models","found","model","attributes","module","exports"],"mappings":"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","file":"query-interface.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst _ = require('lodash');\nconst Promise = require('../../promise');\n\n/**\n Returns an object that treats Oracle's inabilities to do certain queries.\n */\n\n/**\n  A wrapper that fixes Oracle's inability to cleanly drop constraints on multiple tables if the calls are made at the same time \n  @param  {Object} options\n */\nconst dropAllTables = function(options) {\n\n  options = options || {};\n  const skip = options.skip || [];\n\n  //As oracle uppercase all tables names, we create a mapping array with everything in upperCase\n  const upperSkip = skip.map(table => {\n    return table.toUpperCase();\n  });\n\n  const dropAllTablesFct = tableNames => Promise.each(tableNames, tableName => {\n    // if tableName is not in the Array of tables names then dont drop it\n    if (Object.keys(tableName).length > 0) {\n      if (upperSkip.indexOf(tableName.tableName) === -1) {\n        return this.dropTable(tableName, _.assign({}, options, { cascade: true }) );\n      }\n    } else {\n      if (upperSkip.indexOf(tableName) === -1) {\n        return this.dropTable(tableName, _.assign({}, options, { cascade: true }) );\n      }\n    }\n  });\n\n  //Function to make each call to drop indexes / FK / PK... \n  //Mandatory for Oracle as it could try to delete a PK and a FK at the same time on different tables and causes issues with the DB\n  const doAfter = function(promises, idx, sequelizeInstance) {\n    if (promises.length > 0) {\n        \n      if (idx < promises.length) {\n        const elem = promises[idx];\n        idx++;\n        //While elements, we execute the query\n        return sequelizeInstance.query(elem.sql, elem.options)\n        .then(() => {\n          return doAfter(promises, idx, sequelizeInstance);\n        });\n      } else {\n        //Done, we get out\n        return Promise.resolve({});\n      }\n    } else {\n      return Promise.resolve({});\n    }\n  };\n\n  return this.showAllTables(options).then(tableNames => {\n    return this.getForeignKeysForTables(tableNames, options).then(foreignKeys => {\n      const promises = [];\n\n      tableNames.forEach(tableName => {\n        let normalizedTableName = tableName;\n        if (Utils._.isObject(tableName)) {\n          normalizedTableName = tableName.schema + '.' + tableName.tableName;\n        }\n\n        foreignKeys[normalizedTableName].forEach(foreignKey => {\n          const sql = this.QueryGenerator.dropForeignKeyQuery(tableName, foreignKey);\n          //Instead of calling the promises, we set all parameters into an array\n          promises.push({sql, options});\n        });\n      });\n\n      return doAfter(promises, 0, this.sequelize)\n      .then(() => {\n        return dropAllTablesFct(tableNames);\n      });\n    });\n  });\n};\n\n\n/**\n  A wrapper that fixes Oracle's inability to cleanly remove columns from existing tables if they have a default constraint.\n\n  @method removeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName     The name of the table.\n  @param  {String} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n @private\n */\nconst removeColumn = function(tableName, attributeName, options) {\n  options = Object.assign({ raw: true }, options || {});\n\n  const constraintsSql = [];\n\n  //We start by searching if the primary key is an identity\n  const descriptionTableQuery = this.QueryGenerator.isIdentityPrimaryKey(tableName);\n  return this.sequelize.query(descriptionTableQuery, options)\n  .spread(PKResult => {\n\n    for (let i = 0; i < PKResult.length; i++) {\n      //We iterate through the primary keys to determine if we are working on it\n      if (PKResult[i].column_name === attributeName.toUpperCase()) {\n        //The column we are working on is in the PK AND is an identity column, we have to drop the identity \n        const dropIdentitySql = this.QueryGenerator.dropIdentityColumn(tableName, attributeName);\n        constraintsSql.push({\n          sql : dropIdentitySql,\n          options\n        });\n        break;\n      }\n    }\n\n    //This method return all constraints on a table with a given attribute\n    const findConstraintSql = this.QueryGenerator.getConstraintsOnColumn(tableName, attributeName);\n    return this.sequelize.query(findConstraintSql, options)\n    .spread(results => {\n      if (!results.length && constraintsSql.length === 0) {\n        // No default constraint found -- we can cleanly remove the column\n        return;\n      }\n\n      //Function to execute the different remove one by one\n      const deleteRecursively = function(constraints, idx, sequelizeInstance) {\n        if (constraints.length > 0) {\n          if (idx < constraints.length) {\n            const elem = constraints[idx];\n            idx++;\n            //While elements, we execute the query\n            return sequelizeInstance.query(elem.sql, elem.options)\n            .then(() => {\n              return deleteRecursively(constraints, idx, sequelizeInstance);\n            });\n          } else {\n            //Done, we get out\n            return Promise.resolve({});\n          }\n        } else {\n          return Promise.resolve({});\n        }\n      };\n\n      results.forEach(result => {\n        //For each constraint, we get the sql\n        constraintsSql.push({\n          sql : this.QueryGenerator.dropConstraintQuery(tableName, result.constraint_name),\n          options\n        });\n      });\n\n      // const dropConstraintSql = this.QueryGenerator.dropConstraintQuery(tableName, results[0].name);\n      return deleteRecursively(constraintsSql, 0, this.sequelize);\n    })\n    .then(() => {\n      const removeSql = this.QueryGenerator.removeColumnQuery(tableName, attributeName);\n      return this.sequelize.query(removeSql, options);\n    });\n\n  });\n  \n};\n\n/**\n * A wrapper that adds the currentModel of the describe in options\n * This is used for mapping the real column names to those returned by Oracle\n */\nconst addOptionsForDescribe = function(tableName, options) {\n  if (this.sequelize && this.sequelize.models && Object.keys(this.sequelize.models).length > 0) {\n    const keys = Object.keys(this.sequelize.models);\n    let i = 0, found = false;\n    while (i < keys.length && !found) {\n      const model = this.sequelize.models[keys[i]];\n      if (model.tableName === tableName) {\n        if (options) {\n          options['describeModelAttributes'] = model.attributes;\n        } else {\n          options = {\n            'describeModelAttributes' : model.attributes\n          };\n        }\n        found = true;\n      }\n      i++;\n    }\n  }\n  return options;\n};\n\n\nmodule.exports = {\n  dropAllTables,\n  removeColumn,\n  addOptionsForDescribe\n};\n"]}