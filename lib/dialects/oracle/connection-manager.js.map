{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/oracle/connection-manager.js"],"names":["AbstractConnectionManager","require","Promise","sequelizeErrors","parserStore","ConnectionManager","dialect","sequelize","config","port","dialectModulePath","lib","maxRows","dialectOptions","fetchAsString","err","code","Error","database","length","errorToThrow","host","indexOf","connectString","dataType","refresh","clear","self","resolve","reject","connectionConfig","user","username","password","externalAuth","stmtCacheSize","checkConfigObject","Object","keys","forEach","key","getConnection","then","connection","catch","errorCode","message","split","ConnectionRefusedError","AccessDeniedError","HostNotReachableError","InvalidConnectionError","ConnectionError","tap","release","state","module","exports","default"],"mappings":"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","file":"connection-manager.js","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst Promise = require('../../promise');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('oracle');\n\nclass ConnectionManager extends AbstractConnectionManager  {\n\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 1521;\n    try {\n      if (sequelize.config.dialectModulePath) {\n        this.lib = require(sequelize.config.dialectModulePath);\n      } else {\n        this.lib = require('oracledb');\n        this.lib.maxRows = 1000;\n\n        if (sequelize.config && 'dialectOptions' in sequelize.config) {\n          const dialectOptions = sequelize.config.dialectOptions;\n          if (dialectOptions && 'maxRows' in dialectOptions) {\n            this.lib.maxRows = sequelize.config.dialectOptions.maxRows;\n          }\n\n          if (dialectOptions && 'fetchAsString' in dialectOptions) {\n            this.lib.fetchAsString = sequelize.config.dialectOptions.fetchAsString;\n          }\n        }\n        this.lib.Promise = Promise;\n      }\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        throw new Error('Please install oracledb package manually');\n      }\n      throw err;\n    }\n\n  }\n\n  /**\n  * Method for checking the config object passed and generate the full database if not fully passed\n  * With dbName, host and port, it generates a string like this : 'host:port/dbname' \n  */\n  checkConfigObject(config) {\n    //A connectString should be defined\n    if (config.database.length === 0) {\n      let errorToThrow = 'The database cannot be blank, you must specify the database name (which correspond to the service name';\n      errorToThrow += '\\n from tnsnames.ora : (HOST = mymachine.example.com)(PORT = 1521)(SERVICE_NAME = orcl)'; \n      throw new Error(errorToThrow);\n    }\n\n    if (!config.host || config.host.length === 0) {\n      throw new Error('You have to specify the host');\n    }\n\n    //The connectString has a special format, we check it\n    //ConnectString format is : host:[port]/service_name\n    if (config.database.indexOf('/') === - 1) {\n      \n      let connectString = config.host;\n\n      if (config.port && config.port !== 0) {\n        connectString += `:${config.port}`;\n      } else {\n        connectString += ':1521'; //Default port number\n      }\n      connectString += `/${config.database}`;\n      config.database = connectString;\n    }\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  connect(config) {\n    const self = this;\n    return new Promise((resolve, reject) => {\n\n      const connectionConfig = {\n        user: config.username,\n        host:  config.host,\n        port : config.port,\n        database : config.database,\n        password: config.password,\n        externalAuth : config.externalAuth,\n        stmtCacheSize : 0\n      };\n\n      //We check if there dialect options\n      if ('dialectOptions' in config) {\n        const dialectOptions = config.dialectOptions;\n\n        //If stmtCacheSize is defined, we set it\n        if ('stmtCacheSize' in dialectOptions) {\n          connectionConfig.stmtCacheSize = dialectOptions.stmtCacheSize;\n        }\n      }\n\n\n      //Check the config object\n      self.checkConfigObject(connectionConfig);\n\n      //We assume that the database has been correctly formed\n      connectionConfig.connectString = connectionConfig.database;\n\n      if (config.dialectOptions) {\n        Object.keys(config.dialectOptions).forEach(key => {\n          connectionConfig[key] = config.dialectOptions[key];\n        });\n      }\n\n      return self.lib.getConnection(connectionConfig)\n      .then(connection => {\n        //TODO Oracle - connection pooling\n        //Not relevant, node-oracledb considers it if multiple connections are opened / closed; while testing, a few connections are created and closed.\n        resolve(connection);\n      })\n      .catch(err => {\n        if (err) {\n          //We split to get the error number; it comes as ORA-XXXXX: \n          let errorCode = err.message.split(':');\n          errorCode = errorCode[0];\n\n          if (errorCode) {\n            switch (errorCode) {\n              case 'ORA-28000': //Account locked\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ORA-01017': \n                reject(new sequelizeErrors.AccessDeniedError(err));\n                break;\n              case 'ORA-12154':\n                reject(new sequelizeErrors.HostNotReachableError(err)); //ORA-12154: TNS:could not resolve the connect identifier specified\n                break;\n              case 'ORA-12514' : // ORA-12514: TNS:listener does not currently know of service requested in connect descriptor\n              case 'ORA-12541' : //ORA-12541: TNS:No listener\n                //We can't send this kind of error, so we send 'login / password invalid'\n                err.message = 'ORA-01017 : invalid username/password; logon denied';\n                reject(new sequelizeErrors.AccessDeniedError(err)); \n                break;\n              case 'EINVAL': //TODO\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n\n          reject(err); //Unknown error, we throw it anyway\n        }\n      });\n    }).tap(connection => {\n      //TODO Oracle - see if relevant\n      /*if(self.sequelize.options.timezone) {\n        return connection.execute(\"ALTER DATABASE SET time_zone = '\" + self.sequelize.options.timezone + \"'\")\n        .then(result => {\n          return Promise.resolve(connection);\n        });\n      }*/\n      return Promise.resolve(connection);\n    });\n  }\n\n  disconnect(connection) {\n    return connection.release()\n    .then(() => {\n      return true;\n    })\n    .catch(err => {\n      throw new sequelizeErrors.ConnectionError(err);\n    });\n  }\n\n  validate(connection) {\n    return connection && ['disconnected', 'protocol_error'].indexOf(connection.state) === -1;\n  }\n\n  \n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;"]}