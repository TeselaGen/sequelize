{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/abstract/query.js"],"names":["Utils","require","SqlString","Dot","QueryTypes","AbstractQuery","Error","options","logging","deprecate","console","log","attribute","include","includeNames","map","as","tableNames","filter","indexOf","length","field","message","model","Object","keys","uniqueKeys","key","fields","replace","msg","type","RAW","VERSION","UPSERT","results","metaData","result","INSERT","sql","toLowerCase","hasOwnProperty","getInsertIdField","instance","autoIncrementField","id","SHOWTABLES","_","flatten","values","resultSet","SHOWINDEXES","SHOWCONSTRAINTS","DESCRIBE","SELECT","BULKUPDATE","BULKDELETE","FOREIGNKEYS","UPDATE","fieldMap","reduce","name","undefined","raw","o","nest","transform","hasJoin","_groupJoinData","includeMap","checkExisting","hasMultiAssociation","bulkBuild","isNewRecord","includeValidated","attributes","originalAttributes","plain","dialect","replacementFunc","skipValueReplace","match","timeZone","escape","origReplacementFunc","list","Array","isArray","skipUnescape","replVal","rows","includeOptions","i","$i","$length","rowsI","row","rowsLength","keyI","keyLength","prevKey","topValues","topExists","itemHash","parentHash","topHash","resultMap","$keyPrefix","$keyPrefixString","$prevKeyPrefixString","$prevKeyPrefix","$lastKeyPrefix","$current","$parent","previousPiece","buildIncludeMap","piece","keyPrefixStringMemo","keyPrefixString","memo","substr","lastIndexOf","removeKeyPrefixMemo","removeKeyPrefix","index","keyPrefixMemo","keyPrefix","prefixString","split","lastKeyPrefixMemo","lastKeyPrefix","prefix","getUniqueKeyAttributes","uniqueKeyAttributes","chain","findKey","chr","value","primaryKeyAttributes","isEmpty","forEach","association","isSingleAssociation","push","module","exports","default"],"mappings":"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","file":"query.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst SqlString = require('../../sql-string');\nconst Dot = require('dottie');\nconst QueryTypes = require('../../query-types');\n\nclass AbstractQuery {\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], false, timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else {\n      if (options.skipValueReplace) {\n        const origReplacementFunc = replacementFunc;\n        replacementFunc = (match, key, values, timeZone, dialect, options) => {\n          if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      }\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n\n    sql = sql.replace(/\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else {\n        if (!key.match(/^\\d*$/)) {\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      }\n      if (replVal === undefined) {\n        throw new Error('Named bind parameter \"' + match + '\" has no value in the given object.');\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @param {String} sql - The SQL query which should be executed.\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @return {void}\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      Utils.deprecate('The logging-option should be either a function or false. Default: console.log');\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @return {String} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  /**\n   * Iterate over all known tables and search their names inside the sql query.\n   * This method will also check association aliases ('as' option).\n   *\n   * @param  {String} attribute An attribute of a SQL query. (?)\n   * @return {String}           The found tableName / alias.\n   * @private\n   */\n  findTableNameInAttribute(attribute) {\n    if (!this.options.include) {\n      return null;\n    }\n    if (!this.options.includeNames) {\n      this.options.includeNames = this.options.include.map(include => include.as);\n    }\n\n    const tableNames = this.options.includeNames.filter(include => attribute.indexOf(include + '.') === 0);\n\n    if (tableNames.length === 1) {\n      return tableNames[0];\n    } else {\n      return null;\n    }\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field + ' must be unique';\n\n    if (this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.indexOf(field.replace(/\"/g, '')) >= 0) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().indexOf('insert into') === 0;\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || results.hasOwnProperty(this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || metaData.hasOwnProperty(this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementField = this.model.autoIncrementField;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementField] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return Utils._.flatten(results.map(resultSet => Utils._.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = Utils._.map(results, result => Utils._.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (result.hasOwnProperty(key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().indexOf('show') === 0;\n    result = result || this.sql.toLowerCase().indexOf('describe') === 0;\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().indexOf('call') === 0;\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but its performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if ($current.includeMap[piece]) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = previousPiece+'.'+piece;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!memo[key]) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!removeKeyPrefixMemo[key]) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!keyPrefixMemo[key]) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!keyPrefixMemo[prefixString]) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!lastKeyPrefixMemo[key]) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = Utils._.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(uniqueKeyAttributes.findKey() + '.fields')\n        .map(field => Utils._.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = row[includeOptions.model.primaryKeyAttributes[0]];\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += row[includeOptions.model.primaryKeyAttributes[$i]];\n          }\n        }\n        else if (!Utils._.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && includeMap[key] === undefined) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? $parent+'.'+$prevKeyPrefix[i] : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += row[prefix+'.'+primaryKeyAttributes[0]];\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += row[prefix+'.'+primaryKeyAttributes[$i]];\n                  }\n                }\n                else if (!Utils._.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[prefix+'.'+uniqueKeyAttributes[$i]];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else {\n              if (!resultMap[itemHash]) {\n                $parent = resultMap[parentHash];\n                $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n                if (includeMap[prevKey].association.isSingleAssociation) {\n                  if ($parent) {\n                    $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                  }\n                } else {\n                  if (!$parent[$lastKeyPrefix]) {\n                    $parent[$lastKeyPrefix] = [];\n                  }\n                  $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n                }\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length -1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]];\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? $parent+'.'+$prevKeyPrefix[i] : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += row[prefix+'.'+primaryKeyAttributes[0]];\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += row[prefix+'.'+primaryKeyAttributes[$i]];\n              }\n            }\n            else if (!Utils._.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[prefix+'.'+uniqueKeyAttributes[$i]];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else {\n          if (!resultMap[itemHash]) {\n            $parent = resultMap[parentHash];\n            $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n            if (includeMap[prevKey].association.isSingleAssociation) {\n              if ($parent) {\n                $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n              }\n            } else {\n              if (!$parent[$lastKeyPrefix]) {\n                $parent[$lastKeyPrefix] = [];\n              }\n              $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n            }\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"]}