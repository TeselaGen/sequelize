{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/abstract/query-generator.js"],"names":["Utils","require","SqlString","Model","DataTypes","util","_","Dottie","Association","BelongsTo","BelongsToMany","HasMany","uuid","semver","QueryGenerator","options","extractTableDetails","tableName","schema","isPlainObject","delimiter","addSchema","param","self","_schema","table","name","_schemaDelimiter","toString","quoteTable","dropSchema","dropTableQuery","describeTableQuery","schemaDelimiter","renameTableQuery","before","after","insertQuery","valueHash","modelAttributes","defaults","modelAttributeMap","fields","values","query","valueQuery","emptyQuery","outputFragment","identityWrapperRequired","tmpTable","each","attribute","key","field","_dialect","supports","returnValues","returning","output","hasTrigger","tmpTableTrigger","tmpColumns","outputColumns","modelKey","type","VIRTUAL","length","quoteIdentifier","toSql","replacement","columns","template","trim","selectFromTmp","EXCEPTION","exception","gte","sequelize","databaseVersion","v4","replace","onDuplicate","removeNullValuesFromHash","omitNull","hasOwnProperty","value","push","autoIncrement","defaultValue","splice","DEFAULT","escape","undefined","context","replacements","ignoreDuplicates","IGNORE","attributes","join","identityInsert","bulkInsertQuery","attrValueHashes","rawAttributes","tuples","serials","allAttributes","onDuplicateKeyUpdate","attrValueHash","forOwn","indexOf","map","bulkDefault","updateOnDuplicate","attr","updateQuery","where","limit","dialect","Object","keys","mapToModel","update","whereQuery","arithmeticQuery","operator","nameIndexes","indexes","rawTablename","index","onlyAttributeNames","underscore","addIndexQuery","Array","isArray","indexName","indicesType","indexType","method","using","prefix","isString","fieldsSql","SequelizeMethod","handleSequelizeMethod","result","Error","inspect","collate","order","_conformIndex","quoteIdentifiers","concurrently","ind","indexViaAlter","concat","unique","parser","compact","addConstraintQuery","constraintSnippet","getConstraintSnippet","constraintName","_isSequelizeMethod","fieldsSqlQuotedString","fieldsSqlString","toUpperCase","whereItemsQuery","references","referencesSnippet","onUpdate","onDelete","removeConstraintQuery","as","isObject","schemas","quote","collection","parent","connector","validOrderOptions","forEach","item","previous","previousAssociation","previousModel","target","prototype","model","through","getAssociationForAlias","format","orderIndex","literal","associations","itemSplit","split","JSON","identifier","path","slice","jsonPathExtractionQuery","collectionLength","tableNames","i","_modelAttribute","sql","collectionItem","fieldName","raw","identifiers","typeValidation","validate","isList","stringify","simpleEscape","partialRight","timezone","selectQuery","mainQueryItems","subQueryItems","subQuery","hasMultiAssociation","main","mainTable","quotedName","topLevelInfo","names","mainJoinQueries","subJoinQueries","tableAs","t","keyAtt","find","primaryKeyAttributes","escapeAttributes","include","groupedLimit","separate","joinQueries","generateInclude","externalAs","internalAs","mainQuery","selectFromTableFragment","assign","groupedLimitOrder","whereKey","groupedTableName","on","foreignKeyField","manyFromSource","groupedLimitOptions","_validateIncludedElements","association","duplicating","required","hasJoin","includeMap","includeNames","alias","$$PLACEHOLDER$$","baseQuery","placeHolder","whereItemQuery","splicePos","groupWhere","foreignIdentifierField","spliceStr","getWhereConditions","match","group","having","orders","getQueryOrders","mainQueryOrder","subQueryOrder","limitOrder","addLimitAndOffset","lock","level","lockKey","forShare","lockOf","of","mainTableAs","addTable","TICK_CHAR","parentTableName","mainChildIncludes","subChildIncludes","requiredMismatch","includeAs","joinQuery","keysEscaped","includeIgnoreAttributes","includeAttributes","attrAs","verbatim","Literal","Cast","Fn","val","generateThroughJoin","subQueryFilter","associationWhere","identifierField","$eq","sourceKeyField","source","primaryKeyField","$query","getTableName","$and","subQueryWhere","asIs","generateJoin","childInclude","_pseudo","childJoinQueries","body","condition","parentIsTop","$parent","joinWhere","left","attrLeft","sourceKeyAttribute","primaryKeyAttribute","fieldLeft","asLeft","right","tableRight","fieldRight","targetIdentifier","asRight","joinOn","or","throughTable","throughAs","externalThroughAs","throughAttributes","primaryKeysSource","tableSource","identSource","primaryKeysTarget","tableTarget","identTarget","attrTarget","joinType","joinBody","joinCondition","attrSource","sourceJoinOn","targetJoinOn","throughWhere","targetWhere","mainModel","joinTableDependent","child","nestedIncludes","extend","topInclude","topParent","toTarget","isBelongsTo","associationType","$join","tables","fragment","setAutocommitQuery","setIsolationLevelQuery","generateTransactionId","startTransactionQuery","transaction","deferConstraintsQuery","setConstraintQuery","setDeferredQuery","setImmediateQuery","commitTransactionQuery","rollbackTransactionQuery","offset","smth","factory","prepend","Where","logic","comparator","booleanValue","fn","args","arg","Col","col","binding","isEmpty","items","substr","filter","outerBinding","fieldRawAttributesMap","fieldType","tmp","set","comparatorMap","$ne","$gte","$gt","$lte","$lt","$not","$is","$like","$notLike","$iLike","$notILike","$between","$notBetween","$overlap","$contains","$contained","$adjacent","$strictLeft","$strictRight","$noExtendRight","$noExtendLeft","aliasMap","size","canTreatArrayAsAnd","itemQuery","$or","reduce","_value","zipObject","json","traverse","prop","cast","baseKey","castKey","Date","ARRAY","$in","$notIn","$any","$all","$values","$raw","$col","escapeValue","escapeOptions","acceptStrings","isColString","primaryKeys","Buffer","isBuffer","_smth","parseConditionObject","conditions","isIdentifierQuoted","string","test","module","exports"],"mappings":"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","file":"query-generator.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst SqlString = require('../../sql-string');\nconst Model = require('../../model');\nconst DataTypes = require('../../data-types');\nconst util = require('util');\nconst _ = require('lodash');\nconst Dottie = require('dottie');\nconst Association = require('../../associations/base');\nconst BelongsTo = require('../../associations/belongs-to');\nconst BelongsToMany = require('../../associations/belongs-to-many');\nconst HasMany = require('../../associations/has-many');\nconst uuid = require('uuid');\nconst semver = require('semver');\n\nconst QueryGenerator = {\n  options: {},\n\n  extractTableDetails(tableName, options) {\n    options = options || {};\n    tableName = tableName || {};\n    return {\n      schema: tableName.schema || options.schema || 'public',\n      tableName: _.isPlainObject(tableName) ? tableName.tableName : tableName,\n      delimiter: tableName.delimiter || options.delimiter || '.'\n    };\n  },\n\n  addSchema(param) {\n    const self = this;\n\n    if (!param._schema) return param.tableName || param;\n\n    return {\n      tableName: param.tableName || param,\n      table: param.tableName || param,\n      name: param.name || param,\n      schema: param._schema,\n      delimiter: param._schemaDelimiter || '.',\n      toString() {\n        return self.quoteTable(this);\n      }\n    };\n  },\n\n  dropSchema(tableName, options) {\n    return this.dropTableQuery(tableName, options);\n  },\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return 'DESCRIBE ' + table + ';';\n  },\n\n  dropTableQuery(tableName) {\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)};`;\n  },\n\n  renameTableQuery(before, after) {\n    return `ALTER TABLE ${this.quoteTable(before)} RENAME TO ${this.quoteTable(after)};`;\n  },\n\n  /*\n    Returns an insert into command. Parameters: table name + hash of attribute-value-pairs.\n   @private\n  */\n  insertQuery(table, valueHash, modelAttributes, options) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    const modelAttributeMap = {};\n    const fields = [];\n    const values = [];\n    let query;\n    let valueQuery = '<%= tmpTable %>INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>)<%= output %> VALUES (<%= values %>)';\n    let emptyQuery = '<%= tmpTable %>INSERT<%= ignoreDuplicates %> INTO <%= table %><%= output %>';\n    let outputFragment;\n    let identityWrapperRequired = false;\n    let tmpTable = '';         //tmpTable declaration for trigger\n\n    if (modelAttributes) {\n      _.each(modelAttributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    if (this._dialect.supports['DEFAULT VALUES']) {\n      emptyQuery += ' DEFAULT VALUES';\n    } else if (this._dialect.supports['VALUES ()']) {\n      emptyQuery += ' VALUES ()';\n    }\n\n    if (this._dialect.supports.returnValues && options.returning && this._dialect.name !== 'oracle') {\n      if (this._dialect.supports.returnValues.returning) {\n        valueQuery += ' RETURNING *';\n        emptyQuery += ' RETURNING *';\n      } else if (this._dialect.supports.returnValues.output) {\n        outputFragment = ' OUTPUT INSERTED.*';\n\n        //To capture output rows when there is a trigger on MSSQL DB\n        if (modelAttributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {\n\n          let tmpColumns = '';\n          let outputColumns = '';\n          tmpTable = 'declare @tmp table (<%= columns %>); ';\n\n          for (const modelKey in modelAttributes){\n            const attribute = modelAttributes[modelKey];\n            if (!(attribute.type instanceof DataTypes.VIRTUAL)){\n              if (tmpColumns.length > 0){\n                tmpColumns += ',';\n                outputColumns += ',';\n              }\n\n              tmpColumns += this.quoteIdentifier(attribute.field) + ' ' + attribute.type.toSql();\n              outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);\n            }\n          }\n\n          const replacement = {\n            columns: tmpColumns\n          };\n\n          tmpTable = _.template(tmpTable)(replacement).trim();\n          outputFragment = ' OUTPUT ' + outputColumns + ' into @tmp';\n          const selectFromTmp = ';select * from @tmp';\n\n          valueQuery += selectFromTmp;\n          emptyQuery += selectFromTmp;\n        }\n      }\n    }\n\n    if (this._dialect.supports.EXCEPTION && options.exception) {\n      // Mostly for internal use, so we expect the user to know what he's doing!\n      // pg_temp functions are private per connection, so we never risk this function interfering with another one.\n      if (semver.gte(this.sequelize.options.databaseVersion, '9.2.0')) {\n        // >= 9.2 - Use a UUID but prefix with 'func_' (numbers first not allowed)\n        const delimiter = '$func_' + uuid.v4().replace(/-/g, '') + '$';\n\n        options.exception = 'WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;';\n        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response <%= table %>, OUT sequelize_caught_exception text) RETURNS RECORD AS ' + delimiter +\n          ' BEGIN ' + valueQuery + ' INTO response; EXCEPTION ' + options.exception + ' END ' + delimiter +\n          ' LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc()';\n      } else {\n        options.exception = 'WHEN unique_violation THEN NULL;';\n        valueQuery = 'CREATE OR REPLACE FUNCTION pg_temp.testfunc() RETURNS SETOF <%= table %> AS $body$ BEGIN RETURN QUERY ' + valueQuery + '; EXCEPTION ' + options.exception + ' END; $body$ LANGUAGE plpgsql; SELECT * FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();';\n      }\n    }\n\n    if (this._dialect.supports['ON DUPLICATE KEY'] && options.onDuplicate) {\n      valueQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;\n      emptyQuery += ' ON DUPLICATE KEY ' + options.onDuplicate;\n    }\n\n    valueHash = Utils.removeNullValuesFromHash(valueHash, this.options.omitNull);\n    for (const key in valueHash) {\n      if (valueHash.hasOwnProperty(key)) {\n        const value = valueHash[key];\n        fields.push(this.quoteIdentifier(key));\n\n        // SERIALS' can't be NULL in postgresql, use DEFAULT where supported\n        if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && !value) {\n          if (!this._dialect.supports.autoIncrement.defaultValue) {\n            fields.splice(-1, 1);\n          } else if (this._dialect.supports.DEFAULT) {\n            values.push('DEFAULT');\n          } else {\n            values.push(this.escape(null));\n          }\n        } else {\n          if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true) {\n            identityWrapperRequired = true;\n          }\n\n          values.push(this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'INSERT' }));\n        }\n      }\n    }\n\n    const replacements = {\n      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.IGNORE : '',\n      table: this.quoteTable(table),\n      attributes: fields.join(','),\n      output: outputFragment,\n      values: values.join(','),\n      tmpTable\n    };\n\n    query = (replacements.attributes.length ? valueQuery : emptyQuery) + ';';\n    if (identityWrapperRequired && this._dialect.supports.autoIncrement.identityInsert) {\n      query = [\n        'SET IDENTITY_INSERT', this.quoteTable(table), 'ON;',\n        query,\n        'SET IDENTITY_INSERT', this.quoteTable(table), 'OFF;'\n      ].join(' ');\n    }\n\n    return _.template(query)(replacements);\n  },\n\n  /*\n    Returns an insert into command for multiple values.\n    Parameters: table name + list of hashes of attribute-value-pairs.\n   @private\n  */\n  bulkInsertQuery(tableName, attrValueHashes, options, rawAttributes) {\n    options = options || {};\n    rawAttributes = rawAttributes || {};\n\n    const query = 'INSERT<%= ignoreDuplicates %> INTO <%= table %> (<%= attributes %>) VALUES <%= tuples %><%= onDuplicateKeyUpdate %><%= returning %>;';\n    const tuples = [];\n    const serials = {};\n    const allAttributes = [];\n    let onDuplicateKeyUpdate = '';\n\n    for (const attrValueHash of attrValueHashes) {\n      _.forOwn(attrValueHash, (value, key) => {\n        if (allAttributes.indexOf(key) === -1) {\n          allAttributes.push(key);\n        }\n\n        if (rawAttributes[key] && rawAttributes[key].autoIncrement === true) {\n          serials[key] = true;\n        }\n      });\n    }\n\n    for (const attrValueHash of attrValueHashes) {\n      tuples.push('(' + allAttributes.map(key => {\n        if (this._dialect.supports.bulkDefault && serials[key] === true) {\n          return attrValueHash[key] || 'DEFAULT';\n        }\n        return this.escape(attrValueHash[key], rawAttributes[key], { context: 'INSERT' });\n      }).join(',') + ')');\n    }\n\n    if (this._dialect.supports.updateOnDuplicate && options.updateOnDuplicate) {\n      onDuplicateKeyUpdate += ' ON DUPLICATE KEY UPDATE ' + options.updateOnDuplicate.map(attr => {\n        const field = rawAttributes && rawAttributes[attr] && rawAttributes[attr].field || attr;\n        const key = this.quoteIdentifier(field);\n        return key + '=VALUES(' + key + ')';\n      }).join(',');\n    }\n\n    const replacements = {\n      ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.ignoreDuplicates : '',\n      table: this.quoteTable(tableName),\n      attributes: allAttributes.map(attr => this.quoteIdentifier(attr)).join(','),\n      tuples: tuples.join(','),\n      onDuplicateKeyUpdate,\n      returning: this._dialect.supports.returnValues && options.returning ? ' RETURNING *' : ''\n    };\n\n    return _.template(query)(replacements);\n  },\n\n  /*\n    Returns an update query.\n    Parameters:\n      - tableName -> Name of the table\n      - values -> A hash with attribute-value-pairs\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n                 OR a string with conditions (e.g. 'name=\"foo\"').\n                 If you use a string, you have to escape it on your own.\n   @private\n  */\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const values = [];\n    const modelAttributeMap = {};\n    let query = '<%= tmpTable %>UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';\n    let outputFragment;\n    let tmpTable = '';        // tmpTable declaration for trigger\n    let selectFromTmp = '';   // Select statement for trigger\n\n    if (this._dialect.supports['LIMIT ON UPDATE'] && options.limit) {\n      if (this.dialect === 'oracle') {\n        //This cannot be setted in where because rownum will be quoted\n        if (where && ((where.length && where.length > 0) || (Object.keys(where).length > 0))) {\n          //If we have a where clause, we add AND\n          query += ' AND ';\n        } else {\n          //No where clause, we add where\n          query += ' WHERE ';\n        }\n        query += `rownum < ${options.limit + 1}`;\n      } else {\n        if (this.dialect !== 'mssql') {\n          query += ' LIMIT ' + this.escape(options.limit) + ' ';        \n        }\n      }\n    }\n\n    if (this._dialect.supports.returnValues) {\n      if (this._dialect.supports.returnValues.output) {\n        // we always need this for mssql\n        outputFragment = ' OUTPUT INSERTED.*';\n\n        //To capture output rows when there is a trigger on MSSQL DB\n        if (attributes && options.hasTrigger && this._dialect.supports.tmpTableTrigger) {\n          tmpTable = 'declare @tmp table (<%= columns %>); ';\n          let tmpColumns = '';\n          let outputColumns = '';\n\n          for (const modelKey in attributes){\n            const attribute = attributes[modelKey];\n            if (!(attribute.type instanceof DataTypes.VIRTUAL)){\n              if (tmpColumns.length > 0){\n                tmpColumns += ',';\n                outputColumns += ',';\n              }\n\n              tmpColumns += this.quoteIdentifier(attribute.field) + ' ' + attribute.type.toSql();\n              outputColumns += 'INSERTED.' + this.quoteIdentifier(attribute.field);\n            }\n          }\n\n          const replacement ={\n            columns : tmpColumns\n          };\n\n          tmpTable = _.template(tmpTable)(replacement).trim();\n          outputFragment = ' OUTPUT ' + outputColumns + ' into @tmp';\n          selectFromTmp = ';select * from @tmp';\n\n          query += selectFromTmp;\n        }\n      } else if (this._dialect.supports.returnValues && options.returning) {\n        // ensure that the return output is properly mapped to model fields.\n        options.mapToModel = true;\n        query += ' RETURNING *';\n      }\n    }\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      if (modelAttributeMap && modelAttributeMap[key] &&\n          modelAttributeMap[key].autoIncrement === true &&\n          !this._dialect.supports.autoIncrement.update) {\n        // not allowed to update identity column\n        continue;\n      }\n\n      const value = attrValueHash[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }));\n    }\n\n    const replacements = {\n      table: this.quoteTable(tableName),\n      values: values.join(','),\n      output: outputFragment,\n      where: this.whereQuery(where, options),\n      tmpTable\n    };\n\n    if (values.length === 0) {\n      return '';\n    }\n\n    return _.template(query)(replacements).trim();\n  },\n\n  /*\n    Returns an update query.\n    Parameters:\n      - operator -> String with the arithmetic operator (e.g. '+' or '-')\n      - tableName -> Name of the table\n      - values -> A hash with attribute-value-pairs\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n                 OR a string with conditions (e.g. 'name=\"foo\"').\n                 If you use a string, you have to escape it on your own.\n   @private\n  */\n  arithmeticQuery(operator, tableName, attrValueHash, where, options) {\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, this.options.omitNull);\n\n    const values = [];\n    let query = 'UPDATE <%= table %> SET <%= values %><%= output %> <%= where %>';\n    let outputFragment;\n\n    if (this._dialect.supports.returnValues) {\n      if (this._dialect.supports.returnValues.returning) {\n        query += ' RETURNING *';\n      } else if (this._dialect.supports.returnValues.output) {\n        outputFragment = ' OUTPUT INSERTED.*';\n      }\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.quoteIdentifier(key) + operator + this.escape(value));\n    }\n\n    options = options || {};\n    for (const key in options) {\n      const value = options[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.escape(value));\n    }\n\n    const replacements = {\n      table: this.quoteTable(tableName),\n      values: values.join(','),\n      output: outputFragment,\n      where: this.whereQuery(where)\n    };\n\n    return _.template(query)(replacements);\n  },\n\n  nameIndexes(indexes, rawTablename) {\n    return _.map(indexes, index => {\n      if (!index.hasOwnProperty('name')) {\n        const onlyAttributeNames = index.fields.map(field => typeof field === 'string' ? field : field.name || field.attribute);\n        index.name = Utils.underscore(rawTablename + '_' + onlyAttributeNames.join('_'));\n      }\n\n      return index;\n    });\n  },\n\n  /*\n    Returns an add index query.\n    Parameters:\n      - tableName -> Name of an existing table, possibly with schema.\n      - options:\n        - type: UNIQUE|FULLTEXT|SPATIAL\n        - name: The name of the index. Default is <table>_<attr1>_<attr2>\n        - fields: An array of attributes as string or as hash.\n                  If the attribute is a hash, it must have the following content:\n                  - name: The name of the attribute/column\n                  - length: An integer. Optional\n                  - order: 'ASC' or 'DESC'. Optional\n        - parser\n      - rawTablename, the name of the table, without schema. Used to create the name of the index\n   @private\n  */\n  addIndexQuery(tableName, attributes, options, rawTablename) {\n    options = options || {};\n\n    if (!Array.isArray(attributes)) {\n      options = attributes;\n      attributes = undefined;\n    } else {\n      options.fields = attributes;\n    }\n\n    // Backwards compatability\n    if (options.indexName) {\n      options.name = options.indexName;\n    }\n    if (options.indicesType) {\n      options.type = options.indicesType;\n    }\n    if (options.indexType || options.method) {\n      options.using = options.indexType || options.method;\n    }\n\n    options.prefix = options.prefix || rawTablename || tableName;\n    if (options.prefix && _.isString(options.prefix)) {\n      options.prefix = options.prefix.replace(/\\./g, '_');\n      options.prefix = options.prefix.replace(/(\\\"|\\')/g, '');\n    }\n\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.quoteIdentifier(field);\n      } else if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      } else {\n        let result = '';\n\n        if (field.attribute) {\n          field.name = field.attribute;\n        }\n\n        if (!field.name) {\n          throw new Error('The following index field has no name: ' + util.inspect(field));\n        }\n\n        result += this.quoteIdentifier(field.name);\n\n        if (this._dialect.supports.index.collate && field.collate) {\n          result += ' COLLATE ' + this.quoteIdentifier(field.collate);\n        }\n\n        if (this._dialect.supports.index.length && field.length) {\n          result += '(' + field.length + ')';\n        }\n\n        if (field.order) {\n          result += ' ' + field.order;\n        }\n\n        return result;\n      }\n    });\n\n    if (!options.name) {\n      // Mostly for cases where addIndex is called directly by the user without an options object (for example in migrations)\n      // All calls that go through sequelize should already have a name\n      options = this.nameIndexes([options], options.prefix)[0];\n    }\n\n    options = Model._conformIndex(options);\n\n    if (!this._dialect.supports.index.type) {\n      delete options.type;\n    }\n\n    if (options.where) {\n      options.where = this.whereQuery(options.where);\n    }\n\n    if (_.isString(tableName)) {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    const concurrently = this._dialect.supports.index.concurrently && options.concurrently ? 'CONCURRENTLY' : undefined;\n    let ind;\n    if (this._dialect.supports.indexViaAlter) {\n      ind = [\n        'ALTER TABLE',\n        tableName,\n        concurrently,\n        'ADD'\n      ];\n    } else {\n      ind = ['CREATE'];\n    }\n\n    ind = ind.concat(\n      options.unique ? 'UNIQUE' : '',\n      options.type, 'INDEX',\n      !this._dialect.supports.indexViaAlter ? concurrently : undefined,\n      this.quoteIdentifiers(options.name),\n      this._dialect.supports.index.using === 1 && options.using ? 'USING ' + options.using : '',\n      !this._dialect.supports.indexViaAlter ? 'ON ' + tableName : undefined,\n      this._dialect.supports.index.using === 2 && options.using ? 'USING ' + options.using : '',\n      '(' + fieldsSql.join(', ') + (options.operator ? ' '+options.operator : '') + ')',\n      this._dialect.supports.index.parser && options.parser ? 'WITH PARSER ' + options.parser : undefined,\n      this._dialect.supports.index.where && options.where ? options.where : undefined\n    );\n\n    return _.compact(ind).join(' ');\n  },\n\n  addConstraintQuery(tableName, options) {\n    options = options || {};\n    const constraintSnippet = this.getConstraintSnippet(tableName, options);\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return `ALTER TABLE ${tableName} ADD ${constraintSnippet};`;\n  },\n\n  getConstraintSnippet(tableName, options) {\n    let constraintSnippet, constraintName;\n\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.quoteIdentifier(field);\n      } else if (field._isSequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      } else {\n        let result = '';\n\n        if (field.attribute) {\n          field.name = field.attribute;\n        }\n\n        if (!field.name) {\n          throw new Error('The following index field has no name: ' + field);\n        }\n\n        result += this.quoteIdentifier(field.name);\n        return result;\n      }\n    });\n\n    const fieldsSqlQuotedString = fieldsSql.join(', ');\n    const fieldsSqlString = fieldsSql.join('_');\n\n    switch (options.type.toUpperCase()) {\n      case 'UNIQUE':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_uk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} UNIQUE (${fieldsSqlQuotedString})`;\n        break;\n      case 'CHECK':\n        options.where = this.whereItemsQuery(options.where);\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_ck`);\n        constraintSnippet = `CONSTRAINT ${constraintName} CHECK (${options.where})`;\n        break;\n      case 'DEFAULT':\n        if (options.defaultValue === undefined) {\n          throw new Error('Default value must be specifed for DEFAULT CONSTRAINT');\n        }\n\n        if (this._dialect.name !== 'mssql') {\n          throw new Error('Default constraints are supported only for MSSQL dialect.');\n        }\n\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_df`);\n        constraintSnippet = `CONSTRAINT ${constraintName} DEFAULT (${this.escape(options.defaultValue)}) FOR ${fieldsSql[0]}`;\n        break;\n      case 'PRIMARY KEY':\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_pk`);\n        constraintSnippet = `CONSTRAINT ${constraintName} PRIMARY KEY (${fieldsSqlQuotedString})`;\n        break;\n      case 'FOREIGN KEY':\n        const references = options.references;\n        if (!references || !references.table || !references.field) {\n          throw new Error('references object with table and field must be specified');\n        }\n        constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_${references.table}_fk`);\n        const referencesSnippet = `${this.quoteTable(references.table)} (${this.quoteIdentifier(references.field)})`;\n        constraintSnippet = `CONSTRAINT ${constraintName} `;\n        constraintSnippet += `FOREIGN KEY (${fieldsSqlQuotedString}) REFERENCES ${referencesSnippet}`;\n        if (options.onUpdate) {\n          constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;\n        }\n        if (options.onDelete) {\n          constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;\n        }\n        break;\n      default: throw new Error(`${options.type} is invalid.`);\n    }\n    return constraintSnippet;\n  },\n\n  removeConstraintQuery(tableName, constraintName) {\n    return `ALTER TABLE ${this.quoteIdentifiers(tableName)} DROP CONSTRAINT ${this.quoteIdentifiers(constraintName)}`;\n  },\n\n  quoteTable(param, as) {\n    let table = '';\n\n    if (as === true) {\n      as = param.as || param.name || param;\n    }\n\n    if (_.isObject(param)) {\n      if (this._dialect.supports.schemas) {\n        if (param.schema) {\n          table += this.quoteIdentifier(param.schema) + '.';\n        }\n\n        table += this.quoteIdentifier(param.tableName);\n      } else {\n        if (param.schema) {\n          table += param.schema + (param.delimiter || '.');\n        }\n\n        table += param.tableName;\n        table = this.quoteIdentifier(table);\n      }\n\n\n    } else {\n      table = this.quoteIdentifier(param);\n    }\n\n    if (as) {\n      table += ' AS ' + this.quoteIdentifier(as);\n    }\n    return table;\n  },\n\n  /*\n    Quote an object based on its type. This is a more general version of quoteIdentifiers\n    Strings: should proxy to quoteIdentifiers\n    Arrays:\n      * Expects array in the form: [<model> (optional), <model> (optional),... String, String (optional)]\n        Each <model> can be a model, or an object {model: Model, as: String}, matching include, or an\n        association object, or the name of an association.\n      * Zero or more models can be included in the array and are used to trace a path through the tree of\n        included nested associations. This produces the correct table name for the ORDER BY/GROUP BY SQL\n        and quotes it.\n      * If a single string is appended to end of array, it is quoted.\n        If two strings appended, the 1st string is quoted, the 2nd string unquoted.\n    Objects:\n      * If raw is set, that value should be returned verbatim, without quoting\n      * If fn is set, the string should start with the value of fn, starting paren, followed by\n        the values of cols (which is assumed to be an array), quoted and joined with ', ',\n        unless they are themselves objects\n      * If direction is set, should be prepended\n\n    Currently this function is only used for ordering / grouping columns and Sequelize.col(), but it could\n    potentially also be used for other places where we want to be able to call SQL functions (e.g. as default values)\n   @private\n  */\n  quote(collection, parent, connector) {\n    // init\n    const validOrderOptions = [\n      'ASC',\n      'DESC',\n      'ASC NULLS LAST',\n      'DESC NULLS LAST',\n      'ASC NULLS FIRST',\n      'DESC NULLS FIRST',\n      'NULLS FIRST',\n      'NULLS LAST'\n    ];\n\n    // default\n    connector = connector || '.';\n\n    // just quote as identifiers if string\n    if (typeof collection === 'string'){\n      return this.quoteIdentifiers(collection);\n    } else if (Array.isArray(collection)) {\n      // iterate through the collection and mutate objects into associations\n      collection.forEach((item, index) => {\n        const previous = collection[index - 1];\n        let previousAssociation;\n        let previousModel;\n\n        // set the previous as the parent when previous is undefined or the target of the association\n        if (!previous && parent !== undefined){\n          previousModel = parent;\n        } else if (previous && previous instanceof Association) {\n          previousAssociation = previous;\n          previousModel = previous.target;\n        }\n\n        // if the previous item is a model, then attempt getting an association\n        if (previousModel && previousModel.prototype instanceof Model) {\n          let model;\n          let as;\n\n          if (typeof item === 'function' && item.prototype instanceof Model) {\n            // set\n            model = item;\n          } else if (_.isPlainObject(item) && item.model && item.model.prototype instanceof Model) {\n            // set\n            model = item.model;\n            as = item.as;\n          }\n\n          if (model) {\n            // set the as to either the through name or the model name\n            if (!as && previousAssociation && previousAssociation instanceof Association && previousAssociation.through && previousAssociation.through.model === model) {\n              // get from previous association\n              item = new Association(previousModel, model, {\n                as: model.name\n              });\n            } else {\n              // get association from previous model\n              item = previousModel.getAssociationForAlias(model, as);\n\n              // attempt to use the model name if the item is still null\n              if (!item) {\n                item = previousModel.getAssociationForAlias(model, model.name);\n              }\n            }\n\n            // make sure we have an association\n            if (!(item instanceof Association)) {\n              throw new Error(util.format('Unable to find a valid association for model, \\'%s\\'', model.name));\n            }\n          }\n        }\n\n        if (typeof item === 'string') {\n          // get order index\n          const orderIndex = validOrderOptions.indexOf(item.toUpperCase());\n\n          // see if this is an order\n          if (index > 0 && orderIndex !== -1) {\n            item = this.sequelize.literal(' ' + validOrderOptions[orderIndex]);\n          } else if (previousModel && previousModel.prototype instanceof Model) {\n            // only go down this path if we have preivous model and check only once\n            if (previousModel.associations !== undefined && previousModel.associations[item]) {\n              // convert the item to an association\n              item = previousModel.associations[item];\n            } else if (previousModel.rawAttributes !== undefined && previousModel.rawAttributes[item] && item !== previousModel.rawAttributes[item].field) {\n              // convert the item attribute from it's alias\n              item = previousModel.rawAttributes[item].field;\n            } else if (\n              item.indexOf('.') !== -1\n              && previousModel.rawAttributes !== undefined\n            ) {\n              const itemSplit = item.split('.');\n\n              if (previousModel.rawAttributes[itemSplit[0]].type instanceof DataTypes.JSON) {\n                // just quote identifiers for now\n                const identifier = this.quoteIdentifiers(previousModel.name  + '.' + previousModel.rawAttributes[itemSplit[0]].field);\n\n                // get path\n                const path = itemSplit.slice(1);\n\n                // extract path\n                item = this.jsonPathExtractionQuery(identifier, path);\n\n                // literal because we don't want to append the model name when string\n                item = this.sequelize.literal(item);\n              }\n            }\n          }\n        }\n\n        collection[index] = item;\n      }, this);\n\n      // loop through array, adding table names of models to quoted\n      const collectionLength = collection.length;\n      const tableNames = [];\n      let item;\n      let i = 0;\n\n      for (i = 0; i < collectionLength - 1; i++) {\n        item = collection[i];\n        if (typeof item === 'string' || item._modelAttribute || item instanceof Utils.SequelizeMethod) {\n          break;\n        } else if (item instanceof Association) {\n          tableNames[i] = item.as;\n        }\n      }\n\n      // start building sql\n      let sql = '';\n\n      if (i > 0) {\n        sql += this.quoteIdentifier(tableNames.join(connector)) + '.';\n      } else if (typeof collection[0] === 'string' && parent) {\n        sql += this.quoteIdentifier(parent.name) + '.';\n      }\n\n      // loop through everything past i and append to the sql\n      collection.slice(i).forEach(collectionItem => {\n        sql += this.quote(collectionItem, parent, connector);\n      }, this);\n\n      return sql;\n    } else if (collection._modelAttribute) {\n      return this.quoteTable(collection.Model.name) + '.' + this.quoteIdentifier(collection.fieldName);\n    } else if (collection instanceof Utils.SequelizeMethod) {\n      return this.handleSequelizeMethod(collection);\n    } else if (_.isPlainObject(collection) && collection.raw) {\n      // simple objects with raw is no longer supported\n      throw new Error('The `{raw: \"...\"}` syntax is no longer supported.  Use `sequelize.literal` instead.');\n    } else {\n      throw new Error('Unknown structure passed to order / group: ' + util.inspect(collection));\n    }\n  },\n\n  /*\n    Split an identifier into .-separated tokens and quote each part\n   @private\n  */\n  quoteIdentifiers(identifiers) {\n    if (identifiers.indexOf('.') !== -1) {\n      identifiers = identifiers.split('.');\n      return this.quoteIdentifier(identifiers.slice(0, identifiers.length - 1).join('.')) + '.' + this.quoteIdentifier(identifiers[identifiers.length - 1]);\n    } else {\n      return this.quoteIdentifier(identifiers);\n    }\n  },\n\n  /*\n    Escape a value (e.g. a string, number or date)\n   @private\n  */\n  escape(value, field, options) {\n    options = options || {};\n\n    if (value !== null && value !== undefined) {\n      if (value instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(value);\n      } else {\n        if (field && field.type) {\n          if (this.typeValidation && field.type.validate && value) {\n            if (options.isList && Array.isArray(value)) {\n              for (const item of value) {\n                field.type.validate(item, options);\n              }\n            } else {\n              field.type.validate(value, options);\n            }\n          }\n\n          if (field.type.stringify) {\n            // Users shouldn't have to worry about these args - just give them a function that takes a single arg\n            const simpleEscape = _.partialRight(SqlString.escape, this.options.timezone, this.dialect);\n\n            value = field.type.stringify(value, { escape: simpleEscape, field, timezone: this.options.timezone });\n\n            if (field.type.escape === false) {\n              // The data-type already did the required escaping\n              return value;\n            }\n          }\n        }\n      }\n    }\n\n    return SqlString.escape(value, this.options.timezone, this.dialect);\n  },\n\n  /*\n    Returns a query for selecting elements in the table <tableName>.\n    Options:\n      - attributes -> An array of attributes (e.g. ['name', 'birthday']). Default: *\n      - where -> A hash with conditions (e.g. {name: 'foo'})\n                 OR an ID as integer\n                 OR a string with conditions (e.g. 'name=\"foo\"').\n                 If you use a string, you have to escape it on your own.\n      - order -> e.g. 'id DESC'\n      - group\n      - limit -> The maximum count you want to get.\n      - offset -> An offset value to start from. Only useable with limit!\n   @private\n  */\n  selectQuery(tableName, options, model) {\n    options = options || {};\n    const limit = options.limit;\n    const mainQueryItems = [];\n    const subQueryItems = [];\n    const subQuery = options.subQuery === undefined ? limit && options.hasMultiAssociation : options.subQuery;\n    const attributes = {\n      main: options.attributes && options.attributes.slice(),\n      subQuery: null\n    };\n    const mainTable = {\n      name: tableName,\n      quotedName: null,\n      as: null,\n      model\n    };\n    const topLevelInfo = {\n      names: mainTable,\n      options,\n      subQuery\n    };\n    let mainJoinQueries = [];\n    let subJoinQueries = [];\n    let query;\n\n    // resolve table name options\n    if (options.tableAs) {\n      mainTable.as = this.quoteTable(options.tableAs);\n    } else if (!Array.isArray(mainTable.name) && mainTable.model) {\n      mainTable.as = this.quoteTable(mainTable.model.name);\n    }\n\n    mainTable.quotedName = !Array.isArray(mainTable.name) ? this.quoteTable(mainTable.name) : tableName.map(t => {\n      return Array.isArray(t) ? this.quoteTable(t[0], t[1]) : this.quoteTable(t, true);\n    }).join(', ');\n\n    if (subQuery && attributes.main) {\n      for (const keyAtt of mainTable.model.primaryKeyAttributes) {\n        // Check if mainAttributes contain the primary key of the model either as a field or an aliased field\n        if (!_.find(attributes.main, attr => keyAtt === attr || keyAtt === attr[0] || keyAtt === attr[1])) {\n          attributes.main.push(mainTable.model.rawAttributes[keyAtt].field ? [keyAtt, mainTable.model.rawAttributes[keyAtt].field] : keyAtt);\n        }\n      }\n    }\n\n    attributes.main = this.escapeAttributes(attributes.main, options, mainTable.as);\n    attributes.main = attributes.main || (options.include ? [`${mainTable.as}.*`] : ['*']);\n\n    // If subquery, we ad the mainAttributes to the subQuery and set the mainAttributes to select * from subquery\n    if (subQuery || options.groupedLimit) {\n      // We need primary keys\n      attributes.subQuery = attributes.main;\n      attributes.main = [(mainTable.as || mainTable.quotedName) + '.*'];\n    }\n\n    if (options.include) {\n      for (const include of options.include) {\n        if (include.separate) {\n          continue;\n        }\n        const joinQueries = this.generateInclude(include, { externalAs: mainTable.as, internalAs: mainTable.as }, topLevelInfo);\n\n        subJoinQueries = subJoinQueries.concat(joinQueries.subQuery);\n        mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n\n        if (joinQueries.attributes.main.length > 0) {\n          attributes.main = attributes.main.concat(joinQueries.attributes.main);\n        }\n        if (joinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = attributes.subQuery.concat(joinQueries.attributes.subQuery);\n        }\n      }\n    }\n\n    if (subQuery) {\n      subQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.subQuery, mainTable.quotedName, mainTable.as));\n      subQueryItems.push(subJoinQueries.join(''));\n    } else {\n      if (options.groupedLimit) {\n        if (!mainTable.as) {\n          mainTable.as = mainTable.quotedName;\n        }\n        const where = Object.assign({}, options.where);\n        let groupedLimitOrder,\n          whereKey,\n          include,\n          groupedTableName = mainTable.as;\n\n        if (typeof options.groupedLimit.on === 'string') {\n          whereKey = options.groupedLimit.on;\n        } else if (options.groupedLimit.on instanceof HasMany) {\n          whereKey = options.groupedLimit.on.foreignKeyField;\n        }\n\n        if (options.groupedLimit.on instanceof BelongsToMany) {\n          // BTM includes needs to join the through table on to check ID\n          groupedTableName = options.groupedLimit.on.manyFromSource.as;\n          const groupedLimitOptions = Model._validateIncludedElements({\n            include: [{\n              association: options.groupedLimit.on.manyFromSource,\n              duplicating: false, // The UNION'ed query may contain duplicates, but each sub-query cannot\n              required: true,\n              where: Object.assign({\n                '$$PLACEHOLDER$$': true\n              }, options.groupedLimit.through && options.groupedLimit.through.where)\n            }],\n            model\n          });\n\n          // Make sure attributes from the join table are mapped back to models\n          options.hasJoin = true;\n          options.hasMultiAssociation = true;\n          options.includeMap = Object.assign(groupedLimitOptions.includeMap, options.includeMap);\n          options.includeNames = groupedLimitOptions.includeNames.concat(options.includeNames || []);\n          include = groupedLimitOptions.include;\n\n          if (Array.isArray(options.order)) {\n            // We need to make sure the order by attributes are available to the parent query\n            options.order.forEach((order, i) => {\n              if (Array.isArray(order)) {\n                order = order[0];\n              }\n\n              let alias = `subquery_order_${i}`;\n              options.attributes.push([order, alias]);\n\n              // We don't want to prepend model name when we alias the attributes, so quote them here\n              alias = this.sequelize.literal(this.quote(alias));\n\n              if (Array.isArray(options.order[i])) {\n                options.order[i][0] = alias;\n              } else {\n                options.order[i] = alias;\n              }\n            });\n            groupedLimitOrder = options.order;\n          }\n        } else {\n          // Ordering is handled by the subqueries, so ordering the UNION'ed result is not needed\n          groupedLimitOrder = options.order;\n          delete options.order;\n          where.$$PLACEHOLDER$$ = true;\n        }\n\n        // Caching the base query and splicing the where part into it is consistently > twice\n        // as fast than generating from scratch each time for values.length >= 5\n        const baseQuery = '(' + this.selectQuery(\n          tableName,\n          {\n            attributes: options.attributes,\n            limit: options.groupedLimit.limit,\n            order: groupedLimitOrder,\n            where,\n            include,\n            model\n          },\n          model\n        ).replace(/;$/, '') + ')';\n        const placeHolder = this.whereItemQuery('$$PLACEHOLDER$$', true, { model });\n        const splicePos = baseQuery.indexOf(placeHolder);\n\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, '(' +\n          options.groupedLimit.values.map(value => {\n            let groupWhere;\n            if (whereKey) {\n              groupWhere = {\n                [whereKey]: value\n              };\n            }\n            if (include) {\n              groupWhere = {\n                [options.groupedLimit.on.foreignIdentifierField]: value\n              };\n            }\n\n            return Utils.spliceStr(baseQuery, splicePos, placeHolder.length, this.getWhereConditions(groupWhere, groupedTableName));\n          }).join(\n            this._dialect.supports['UNION ALL'] ? ' UNION ALL ' : ' UNION '\n            )\n          + ')', mainTable.as));\n      } else {\n        mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, mainTable.quotedName, mainTable.as));\n      }\n\n      mainQueryItems.push(mainJoinQueries.join(''));\n    }\n\n    // Add WHERE to sub or main query\n    if (options.hasOwnProperty('where') && !options.groupedLimit) {\n      options.where = this.getWhereConditions(options.where, mainTable.as || tableName, model, options);\n      if (options.where) {\n        if (subQuery) {\n          subQueryItems.push(' WHERE ' + options.where);\n        } else {\n          mainQueryItems.push(' WHERE ' + options.where);\n          // Walk the main query to update all selects\n          _.each(mainQueryItems, (value, key) => {\n            if (value.match(/^SELECT/)) {\n              mainQueryItems[key] = this.selectFromTableFragment(options, model, attributes.main, mainTable.quotedName, mainTable.as, options.where);\n            }\n          });\n        }\n      }\n    }\n\n    // Add GROUP BY to sub or main query\n    if (options.group) {\n      options.group = Array.isArray(options.group) ? options.group.map(t => this.quote(t, model)).join(', ') : options.group;\n      if (subQuery) {\n        subQueryItems.push(' GROUP BY ' + options.group);\n      } else {\n        mainQueryItems.push(' GROUP BY ' + options.group);\n      }\n    }\n\n    // Add HAVING to sub or main query\n    if (options.hasOwnProperty('having')) {\n      options.having = this.getWhereConditions(options.having, tableName, model, options, false);\n      if (subQuery) {\n        subQueryItems.push(' HAVING ' + options.having);\n      } else {\n        mainQueryItems.push(' HAVING ' + options.having);\n      }\n    }\n\n    // Add ORDER to sub or main query\n    if (options.order) {\n      const orders = this.getQueryOrders(options, model, subQuery);\n      if (orders.mainQueryOrder.length) {\n        mainQueryItems.push(' ORDER BY ' + orders.mainQueryOrder.join(', '));\n      }\n      if (orders.subQueryOrder.length) {\n        subQueryItems.push(' ORDER BY ' + orders.subQueryOrder.join(', '));\n      }\n    }\n\n    // Add LIMIT, OFFSET to sub or main query\n    const limitOrder = this.addLimitAndOffset(options, mainTable.model);\n    if (limitOrder && !options.groupedLimit) {\n      if (subQuery) {\n        subQueryItems.push(limitOrder);\n      } else {\n        mainQueryItems.push(limitOrder);\n      }\n    }\n\n    if (subQuery) {\n      //Carefull, Oracle doesn't support AS for tables\n      query = `SELECT ${attributes.main.join(', ')} FROM (${subQueryItems.join('')})${this._dialect.name === 'oracle' ? '' : ' AS'} ${mainTable.as}${mainJoinQueries.join('')}${mainQueryItems.join('')}`;\n    } else {\n      query = mainQueryItems.join('');\n    }\n\n    if (options.lock && this._dialect.supports.lock) {\n      let lock = options.lock;\n      if (typeof options.lock === 'object') {\n        lock = options.lock.level;\n      }\n      if (this._dialect.supports.lockKey && (lock === 'KEY SHARE' || lock === 'NO KEY UPDATE')) {\n        query += ' FOR ' + lock;\n      } else if (lock === 'SHARE') {\n        query += ' ' + this._dialect.supports.forShare;\n      } else {\n        query += ' FOR UPDATE';\n      }\n      if (this._dialect.supports.lockOf && options.lock.of && options.lock.of.prototype instanceof Model) {\n        query += ' OF ' + this.quoteTable(options.lock.of.name);\n      }\n    }\n\n    return `${query};`;\n  },\n\n  escapeAttributes(attributes, options, mainTableAs) {\n    return attributes && attributes.map(attr => {\n      let addTable = true;\n\n      if (attr instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(attr);\n      }\n      if (Array.isArray(attr)) {\n        if (attr.length !== 2) {\n          throw new Error(JSON.stringify(attr) + ' is not a valid attribute definition. Please use the following format: [\\'attribute definition\\', \\'alias\\']');\n        }\n        attr = attr.slice();\n\n        if (attr[0] instanceof Utils.SequelizeMethod) {\n          attr[0] = this.handleSequelizeMethod(attr[0]);\n          addTable = false;\n        } else if (attr[0].indexOf('(') === -1 && attr[0].indexOf(')') === -1) {\n          attr[0] = this.quoteIdentifier(attr[0]);\n        }\n\n        attr = [attr[0], this.quoteIdentifier(attr[1])].join(' AS ');\n      } else {\n        attr = attr.indexOf(Utils.TICK_CHAR) < 0 && attr.indexOf('\"') < 0 ? this.quoteIdentifiers(attr) : attr;\n      }\n      if (options.include && attr.indexOf('.') === -1 && addTable) {\n        attr = mainTableAs + '.' + attr;\n      }\n\n      return attr;\n    });\n  },\n\n  generateInclude(include, parentTableName, topLevelInfo) {\n    const association = include.association;\n    const joinQueries = {\n      mainQuery: [],\n      subQuery: []\n    };\n    const mainChildIncludes = [];\n    const subChildIncludes = [];\n    let requiredMismatch = false;\n    const includeAs = {\n      internalAs: include.as,\n      externalAs: include.as\n    };\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let joinQuery;\n\n    topLevelInfo.options.keysEscaped = true;\n\n    if (topLevelInfo.names.name !== parentTableName.externalAs && topLevelInfo.names.as !== parentTableName.externalAs) {\n      includeAs.internalAs = `${parentTableName.internalAs}->${include.as}`;\n      includeAs.externalAs = `${parentTableName.externalAs}.${include.as}`;\n    }\n\n    // includeIgnoreAttributes is used by aggregate functions\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      const includeAttributes = include.attributes.map(attr => {\n        let attrAs = attr;\n        let verbatim = false;\n\n        if (Array.isArray(attr) && attr.length === 2) {\n          if (attr[0] instanceof Utils.SequelizeMethod && (\n            attr[0] instanceof Utils.Literal ||\n            attr[0] instanceof Utils.Cast ||\n            attr[0] instanceof Utils.Fn\n          )) {\n            verbatim = true;\n          }\n\n          attr = attr.map(attr => attr instanceof Utils.SequelizeMethod ? this.handleSequelizeMethod(attr) : attr);\n\n          attrAs = attr[1];\n          attr = attr[0];\n        } else if (attr instanceof Utils.Literal) {\n          return attr.val; // We trust the user to rename the field correctly\n        } else if (attr instanceof Utils.Cast || attr instanceof Utils.Fn) {\n          throw new Error(\n            'Tried to select attributes using Sequelize.cast or Sequelize.fn without specifying an alias for the result, during eager loading. ' +\n            'This means the attribute will not be added to the returned instance'\n          );\n        }\n\n        let prefix;\n        if (verbatim === true) {\n          prefix = attr;\n        } else {\n          prefix = `${this.quoteIdentifier(includeAs.internalAs)}.${this.quoteIdentifier(attr)}`;\n        }\n        return `${prefix} AS ${this.quoteIdentifier(`${includeAs.externalAs}.${attrAs}`, true)}`;\n      });\n      if (include.subQuery && topLevelInfo.subQuery) {\n        for (const attr of includeAttributes) {\n          attributes.subQuery.push(attr);\n        }\n      } else {\n        for (const attr of includeAttributes) {\n          attributes.main.push(attr);\n        }\n      }\n    }\n\n    //through\n    if (include.through) {\n      joinQuery = this.generateThroughJoin(include, includeAs, parentTableName.internalAs, topLevelInfo);\n    } else {\n      if (topLevelInfo.subQuery && include.subQueryFilter) {\n        const associationWhere = {};\n\n        associationWhere[association.identifierField] = {\n          $eq: this.sequelize.literal(`${this.quoteTable(parentTableName.internalAs)}.${this.quoteIdentifier(association.sourceKeyField || association.source.primaryKeyField)}`)\n        };\n\n        if (!topLevelInfo.options.where) {\n          topLevelInfo.options.where = {};\n        }\n\n        // Creating the as-is where for the subQuery, checks that the required association exists\n        const $query = this.selectQuery(include.model.getTableName(), {\n          attributes: [association.identifierField],\n          where: {\n            $and: [\n              associationWhere,\n              include.where || {}\n            ]\n          },\n          limit: 1\n        }, include.model);\n\n        const subQueryWhere = this.sequelize.asIs([\n          '(',\n          $query.replace(/\\;$/, ''),\n          ')',\n          'IS NOT NULL'\n        ].join(' '));\n\n        if (_.isPlainObject(topLevelInfo.options.where)) {\n          topLevelInfo.options.where['__' + includeAs] = subQueryWhere;\n        } else {\n          topLevelInfo.options.where = { $and: [topLevelInfo.options.where, subQueryWhere] };\n        }\n      }\n      joinQuery = this.generateJoin(include, topLevelInfo);\n    }\n\n    // handle possible new attributes created in join\n    if (joinQuery.attributes.main.length > 0) {\n      attributes.main = attributes.main.concat(joinQuery.attributes.main);\n    }\n\n    if (joinQuery.attributes.subQuery.length > 0) {\n      attributes.subQuery = attributes.subQuery.concat(joinQuery.attributes.subQuery);\n    }\n\n    if (include.include) {\n      for (const childInclude of include.include) {\n        if (childInclude.separate || childInclude._pseudo) {\n          continue;\n        }\n\n        const childJoinQueries = this.generateInclude(childInclude, includeAs, topLevelInfo);\n\n        if (include.required === false && childInclude.required === true) {\n          requiredMismatch = true;\n        }\n        // if the child is a sub query we just give it to the\n        if (childInclude.subQuery && topLevelInfo.subQuery) {\n          subChildIncludes.push(childJoinQueries.subQuery);\n        }\n        if (childJoinQueries.mainQuery) {\n          mainChildIncludes.push(childJoinQueries.mainQuery);\n        }\n        if (childJoinQueries.attributes.main.length > 0) {\n          attributes.main = attributes.main.concat(childJoinQueries.attributes.main);\n        }\n        if (childJoinQueries.attributes.subQuery.length > 0) {\n          attributes.subQuery = attributes.subQuery.concat(childJoinQueries.attributes.subQuery);\n        }\n      }\n    }\n\n    if (include.subQuery && topLevelInfo.subQuery) {\n      if (requiredMismatch && subChildIncludes.length > 0) {\n        joinQueries.subQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${subChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.subQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (subChildIncludes.length > 0) {\n          joinQueries.subQuery.push(subChildIncludes.join(''));\n        }\n      }\n      joinQueries.mainQuery.push(mainChildIncludes.join(''));\n    } else {\n      if (requiredMismatch && mainChildIncludes.length > 0) {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${mainChildIncludes.join('')} ) ON ${joinQuery.condition}`);\n      } else {\n        joinQueries.mainQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);\n        if (mainChildIncludes.length > 0) {\n          joinQueries.mainQuery.push(mainChildIncludes.join(''));\n        }\n      }\n      joinQueries.subQuery.push(subChildIncludes.join(''));\n    }\n\n    return {\n      mainQuery: joinQueries.mainQuery.join(''),\n      subQuery: joinQueries.subQuery.join(''),\n      attributes\n    };\n  },\n\n  generateJoin(include, topLevelInfo) {\n    const association = include.association;\n    const parent = include.parent;\n    const parentIsTop = !!parent && !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    let $parent;\n    let joinWhere;\n    /* Attributes for the left side */\n    const left = association.source;\n    const attrLeft = association instanceof BelongsTo ?\n      association.identifier :\n      association.sourceKeyAttribute || left.primaryKeyAttribute;\n    const fieldLeft = association instanceof BelongsTo ?\n      association.identifierField :\n      left.rawAttributes[association.sourceKeyAttribute || left.primaryKeyAttribute].field;\n    let asLeft;\n    /* Attributes for the right side */\n    const right = include.model;\n    const tableRight = right.getTableName();\n    const fieldRight = association instanceof BelongsTo ?\n      right.rawAttributes[association.targetIdentifier || right.primaryKeyAttribute].field :\n      association.identifierField;\n    let asRight = include.as;\n\n    while (($parent = $parent && $parent.parent || include.parent) && $parent.association) {\n      if (asLeft) {\n        asLeft = `${$parent.as}->${asLeft}`;\n      } else {\n        asLeft = $parent.as;\n      }\n    }\n\n    if (!asLeft) asLeft = parent.as || parent.model.name;\n    else asRight = `${asLeft}->${asRight}`;\n\n    let joinOn = `${this.quoteTable(asLeft)}.${this.quoteIdentifier(fieldLeft)}`;\n\n    if (topLevelInfo.options.groupedLimit && parentIsTop || topLevelInfo.subQuery && include.parent.subQuery && !include.subQuery) {\n      if (parentIsTop) {\n        // The main model attributes is not aliased to a prefix\n        joinOn = `${this.quoteTable(parent.as || parent.model.name)}.${this.quoteIdentifier(attrLeft)}`;\n      } else {\n        joinOn = this.quoteIdentifier(`${asLeft}.${attrLeft}`);\n      }\n    }\n\n    joinOn += ` = ${this.quoteIdentifier(asRight)}.${this.quoteIdentifier(fieldRight)}`;\n\n    if (include.on) {\n      joinOn = this.whereItemsQuery(include.on, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n    }\n\n    if (include.where) {\n      joinWhere = this.whereItemsQuery(include.where, {\n        prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),\n        model: include.model\n      });\n      if (joinWhere) {\n        if (include.or) {\n          joinOn += ` OR ${joinWhere}`;\n        } else {\n          joinOn += ` AND ${joinWhere}`;\n        }\n      }\n    }\n\n    return {\n      join: include.required ? 'INNER JOIN' : 'LEFT OUTER JOIN',\n      body: this.quoteTable(tableRight, asRight),\n      condition: joinOn,\n      attributes: {\n        main: [],\n        subQuery: []\n      }\n    };\n  },\n\n  generateThroughJoin(include, includeAs, parentTableName, topLevelInfo) {\n    const through = include.through;\n    const throughTable = through.model.getTableName();\n    const throughAs = `${includeAs.internalAs}->${through.as}`;\n    const externalThroughAs = `${includeAs.externalAs}.${through.as}`;\n    const throughAttributes = through.attributes.map(attr =>\n      this.quoteIdentifier(throughAs) + '.' + this.quoteIdentifier(Array.isArray(attr) ? attr[0] : attr)\n      + ' AS '\n      + this.quoteIdentifier(externalThroughAs + '.' + (Array.isArray(attr) ? attr[1] : attr))\n    );\n    const association = include.association;\n    const parentIsTop = !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;\n    const primaryKeysSource = association.source.primaryKeyAttributes;\n    const tableSource = parentTableName;\n    const identSource = association.identifierField;\n    const primaryKeysTarget = association.target.primaryKeyAttributes;\n    const tableTarget = includeAs.internalAs;\n    const identTarget = association.foreignIdentifierField;\n    const attrTarget = association.target.rawAttributes[primaryKeysTarget[0]].field || primaryKeysTarget[0];\n\n    const joinType = include.required ? 'INNER JOIN' : 'LEFT OUTER JOIN';\n    let joinBody;\n    let joinCondition;\n    const attributes = {\n      main: [],\n      subQuery: []\n    };\n    let attrSource = primaryKeysSource[0];\n    let sourceJoinOn;\n    let targetJoinOn;\n    let throughWhere;\n    let targetWhere;\n\n    if (topLevelInfo.options.includeIgnoreAttributes !== false) {\n      // Through includes are always hasMany, so we need to add the attributes to the mainAttributes no matter what (Real join will never be executed in subquery)\n      for (const attr of throughAttributes) {\n        attributes.main.push(attr);\n      }\n    }\n\n    // Figure out if we need to use field or attribute\n    if (!topLevelInfo.subQuery) {\n      attrSource = association.source.rawAttributes[primaryKeysSource[0]].field;\n    }\n    if (topLevelInfo.subQuery && !include.subQuery && !include.parent.subQuery && include.parent.model !== topLevelInfo.options.mainModel) {\n      attrSource = association.source.rawAttributes[primaryKeysSource[0]].field;\n    }\n\n    // Filter statement for left side of through\n    // Used by both join and subquery where\n    // If parent include was in a subquery need to join on the aliased attribute\n    if (topLevelInfo.subQuery && !include.subQuery && include.parent.subQuery && !parentIsTop) {\n      sourceJoinOn = `${this.quoteIdentifier(`${tableSource}.${attrSource}`)} = `;\n    } else {\n      sourceJoinOn = `${this.quoteTable(tableSource)}.${this.quoteIdentifier(attrSource)} = `;\n    }\n    sourceJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identSource)}`;\n\n    // Filter statement for right side of through\n    // Used by both join and subquery where\n    targetJoinOn = `${this.quoteIdentifier(tableTarget)}.${this.quoteIdentifier(attrTarget)} = `;\n    targetJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identTarget)}`;\n\n    if (through.where) {\n      throughWhere = this.getWhereConditions(through.where, this.sequelize.literal(this.quoteIdentifier(throughAs)), through.model);\n    }\n\n    if (this._dialect.supports.joinTableDependent) {\n      // Generate a wrapped join so that the through table join can be dependent on the target join\n      joinBody = `( ${this.quoteTable(throughTable, throughAs)} INNER JOIN ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)} ON ${targetJoinOn}`;\n      if (throughWhere) {\n        joinBody += ` AND ${throughWhere}`;\n      }\n      joinBody += ')';\n      joinCondition = sourceJoinOn;\n    } else {\n      // Generate join SQL for left side of through\n      joinBody = `${this.quoteTable(throughTable, throughAs)} ON ${sourceJoinOn} ${joinType} ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)}`;\n      joinCondition = targetJoinOn;\n      if (throughWhere) {\n        joinCondition += ` AND ${throughWhere}`;\n      }\n    }\n\n    if (include.where || include.through.where) {\n      if (include.where) {\n        targetWhere = this.getWhereConditions(include.where, this.sequelize.literal(this.quoteIdentifier(includeAs.internalAs)), include.model, topLevelInfo.options);\n        if (targetWhere) {\n          joinCondition += ` AND ${targetWhere}`;\n        }\n      }\n      if (topLevelInfo.subQuery && include.required) {\n        if (!topLevelInfo.options.where) {\n          topLevelInfo.options.where = {};\n        }\n        let parent = include;\n        let child = include;\n        let nestedIncludes = [];\n        let query;\n\n        while ((parent = parent.parent)) { // eslint-disable-line\n          nestedIncludes = [_.extend({}, child, { include: nestedIncludes })];\n          child = parent;\n        }\n\n        const topInclude = nestedIncludes[0];\n        const topParent = topInclude.parent;\n\n        if (topInclude.through && Object(topInclude.through.model) === topInclude.through.model) {\n          query = this.selectQuery(topInclude.through.model.getTableName(), {\n            attributes: [topInclude.through.model.primaryKeyField],\n            include: Model._validateIncludedElements({\n              model: topInclude.through.model,\n              include: [{\n                association: topInclude.association.toTarget,\n                required: true\n              }]\n            }).include,\n            model: topInclude.through.model,\n            where: {\n              $and: [\n                this.sequelize.asIs([\n                  this.quoteTable(topParent.model.name) + '.' + this.quoteIdentifier(topParent.model.primaryKeyField),\n                  this.quoteIdentifier(topInclude.through.model.name) + '.' + this.quoteIdentifier(topInclude.association.identifierField)\n                ].join(' = ')),\n                topInclude.through.where\n              ]\n            },\n            limit: 1,\n            includeIgnoreAttributes: false\n          }, topInclude.through.model);\n        } else {\n          const isBelongsTo = topInclude.association.associationType === 'BelongsTo';\n          const join = [\n            this.quoteTable(topParent.model.name) + '.' + this.quoteIdentifier(isBelongsTo ? topInclude.association.identifierField : topParent.model.primaryKeyAttributes[0]),\n            this.quoteIdentifier(topInclude.model.name) + '.' + this.quoteIdentifier(isBelongsTo ? topInclude.model.primaryKeyAttributes[0] : topInclude.association.identifierField)\n          ].join(' = ');\n          query = this.selectQuery(topInclude.model.tableName, {\n            attributes: [topInclude.model.primaryKeyAttributes[0]],\n            include: topInclude.include,\n            where: {\n              $join: this.sequelize.asIs(join)\n            },\n            limit: 1,\n            includeIgnoreAttributes: false\n          }, topInclude.model);\n        }\n        topLevelInfo.options.where['__' + throughAs] = this.sequelize.asIs([\n          '(',\n          query.replace(/\\;$/, ''),\n          ')',\n          'IS NOT NULL'\n        ].join(' '));\n      }\n    }\n\n    return {\n      join: joinType,\n      body: joinBody,\n      condition: joinCondition,\n      attributes\n    };\n  },\n\n  getQueryOrders(options, model, subQuery) {\n    const mainQueryOrder = [];\n    const subQueryOrder = [];\n\n    if (Array.isArray(options.order)) {\n      for (let order of options.order) {\n        // wrap if not array\n        if (!Array.isArray(order)) {\n          order = [order];\n        }\n\n        if (\n          subQuery\n          && Array.isArray(order)\n          && order[0]\n          && !(order[0] instanceof Association)\n          && !(typeof order[0] === 'function' && order[0].prototype instanceof Model)\n          && !(typeof order[0].model === 'function' && order[0].model.prototype instanceof Model)\n          && !(typeof order[0] === 'string' && model && model.associations !== undefined && model.associations[order[0]])\n        ) {\n          subQueryOrder.push(this.quote(order, model, '->'));\n        }\n        mainQueryOrder.push(this.quote(order, model, '->'));\n      }\n    } else if (options.order instanceof Utils.SequelizeMethod){\n      const sql = this.quote(options.order, model, '->');\n      if (subQuery) {\n        subQueryOrder.push(sql);\n      }\n      mainQueryOrder.push(sql);\n    } else {\n      throw new Error('Order must be type of array or instance of a valid sequelize method.');\n    }\n\n    return {mainQueryOrder, subQueryOrder};\n  },\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs) {\n    let fragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;\n\n    if (mainTableAs) {\n      fragment += ' AS ' + mainTableAs;\n    }\n\n    return fragment;\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Boolean} value   A boolean that states whether autocommit shall be done or not.\n   * @param  {Object}  options An object with options.\n   * @return {String}          The generated sql query.\n   * @private\n   */\n  setAutocommitQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    // no query when value is not explicitly set\n    if (typeof value === 'undefined' || value === null) {\n      return;\n    }\n\n    return 'SET autocommit = ' + (value ? 1 : 0) + ';';\n  },\n\n  /**\n   * Returns a query that sets the transaction isolation level.\n   *\n   * @param  {String} value   The isolation level.\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    return 'SET SESSION TRANSACTION ISOLATION LEVEL ' + value + ';';\n  },\n\n  generateTransactionId() {\n    return uuid.v4();\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return 'SAVEPOINT ' + this.quoteIdentifier(transaction.name, true) + ';';\n    }\n\n    return 'START TRANSACTION;';\n  },\n\n  /**\n   * Returns a query that defers the constraints. Only works for postgres.\n   *\n   * @param  {Transaction} transaction\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  deferConstraintsQuery() {},\n\n  setConstraintQuery() {},\n  setDeferredQuery() {},\n  setImmediateQuery() {},\n\n  /**\n   * Returns a query that commits a transaction.\n   *\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT;';\n  },\n\n  /**\n   * Returns a query that rollbacks a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @param  {Object} options An object with options.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return 'ROLLBACK TO SAVEPOINT ' + this.quoteIdentifier(transaction.name, true) + ';';\n    }\n\n    return 'ROLLBACK;';\n  },\n\n  /**\n   * Returns an SQL fragment for adding result constraints\n   *\n   * @param  {Object} options An object with selectQuery options.\n   * @param  {Object} options The model passed to the selectQuery.\n   * @return {String}         The generated sql query.\n   * @private\n   */\n  addLimitAndOffset(options) {\n    let fragment = '';\n\n    /* eslint-disable */\n    if (options.offset != null && options.limit == null) {\n      fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + 10000000000000;\n    } else if (options.limit != null) {\n      if (options.offset != null) {\n        fragment += ' LIMIT ' + this.escape(options.offset) + ', ' + this.escape(options.limit);\n      } else {\n        fragment += ' LIMIT ' + this.escape(options.limit);\n      }\n    }\n    /* eslint-enable */\n\n    return fragment;\n  },\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    let result;\n\n    if (smth instanceof Utils.Where) {\n      let value = smth.logic;\n      let key;\n\n      if (smth.attribute instanceof Utils.SequelizeMethod) {\n        key = this.getWhereConditions(smth.attribute, tableName, factory, options, prepend);\n      } else {\n        key = this.quoteTable(smth.attribute.Model.name) + '.' + this.quoteIdentifier(smth.attribute.field || smth.attribute.fieldName);\n      }\n\n      if (value && value instanceof Utils.SequelizeMethod) {\n        value = this.getWhereConditions(value, tableName, factory, options, prepend);\n\n        result = value === 'NULL' ? key + ' IS NULL' : [key, value].join(smth.comparator);\n      } else if (_.isPlainObject(value)) {\n        result = this.whereItemQuery(smth.attribute, value, {\n          model: factory\n        });\n      } else {\n        if (typeof value === 'boolean') {\n          value = this.booleanValue(value);\n        } else {\n          value = this.escape(value);\n        }\n\n        result = value === 'NULL' ? key + ' IS NULL' : [key, value].join(' ' + smth.comparator + ' ');\n      }\n    } else if (smth instanceof Utils.Literal) {\n      result = smth.val;\n    } else if (smth instanceof Utils.Cast) {\n      if (smth.val instanceof Utils.SequelizeMethod) {\n        result = this.handleSequelizeMethod(smth.val, tableName, factory, options, prepend);\n      } else if (_.isPlainObject(smth.val)) {\n        result = this.whereItemsQuery(smth.val);\n      } else {\n        result = this.escape(smth.val);\n      }\n\n      result = 'CAST(' + result + ' AS ' + smth.type.toUpperCase() + ')';\n    } else if (smth instanceof Utils.Fn) {\n      result = smth.fn + '(' + smth.args.map(arg => {\n        if (arg instanceof Utils.SequelizeMethod) {\n          return this.handleSequelizeMethod(arg, tableName, factory, options, prepend);\n        } else if (_.isPlainObject(arg)) {\n          return this.whereItemsQuery(arg);\n        } else {\n          return this.escape(arg);\n        }\n      }).join(', ') + ')';\n    } else if (smth instanceof Utils.Col) {\n      if (Array.isArray(smth.col)) {\n        if (!factory) {\n          throw new Error('Cannot call Sequelize.col() with array outside of order / group clause');\n        }\n      } else if (smth.col.indexOf('*') === 0) {\n        return '*';\n      }\n      return this.quote(smth.col, factory);\n    } else {\n      result = smth.toString(this, factory);\n    }\n\n    return result;\n  },\n\n  whereQuery(where, options) {\n    const query = this.whereItemsQuery(where, options);\n    if (query && query.length) {\n      return 'WHERE '+query;\n    }\n    return '';\n  },\n\n  whereItemsQuery(where, options, binding) {\n    if (\n      Array.isArray(where) && where.length === 0 ||\n      _.isPlainObject(where) && _.isEmpty(where) ||\n      where === null ||\n      where === undefined\n    ) {\n      // NO OP\n      return '';\n    }\n\n    if (_.isString(where)) {\n      throw new Error('Support for `{where: \\'raw query\\'}` has been removed.');\n    }\n\n    const items = [];\n\n    binding = binding || 'AND';\n    if (binding.substr(0, 1) !== ' ') binding = ' '+binding+' ';\n\n    if (_.isPlainObject(where)) {\n      _.forOwn(where, (value, key) => {\n        items.push(this.whereItemQuery(key, value, options));\n      });\n    } else {\n      items.push(this.whereItemQuery(undefined, where, options));\n    }\n\n    return items.length && items.filter(item => item && item.length).join(binding) || '';\n  },\n\n  whereItemQuery(key, value, options) {\n\n    options = options || {};\n\n    let binding;\n    let outerBinding;\n    let comparator = '=';\n    let field = options.field || options.model && options.model.rawAttributes && options.model.rawAttributes[key] || options.model && options.model.fieldRawAttributesMap && options.model.fieldRawAttributesMap[key];\n    let fieldType = field && field.type || options.type;\n\n    if (key && typeof key === 'string' && key.indexOf('.') !== -1 && options.model) {\n      if (options.model.rawAttributes[key.split('.')[0]] && options.model.rawAttributes[key.split('.')[0]].type instanceof DataTypes.JSON) {\n        field = options.model.rawAttributes[key.split('.')[0]];\n        fieldType = field.type;\n        const tmp = value;\n        value = {};\n\n        Dottie.set(value, key.split('.').slice(1), tmp);\n        key = field.field || key.split('.')[0];\n      }\n    }\n\n    const comparatorMap = {\n      $eq: '=',\n      $ne: '!=',\n      $gte: '>=',\n      $gt: '>',\n      $lte: '<=',\n      $lt: '<',\n      $not: 'IS NOT',\n      $is: 'IS',\n      $like: 'LIKE',\n      $notLike: 'NOT LIKE',\n      $iLike: 'ILIKE',\n      $notILike: 'NOT ILIKE',\n      $between: 'BETWEEN',\n      $notBetween: 'NOT BETWEEN',\n      $overlap: '&&',\n      $contains: '@>',\n      $contained: '<@',\n      $adjacent: '-|-',\n      $strictLeft: '<<',\n      $strictRight: '>>',\n      $noExtendRight: '&<',\n      $noExtendLeft: '&>'\n    };\n\n    // Maintain BC\n    const aliasMap = {\n      'ne': '$ne',\n      'in': '$in',\n      'not': '$not',\n      'notIn': '$notIn',\n      'gte': '$gte',\n      'gt': '$gt',\n      'lte': '$lte',\n      'lt': '$lt',\n      'like': '$like',\n      'ilike': '$iLike',\n      '$ilike': '$iLike',\n      'nlike': '$notLike',\n      '$notlike': '$notLike',\n      'notilike': '$notILike',\n      '..': '$between',\n      'between': '$between',\n      '!..': '$notBetween',\n      'notbetween': '$notBetween',\n      'nbetween': '$notBetween',\n      'overlap': '$overlap',\n      '&&': '$overlap',\n      '@>': '$contains',\n      '<@': '$contained'\n    };\n\n    key = aliasMap[key] || key;\n    if (_.isPlainObject(value)) {\n      _.forOwn(value, (item, key) => {\n        if (aliasMap[key]) {\n          value[aliasMap[key]] = item;\n          delete value[key];\n        }\n      });\n    }\n\n    if (key === undefined) {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (_.isPlainObject(value) && _.size(value) === 1) {\n        key = Object.keys(value)[0];\n        value = _.values(value)[0];\n      }\n    }\n\n    if (value && value instanceof Utils.SequelizeMethod && !(key !== undefined && value instanceof Utils.Fn)) {\n      return this.handleSequelizeMethod(value);\n    }\n\n    // Convert where: [] to $and if possible, else treat as literal/replacements\n    if (key === undefined && Array.isArray(value)) {\n      if (Utils.canTreatArrayAsAnd(value)) {\n        key = '$and';\n      } else {\n        throw new Error('Support for literal replacements in the `where` object has been removed.');\n      }\n    }\n    // OR/AND/NOT grouping logic\n    if (key === '$or' || key === '$and' || key === '$not') {\n      binding = key === '$or' ?' OR ' : ' AND ';\n      outerBinding = '';\n      if (key === '$not') outerBinding = 'NOT ';\n\n      if (Array.isArray(value)) {\n        value = value.map(item => {\n          let itemQuery = this.whereItemsQuery(item, options, ' AND ');\n          if ((Array.isArray(item) || _.isPlainObject(item)) && _.size(item) > 1) {\n            itemQuery = '('+itemQuery+')';\n          }\n          return itemQuery;\n        }).filter(item => item && item.length);\n\n        // $or: [] should return no data.\n        // $not of no restriction should also return no data\n        if ((key === '$or' || key === '$not') && value.length === 0) {\n          return '0 = 1';\n        }\n\n        return value.length ? outerBinding + '('+value.join(binding)+')' : undefined;\n      } else {\n        value = this.whereItemsQuery(value, options, binding);\n\n        if ((key === '$or' || key === '$not') && !value) {\n          return '0 = 1';\n        }\n\n        return value ? outerBinding + '('+value+')' : undefined;\n      }\n    }\n\n    if (value && (value.$or || value.$and)) {\n      binding = value.$or ? ' OR ' : ' AND ';\n      value = value.$or || value.$and;\n\n      if (_.isPlainObject(value)) {\n        value = _.reduce(value, (result, _value, key) => {\n          result.push(_.zipObject([key], [_value]));\n          return result;\n        }, []);\n      }\n\n      value = value.map(_value => this.whereItemQuery(key, _value, options)).filter(item => item && item.length);\n\n      return value.length ? '('+value.join(binding)+')' : undefined;\n    }\n\n    if (_.isPlainObject(value) && fieldType instanceof DataTypes.JSON && options.json !== false) {\n      const items = [];\n      const traverse = (prop, item, path) => {\n        const where = {};\n        let cast;\n\n        if (path[path.length - 1].indexOf('::') > -1) {\n          const tmp = path[path.length - 1].split('::');\n          cast = tmp[1];\n          path[path.length - 1] = tmp[0];\n        }\n\n        let baseKey = this.quoteIdentifier(key);\n\n        if (options.prefix) {\n          if (options.prefix instanceof Utils.Literal) {\n            baseKey = `${this.handleSequelizeMethod(options.prefix)}.${baseKey}`;\n          } else {\n            baseKey = `${this.quoteTable(options.prefix)}.${baseKey}`;\n          }\n        }\n\n        baseKey = this.jsonPathExtractionQuery(baseKey, path);\n\n        const castKey = item => {\n          const key = baseKey;\n\n          if (!cast) {\n            if (typeof item === 'number') {\n              cast = 'double precision';\n            } else if (item instanceof Date) {\n              cast = 'timestamptz';\n            } else if (typeof item === 'boolean') {\n              cast = 'boolean';\n            }\n          }\n\n          if (cast) {\n            return this.handleSequelizeMethod(new Utils.Cast(new Utils.Literal(key), cast));\n          }\n\n          return key;\n        };\n\n        if (_.isPlainObject(item)) {\n          _.forOwn(item, (item, prop) => {\n            if (prop.indexOf('$') === 0) {\n              where[prop] = item;\n              const key = castKey(item);\n\n              items.push(this.whereItemQuery(new Utils.Literal(key), where/*, _.pick(options, 'prefix')*/));\n            } else {\n              traverse(prop, item, path.concat([prop]));\n            }\n          });\n        } else {\n          where.$eq = item;\n          const key = castKey(item);\n\n          items.push(this.whereItemQuery(new Utils.Literal(key), where/*, _.pick(options, 'prefix')*/));\n        }\n      };\n\n      _.forOwn(value, (item, prop) => {\n        if (prop.indexOf('$') === 0) {\n          const where = {};\n          where[prop] = item;\n          items.push(this.whereItemQuery(key, where, _.assign({}, options, {json: false})));\n          return;\n        }\n\n        traverse(prop, item, [prop]);\n      });\n\n      const result = items.join(' AND ');\n      return items.length > 1 ? '('+result+')' : result;\n    }\n\n    // If multiple keys we combine the different logic conditions\n    if (_.isPlainObject(value) && Object.keys(value).length > 1) {\n      const items = [];\n      _.forOwn(value, (item, logic) => {\n        const where = {};\n        where[logic] = item;\n        items.push(this.whereItemQuery(key, where, options));\n      });\n\n      return '('+items.join(' AND ')+')';\n    }\n\n    // Do [] to $in/$notIn normalization\n    if (value && (!fieldType || !(fieldType instanceof DataTypes.ARRAY))) {\n      if (Array.isArray(value)) {\n        value = {\n          $in: value\n        };\n      } else if (value && Array.isArray(value.$not)) {\n        value.$notIn = value.$not;\n        delete value.$not;\n      }\n    }\n\n    // normalize $not: non-bool|non-null to $ne\n    if (value && typeof value.$not !== 'undefined' && [null, true, false].indexOf(value.$not) < 0) {\n      value.$ne = value.$not;\n      delete value.$not;\n    }\n\n    // Setup keys and comparators\n    if (Array.isArray(value) && fieldType instanceof DataTypes.ARRAY) {\n      value = this.escape(value, field);\n    } else if (value && (value.$in || value.$notIn)) {\n      comparator = 'IN';\n      if (value.$notIn) comparator = 'NOT IN';\n\n      if ((value.$in || value.$notIn) instanceof Utils.Literal) {\n        value = (value.$in || value.$notIn).val;\n      } else if ((value.$in || value.$notIn).length) {\n        value = '('+(value.$in || value.$notIn).map(item => this.escape(item)).join(', ')+')';\n      } else {\n        if (value.$in) {\n          value = '(NULL)';\n        } else {\n          return '';\n        }\n      }\n    } else if (value && (value.$any || value.$all)) {\n      comparator = value.$any ? '= ANY' : '= ALL';\n      if (value.$any && value.$any.$values || value.$all && value.$all.$values) {\n        value = '(VALUES '+(value.$any && value.$any.$values || value.$all && value.$all.$values).map(value => '('+this.escape(value)+')').join(', ')+')';\n      } else {\n        value = '('+this.escape(value.$any || value.$all, field)+')';\n      }\n    } else if (value && (value.$between || value.$notBetween)) {\n      comparator = 'BETWEEN';\n      if (value.$notBetween) comparator = 'NOT BETWEEN';\n\n      value = (value.$between || value.$notBetween).map(item => this.escape(item)).join(' AND ');\n    } else if (value && value.$raw) {\n      throw new Error('The `$raw` where property is no longer supported.  Use `sequelize.literal` instead.');\n    } else if (value && value.$col) {\n      value = value.$col.split('.');\n\n      if (value.length > 2) {\n        value = [\n          // join the tables by -> to match out internal namings\n          value.slice(0, -1).join('->'),\n          value[value.length - 1]\n        ];\n      }\n\n      value = value.map(identifier => this.quoteIdentifier(identifier)).join('.');\n    } else {\n      let escapeValue = true;\n      const escapeOptions = {};\n\n      if (_.isPlainObject(value)) {\n        _.forOwn(value, (item, key) => {\n          if (comparatorMap[key]) {\n            comparator = comparatorMap[key];\n            value = item;\n\n            if (_.isPlainObject(value) && value.$any) {\n              comparator += ' ANY';\n              escapeOptions.isList = true;\n              value = value.$any;\n            } else if (_.isPlainObject(value) && value.$all) {\n              comparator += ' ALL';\n              escapeOptions.isList = true;\n              value = value.$all;\n            } else if (value && value.$col) {\n              escapeValue = false;\n              value = this.whereItemQuery(null, value);\n            }\n          }\n        });\n      }\n\n      if (comparator === '=' && value === null) {\n        comparator = 'IS';\n      } else if (comparator === '!=' && value === null) {\n        comparator = 'IS NOT';\n      }\n\n      escapeOptions.acceptStrings = comparator.indexOf('LIKE') !== -1;\n\n      if (escapeValue) {\n        value = this.escape(value, field, escapeOptions);\n\n        //if ANY is used with like, add parentheses to generate correct query\n        if (escapeOptions.acceptStrings && comparator.indexOf('ANY') > comparator.indexOf('LIKE')) {\n          value = '(' + value + ')';\n        }\n      }\n    }\n\n    if (key) {\n      let prefix = true;\n      if (key instanceof Utils.SequelizeMethod) {\n        key = this.handleSequelizeMethod(key);\n      } else if (Utils.isColString(key)) {\n        key = key.substr(1, key.length - 2).split('.');\n\n        if (key.length > 2) {\n          key = [\n            // join the tables by -> to match out internal namings\n            key.slice(0, -1).join('->'),\n            key[key.length - 1]\n          ];\n        }\n\n        key = key.map(identifier => this.quoteIdentifier(identifier)).join('.');\n        prefix = false;\n      } else {\n        key = this.quoteIdentifier(key);\n      }\n\n      if (options.prefix && prefix) {\n        if (options.prefix instanceof Utils.Literal) {\n          key = [this.handleSequelizeMethod(options.prefix), key].join('.');\n        } else {\n          key = [this.quoteTable(options.prefix), key].join('.');\n        }\n      }\n      return [key, value].join(' '+comparator+' ');\n    }\n    return value;\n  },\n\n  /*\n    Takes something and transforms it into values of a where condition.\n   @private\n  */\n  getWhereConditions(smth, tableName, factory, options, prepend) {\n    let result = null;\n    const where = {};\n\n    if (Array.isArray(tableName)) {\n      tableName = tableName[0];\n      if (Array.isArray(tableName)) {\n        tableName = tableName[1];\n      }\n    }\n\n    options = options || {};\n\n    if (typeof prepend === 'undefined') {\n      prepend = true;\n    }\n\n    if (smth && smth instanceof Utils.SequelizeMethod) { // Checking a property is cheaper than a lot of instanceof calls\n      result = this.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    } else if (_.isPlainObject(smth)) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    } else if (typeof smth === 'number') {\n      let primaryKeys = factory ? Object.keys(factory.primaryKeys) : [];\n\n      if (primaryKeys.length > 0) {\n        // Since we're just a number, assume only the first key\n        primaryKeys = primaryKeys[0];\n      } else {\n        primaryKeys = 'id';\n      }\n\n      where[primaryKeys] = smth;\n\n      return this.whereItemsQuery(where, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    } else if (typeof smth === 'string') {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    } else if (Buffer.isBuffer(smth)) {\n      result = this.escape(smth);\n    } else if (Array.isArray(smth)) {\n      if (smth.length === 0 || smth.length > 0 && smth[0].length === 0) return '1=1';\n      if (Utils.canTreatArrayAsAnd(smth)) {\n        const _smth = { $and: smth };\n        result = this.getWhereConditions(_smth, tableName, factory, options, prepend);\n      } else {\n        throw new Error('Support for literal replacements in the `where` object has been removed.');\n      }\n    } else if (smth === null) {\n      return this.whereItemsQuery(smth, {\n        model: factory,\n        prefix: prepend && tableName\n      });\n    }\n\n    return result ? result : '1=1';\n  },\n\n  // A recursive parser for nested where conditions\n  parseConditionObject(conditions, path) {\n    path = path || [];\n    return _.reduce(conditions, (result, value, key) => {\n      if (_.isObject(value)) {\n        result = result.concat(this.parseConditionObject(value, path.concat(key))); // Recursively parse objects\n      } else {\n        result.push({ path: path.concat(key), value });\n      }\n      return result;\n    }, []);\n  },\n\n  isIdentifierQuoted(string) {\n    return /^\\s*(?:([`\"'])(?:(?!\\1).|\\1{2})*\\1\\.?)+\\s*$/i.test(string);\n  },\n\n  booleanValue(value) {\n    return value;\n  }\n};\n\nmodule.exports = QueryGenerator;\n"]}