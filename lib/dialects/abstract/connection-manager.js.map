{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/abstract/connection-manager.js"],"names":["Pooling","require","Promise","_","Utils","debug","getLogger","debugContext","semver","timers","defaultPoolingConfig","max","min","idle","acquire","handleDisconnects","ConnectionManager","dialect","sequelize","config","cloneDeep","versionPromise","poolError","dialectName","options","pool","Error","defaults","validate","_validate","bind","onProcessExit","process","on","initPools","dataTypes","each","dataType","hasOwnProperty","types","_refreshTypeParser","key","resolve","drain","clear","removeListener","getConnection","reject","replication","createPool","create","_connect","tap","then","catch","e","destroy","_disconnect","connection","testOnBorrow","autostart","acquireTimeoutMillis","idleTimeoutMillis","error","reads","Array","isArray","read","write","omit","map","readConfig","release","client","queryType","priority","useMaster","isUndefined","join","nextRead","length","promise","databaseVersion","_options","transaction","logging","__testLoggingFn","valid","version","defaultVersion","err","connectionPromise","type","connectionTimer","setInterval","evictTimer","isFulfilled","isRejected","clearInterval","runHooks","connectionManager","connect","return","disconnect","module","exports","default"],"mappings":"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","file":"connection-manager.js","sourcesContent":["'use strict';\n\nconst Pooling = require('generic-pool');\nconst Promise = require('../../promise');\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('pool');\nconst semver = require('semver');\nconst timers = require('timers');\n\nconst defaultPoolingConfig = {\n  max: 5,\n  min: 0,\n  idle: 10000,\n  acquire: 10000,\n  handleDisconnects: true\n};\n\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.poolError = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error('Support for pool:false was removed in v4.0');\n    }\n\n    config.pool =_.defaults(config.pool || {}, defaultPoolingConfig, {\n      validate: this._validate.bind(this),\n      Promise\n    }) ;\n\n    // Save a reference to the bound version so we can remove it with removeListener\n    this.onProcessExit = this.onProcessExit.bind(this);\n\n    process.on('exit', this.onProcessExit);\n\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (dataType.hasOwnProperty('parse')) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error('Parse function not supported for type ' + dataType.key + ' in dialect ' + this.dialectName);\n        }\n      }\n    });\n  }\n\n  onProcessExit() {\n    if (!this.pool) {\n      return Promise.resolve();\n    }\n\n    return this.pool.drain(() => {\n      debug('connection drain due to process exit');\n      return this.pool.clear();\n    });\n  }\n\n  close() {\n    // Remove the listener, so all references to this instance can be garbage collected.\n    process.removeListener('exit', this.onProcessExit);\n\n    // Mark close of pool\n    this.getConnection = function getConnection() {\n      return Promise.reject(new Error('ConnectionManager.getConnection was called after the connection manager was closed!'));\n    };\n\n    return this.onProcessExit();\n  }\n\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = Pooling.createPool({\n        create: () => new Promise(resolve => {\n          this\n            ._connect(config)\n            .tap(() => {\n              this.poolError = null;\n            })\n            .then(resolve)\n            .catch(e => {\n              // dont throw otherwise pool will release _dispense call\n              // which will call _connect even if error is fatal\n              // https://github.com/coopernurse/node-pool/issues/161\n              this.poolError = e;\n            });\n        }),\n        destroy: connection => {\n          return this._disconnect(connection).tap(() => {\n            debug('connection destroy');\n          });\n        },\n        validate: config.pool.validate\n      }, {\n        Promise: config.pool.Promise,\n        max: config.pool.max,\n        min: config.pool.min,\n        testOnBorrow: true,\n        autostart: false,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle\n      });\n\n      this.pool.on('factoryCreateError', error => {\n        this.poolError = error;\n      });\n\n      debug(`pool created max/min: ${config.pool.max}/${config.pool.min} with no replication`);\n      return;\n    }\n\n    let reads = 0;\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    // Map main connection config\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));\n\n    // Apply defaults to each read config\n    config.replication.read = _.map(config.replication.read, readConfig =>\n      _.defaults(readConfig, _.omit(this.config, 'replication'))\n    );\n\n    // custom pooling for replication (original author @janmeier)\n    this.pool = {\n      release: client => {\n        if (client.queryType === 'read') {\n          return this.pool.read.release(client);\n        } else {\n          return this.pool.write.release(client);\n        }\n      },\n      acquire: (priority, queryType, useMaster) => {\n        useMaster = _.isUndefined(useMaster) ? false : useMaster;\n        if (queryType === 'SELECT' && !useMaster) {\n          return this.pool.read.acquire(priority);\n        } else {\n          return this.pool.write.acquire(priority);\n        }\n      },\n      destroy: connection => {\n        debug('connection destroy');\n        return this.pool[connection.queryType].destroy(connection);\n      },\n      clear: () => {\n        debug('all connection clear');\n        return Promise.join(\n          this.pool.read.clear(),\n          this.pool.write.clear()\n        );\n      },\n      drain: () => {\n        return Promise.join(\n          this.pool.write.drain(),\n          this.pool.read.drain()\n        );\n      },\n      read: Pooling.createPool({\n        create: () => {\n          const nextRead = reads++ % config.replication.read.length; // round robin config\n          return new Promise(resolve => {\n            this\n              ._connect(config.replication.read[nextRead])\n              .tap(connection => {\n                connection.queryType = 'read';\n                this.poolError = null;\n                resolve(connection);\n              })\n              .catch(e => {\n                this.poolError = e;\n              });\n          });\n        },\n        destroy: connection => {\n          return this._disconnect(connection);\n        },\n        validate: config.pool.validate\n      }, {\n        Promise: config.pool.Promise,\n        max: config.pool.max,\n        min: config.pool.min,\n        testOnBorrow: true,\n        autostart: false,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle\n      }),\n      write: Pooling.createPool({\n        create: () => new Promise(resolve => {\n          this\n            ._connect(config.replication.write)\n            .then(connection => {\n              connection.queryType = 'write';\n              this.poolError = null;\n              return resolve(connection);\n            })\n            .catch(e => {\n              this.poolError = e;\n            });\n        }),\n        destroy: connection => {\n          return this._disconnect(connection);\n        },\n        validate: config.pool.validate\n      }, {\n        Promise: config.pool.Promise,\n        max: config.pool.max,\n        min: config.pool.min,\n        testOnBorrow: true,\n        autostart: false,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle\n      })\n    };\n\n    this.pool.read.on('factoryCreateError', error => {\n      this.poolError = error;\n    });\n\n    this.pool.write.on('factoryCreateError', error => {\n      this.poolError = error;\n    });\n  }\n\n  getConnection(options) {\n    options = options || {};\n\n    let promise;\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (this.versionPromise) {\n        promise = this.versionPromise;\n      } else {\n        promise = this.versionPromise = this._connect(this.config.replication.write || this.config).then(connection => {\n          const _options = {};\n          _options.transaction = {connection}; // Cheat .query to use our private connection\n          _options.logging = () => {};\n          _options.logging.__testLoggingFn = true;\n\n          return this.sequelize.databaseVersion(_options).then(version => {\n            this.sequelize.options.databaseVersion = semver.valid(version) ? version : this.defaultVersion;\n            this.versionPromise = null;\n\n            return this._disconnect(connection);\n          });\n        }).catch(err => {\n          this.versionPromise = null;\n          throw err;\n        });\n      }\n    } else {\n      promise = Promise.resolve();\n    }\n\n    return promise.then(() =>\n      new Promise((resolve, reject) => {\n        const connectionPromise = this.pool.acquire(options.priority, options.type, options.useMaster);\n        const connectionTimer = timers.setInterval(() => {\n          let evictTimer = false;\n\n          if (connectionPromise.isFulfilled()) {\n            resolve(connectionPromise);\n            debug('connection acquire');\n            evictTimer = true;\n          } else if (this.poolError) {\n            reject(this.poolError);\n            this.poolError = null;\n            evictTimer = true;\n          } else if (connectionPromise.isRejected()) {\n            connectionPromise.catch(reject);\n            evictTimer = true;\n          }\n\n          if (evictTimer) {\n            timers.clearInterval(connectionTimer);\n          }\n        }, 0);\n      })\n    );\n  }\n\n  releaseConnection(connection) {\n    return this.pool.release(connection).tap(() => {\n      debug('connection released');\n    });\n  }\n\n  _connect(config) {\n    return this.sequelize.runHooks('beforeConnect', config)\n      .then(() => this.dialect.connectionManager.connect(config))\n      .then(connection => this.sequelize.runHooks('afterConnect', connection, config).return(connection));\n  }\n\n  _disconnect(connection) {\n    return this.dialect.connectionManager.disconnect(connection);\n  }\n\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) return true;\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]}