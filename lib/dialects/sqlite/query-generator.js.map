{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/sqlite/query-generator.js"],"names":["Utils","require","util","Transaction","_","MySqlQueryGenerator","AbstractQueryGenerator","QueryGenerator","__proto__","options","dialect","createSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","primaryKeys","needsMultiplePrimaryKeys","values","filter","includes","definition","length","attrArray","attr","hasOwnProperty","dataType","containsAutoIncrement","replace","dataTypeString","push","quoteIdentifier","table","quoteTable","attrStr","join","pkString","map","pk","uniqueKeys","each","columns","singleField","fields","field","sql","replaceBooleanDefaults","booleanValue","value","checkValidJsonStatement","stmt","isString","jsonFunctionRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","indexOf","tokenMatches","capturedToken","Error","jsonPathExtractionQuery","column","path","paths","toPath","pathStr","escape","concat","digit","quotedColumn","isIdentifierQuoted","handleSequelizeMethod","smth","factory","prepend","Json","conditions","parseConditionObject","first","condition","tail","str","shift","format","Cast","test","type","call","addColumnQuery","key","attributesToSQL","context","attribute","showTablesQuery","upsertQuery","insertValues","updateValues","where","rawAttributes","ignoreDuplicates","insertQuery","updateQuery","attrValueHash","defaults","removeNullValuesFromHash","omitNull","modelAttributeMap","undefined","whereQuery","deleteQuery","model","whereClause","getWhereConditions","result","name","fieldName","isObject","toString","allowNull","defaultValueSchemable","defaultValue","unique","primaryKey","autoIncrement","references","referencesTable","referencesKey","onDelete","toUpperCase","onUpdate","findAutoIncrementField","showIndexesQuery","showConstraintsQuery","constraintName","removeIndexQuery","indexNameOrAttributes","indexName","underscore","describeTableQuery","schema","schemaDelimiter","_schema","_schemaDelimiter","addSchema","describeCreateTableQuery","removeColumnQuery","backupTableName","quotedTableName","quotedBackupTableName","attributeNames","Object","keys","_alterConstraintQuery","createTableSql","renameColumnQuery","attrNameBefore","attrNameAfter","attributeNamesImport","attributeNamesExport","startTransactionQuery","transaction","parent","setAutocommitQuery","setIsolationLevelQuery","ISOLATION_LEVELS","REPEATABLE_READ","READ_UNCOMMITTED","READ_COMMITTED","SERIALIZABLE","identifier","addTicks","removeTicks","getForeignKeysQuery","module","exports"],"mappings":"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","file":"query-generator.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst Transaction = require('../../transaction');\nconst _ = require('lodash');\nconst MySqlQueryGenerator = require('../mysql/query-generator');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nconst QueryGenerator = {\n  __proto__: MySqlQueryGenerator,\n  options: {},\n  dialect: 'sqlite',\n\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  },\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  },\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  },\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Utils._.values(attributes).filter(definition => _.includes(definition, 'PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (attributes.hasOwnProperty(attr)) {\n        let dataType = attributes[attr];\n        const containsAutoIncrement = Utils._.includes(dataType, 'AUTOINCREMENT');\n\n        if (containsAutoIncrement) {\n          dataType = dataType.replace(/BIGINT/, 'INTEGER');\n        }\n\n        let dataTypeString = dataType;\n        if (Utils._.includes(dataType, 'PRIMARY KEY')) {\n          if (Utils._.includes(dataType, 'INTEGER')) { // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            dataTypeString = dataType.replace(/PRIMARY KEY/, 'NOT NULL');\n          }\n        }\n        attrArray.push(this.quoteIdentifier(attr) + ' ' + dataTypeString);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      Utils._.each(options.uniqueKeys, columns => {\n        if (!columns.singleField) { // If it's a single field its handled in column def, not as an index\n          attrStr += ', UNIQUE (' + columns.fields.map(field => this.quoteIdentifier(field)).join(', ') + ')';\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += ', PRIMARY KEY (' + pkString + ')';\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  },\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  },\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {String}  stmt  The statement to validate\n   * @returns {Boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  checkValidJsonStatement(stmt) {\n    if (!_.isString(stmt)) {\n      return false;\n    }\n\n    // https://sqlite.org/json1.html\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error('Invalid json statement: ' + stmt);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  },\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {String}               column  The JSON column\n   * @param   {String|Array<String>} [path]  The path to extract (optional)\n   * @returns {String}                       The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path) {\n    const paths = _.toPath(path);\n    const pathStr = this.escape(['$']\n      .concat(paths)\n      .join('.')\n      .replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (_, digit) => `[${digit}]`));\n\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    return `json_extract(${quotedColumn}, ${pathStr})`;\n  },\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(_.first(condition.path), _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      } else if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this.checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    } else if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      }\n    }\n    return AbstractQueryGenerator.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  },\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: 'addColumn' });\n    const attribute = this.quoteIdentifier(key) + ' ' + fields[key];\n\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n\n    return this.replaceBooleanDefaults(sql);\n  },\n\n  showTablesQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, rawAttributes, options) {\n    options.ignoreDuplicates = true;\n\n    const sql = this.insertQuery(tableName, insertValues, rawAttributes, options) + ' ' + this.updateQuery(tableName, updateValues, where, options, rawAttributes);\n\n    return sql;\n  },\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n      values.push(this.quoteIdentifier(key) + '=' + this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }));\n    }\n\n    return `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, options)}`;\n  },\n\n  deleteQuery(tableName, where, options, model) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    if (whereClause) {\n      whereClause = ' WHERE ' + whereClause;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)}${whereClause}`;\n  },\n\n  attributesToSQL(attributes) {\n    const result = {};\n\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (Utils._.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (dataType.hasOwnProperty('allowNull') && !dataType.allowNull) {\n          sql += ' NOT NULL';\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ' DEFAULT ' + this.escape(dataType.defaultValue, dataType);\n        }\n\n        if (dataType.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (dataType.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (dataType.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ' ON DELETE ' + dataType.onDelete.toUpperCase();\n          }\n\n          if (dataType.onUpdate) {\n            sql += ' ON UPDATE ' + dataType.onUpdate.toUpperCase();\n          }\n\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  },\n\n  findAutoIncrementField(factory) {\n    const fields = [];\n\n    for (const name in factory.attributes) {\n      if (factory.attributes.hasOwnProperty(name)) {\n        const definition = factory.attributes[name];\n        if (definition && definition.autoIncrement) {\n          fields.push(name);\n        }\n      }\n    }\n\n    return fields;\n  },\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  },\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql =  `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return sql + ';';\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  },\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  },\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  },\n\n  removeColumnQuery(tableName, attributes) {\n\n    attributes = this.attributesToSQL(attributes);\n\n    let backupTableName;\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: tableName.tableName + '_backup',\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = tableName + '_backup';\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).join(', ');\n\n    return this.createTableQuery(backupTableName, attributes).replace('CREATE TABLE', 'CREATE TEMPORARY TABLE')\n      + `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + this.createTableQuery(tableName, attributes)\n      + `INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  },\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: tableName.tableName + '_backup',\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = tableName + '_backup';\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).join(', ');\n\n    return createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)\n      + `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  },\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: tableName.tableName + '_backup',\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = tableName + '_backup';\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr =>\n      attrNameAfter === attr ? this.quoteIdentifier(attrNameBefore) + ' AS ' + this.quoteIdentifier(attr) : this.quoteIdentifier(attr)\n    ).join(', ');\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    return this.createTableQuery(backupTableName, attributes).replace('CREATE TABLE', 'CREATE TEMPORARY TABLE')\n      + `INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + this.createTableQuery(tableName, attributes)\n      + `INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  },\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return 'SAVEPOINT ' + this.quoteIdentifier(transaction.name) + ';';\n    }\n\n    return 'BEGIN ' + transaction.options.type + ' TRANSACTION;';\n  },\n\n  setAutocommitQuery() {\n    // SQLite does not support SET autocommit\n    return null;\n  },\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = ON;';\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'PRAGMA read_uncommitted = OFF;';\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return \"-- SQLite's default isolation level is SERIALIZABLE. Nothing to do.\";\n      default:\n        throw new Error('Unknown isolation level: ' + value);\n    }\n  },\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  },\n\n  quoteIdentifier(identifier) {\n    if (identifier === '*') return identifier;\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${tableName})`;\n  }\n};\n\nmodule.exports = QueryGenerator;\n"]}