{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/sqlite/query-interface.js"],"names":["Utils","require","Promise","UnknownConstraintError","removeColumn","tableName","attributeName","options","describeTable","then","fields","sql","QueryGenerator","removeColumnQuery","subQueries","split","filter","q","each","sequelize","query","subQuery","_","assign","raw","exports","changeColumn","attributes","Object","keys","renameColumn","attrNameBefore","attrNameAfter","clone","renameColumnQuery","removeConstraint","constraintName","createTableSql","showConstraint","constraint","constraints","quoteIdentifier","constraintSnippet","constraintType","constraintCondition","referenceTableName","quoteTable","referenceTableKeys","map","columnName","join","updateAction","deleteAction","replace","_alterConstraintQuery","addConstraint","getConstraintSnippet","describeCreateTableSql","describeCreateTableQuery","index","length","substr"],"mappings":"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","file":"query-interface.js","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst Promise = require('../../promise');\nconst UnknownConstraintError = require('../../errors').UnknownConstraintError;\n\n/**\n Returns an object that treats SQLite's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n  A wrapper that fixes SQLite's inability to remove columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but without the obsolete column.\n\n  @method removeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName     The name of the table.\n  @param  {String} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\nfunction removeColumn(tableName, attributeName, options) {\n  options = options || {};\n\n  return this.describeTable(tableName, options).then(fields => {\n    delete fields[attributeName];\n\n    const sql = this.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', Utils._.assign({raw: true}, options)));\n  });\n}\nexports.removeColumn = removeColumn;\n\n/**\n  A wrapper that fixes SQLite's inability to change columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a modified version of the respective column.\n\n  @method changeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName The name of the table.\n  @param  {Object} attributes An object with the attribute's name as key and it's options as value object.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\nfunction changeColumn(tableName, attributes, options) {\n  const attributeName = Object.keys(attributes)[0];\n  options = options || {};\n\n  return this.describeTable(tableName, options).then(fields => {\n    fields[attributeName] = attributes[attributeName];\n\n    const sql = this.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', Utils._.assign({raw: true}, options)));\n  });\n}\nexports.changeColumn = changeColumn;\n\n/**\n  A wrapper that fixes SQLite's inability to rename columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a renamed version of the respective column.\n\n  @method renameColumn\n  @for    QueryInterface\n\n  @param  {String} tableName The name of the table.\n  @param  {String} attrNameBefore The name of the attribute before it was renamed.\n  @param  {String} attrNameAfter The name of the attribute after it was renamed.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\nfunction renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n  options = options || {};\n\n  return this.describeTable(tableName, options).then(fields => {\n    fields[attrNameAfter] = Utils._.clone(fields[attrNameBefore]);\n    delete fields[attrNameBefore];\n\n    const sql = this.QueryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', Utils._.assign({raw: true}, options)));\n  });\n}\nexports.renameColumn = renameColumn;\n\nfunction removeConstraint(tableName, constraintName, options) {\n  let createTableSql;\n\n  return this.showConstraint(tableName, constraintName)\n    .then(constraints => {\n      const constraint = constraints[0];\n\n      if (constraint) {\n        createTableSql = constraint.sql;\n        constraint.constraintName = this.QueryGenerator.quoteIdentifier(constraint.constraintName);\n        let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n        if (constraint.constraintType === 'FOREIGN KEY') {\n          const referenceTableName = this.QueryGenerator.quoteTable(constraint.referenceTableName);\n          constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.QueryGenerator.quoteIdentifier(columnName));\n          const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n          constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n          constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n          constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n        }\n\n        createTableSql = createTableSql.replace(constraintSnippet, '');\n        createTableSql += ';';\n\n        return this.describeTable(tableName, options);\n      } else {\n        throw new UnknownConstraintError(`Constraint ${constraintName} on table ${tableName} does not exist`);\n      }\n    })\n    .then(fields => {\n      const sql = this.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n      const subQueries = sql.split(';').filter(q => q !== '');\n\n      return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', Utils._.assign({raw: true}, options)));\n    });\n}\nexports.removeConstraint = removeConstraint;\n\nfunction addConstraint(tableName, options) {\n  const constraintSnippet = this.QueryGenerator.getConstraintSnippet(tableName, options);\n  const describeCreateTableSql = this.QueryGenerator.describeCreateTableQuery(tableName);\n  let createTableSql;\n\n  return this.sequelize.query(describeCreateTableSql, options)\n    .then(constraints => {\n      const sql = constraints[0].sql;\n      const index = sql.length - 1;\n      //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n      //http://stackoverflow.com/questions/1431094\n      createTableSql = sql.substr(0, index) +  `, ${constraintSnippet})` + sql.substr(index + 1) + ';';\n\n      return this.describeTable(tableName, options);\n    })\n    .then(fields => {\n      const sql = this.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n      const subQueries = sql.split(';').filter(q => q !== '');\n\n      return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', Utils._.assign({raw: true}, options)));\n    });\n}\nexports.addConstraint = addConstraint;\n"]}