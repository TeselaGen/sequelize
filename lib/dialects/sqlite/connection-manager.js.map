{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/sqlite/connection-manager.js"],"names":["AbstractConnectionManager","require","Promise","Utils","debug","getLogger","debugContext","dataTypes","sqlite","sequelizeErrors","parserStore","ConnectionManager","dialect","sequelize","config","dialectName","options","connections","host","dialectModulePath","lib","verbose","err","code","Error","refreshTypeParser","dataType","refresh","clear","uuid","inMemory","storage","dialectOptions","readWriteMode","mode","resolve","reject","Database","OPEN_READWRITE","OPEN_CREATE","ConnectionError","tap","password","connection","run","escape","foreignKeys","force","filename","close","module","exports","default"],"mappings":"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","file":"connection-manager.js","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst Promise = require('../../promise');\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('connection:sqlite');\nconst dataTypes = require('../../data-types').sqlite;\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('sqlite');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n    this.sequelize = sequelize;\n    this.config = sequelize.config;\n    this.dialect = dialect;\n    this.dialectName = this.sequelize.options.dialect;\n    this.connections = {};\n\n    // We attempt to parse file location from a connection uri but we shouldn't match sequelize default host.\n    if (this.sequelize.options.host === 'localhost') delete this.sequelize.options.host;\n\n    try {\n      if (sequelize.config.dialectModulePath) {\n        this.lib = require(sequelize.config.dialectModulePath).verbose();\n      } else {\n        this.lib = require('sqlite3').verbose();\n      }\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        throw new Error('Please install sqlite3 package manually');\n      }\n      throw err;\n    }\n\n    this.refreshTypeParser(dataTypes);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || 'default';\n    options.inMemory = (this.sequelize.options.storage || this.sequelize.options.host || ':memory:') === ':memory:' ? 1 : 0;\n\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    options.readWriteMode = dialectOptions && dialectOptions.mode;\n\n    if (this.connections[options.inMemory || options.uuid]) {\n      return Promise.resolve(this.connections[options.inMemory || options.uuid]);\n    }\n\n    return new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(\n        this.sequelize.options.storage || this.sequelize.options.host || ':memory:',\n        options.readWriteMode || this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE, // default mode\n        err => {\n          if (err) {\n            if (err.code === 'SQLITE_CANTOPEN') return reject(new sequelizeErrors.ConnectionError(err));\n            return reject(new sequelizeErrors.ConnectionError(err));\n          }\n          debug(`connection acquired ${options.uuid}`);\n          resolve(this.connections[options.inMemory || options.uuid]);\n        }\n      );\n    }).tap(connection => {\n      if (this.sequelize.config.password) {\n        // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\n        connection.run('PRAGMA KEY=' + this.sequelize.escape(this.sequelize.config.password));\n      }\n      if (this.sequelize.options.foreignKeys !== false) {\n        // Make it possible to define and use foreign key constraints unless\n        // explicitly disallowed. It's still opt-in per relation\n        connection.run('PRAGMA FOREIGN_KEYS=ON');\n      }\n    });\n  }\n\n  releaseConnection(connection, force) {\n    if (connection.filename === ':memory:' && force !== true) return;\n\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n}\n\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]}