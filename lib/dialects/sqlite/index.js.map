{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/sqlite/index.js"],"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","sqlite","SqliteDialect","sequelize","connectionManager","extend","options","_dialect","prototype","supports","merge","cloneDeep","index","using","transactionOptions","type","autocommit","constraints","addConstraint","dropConstraint","joinTableDependent","groupedLimit","ignoreDuplicates","JSON","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,kBAAkBD,QAAQ,aAAR,CAAxB;AACA,IAAME,oBAAoBF,QAAQ,sBAAR,CAA1B;AACA,IAAMG,QAAQH,QAAQ,SAAR,CAAd;AACA,IAAMI,iBAAiBJ,QAAQ,mBAAR,CAAvB;AACA,IAAMK,YAAYL,QAAQ,kBAAR,EAA4BM,MAA9C;;IAEMC,a;;;AACJ,yBAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AAErB,UAAKA,SAAL,GAAiBA,SAAjB;AACA,UAAKC,iBAAL,GAAyB,IAAIP,iBAAJ,QAA4BM,SAA5B,CAAzB;AACA,UAAKJ,cAAL,GAAsBL,EAAEW,MAAF,CAAS,EAAT,EAAaN,cAAb,EAA6B;AACjDO,eAASH,UAAUG,OAD8B;AAEjDC,qBAFiD;AAGjDJ;AAHiD,KAA7B,CAAtB;AAJqB;AAStB;;;EAVyBP,e;;AAa5BM,cAAcM,SAAd,CAAwBC,QAAxB,GAAmCf,EAAEgB,KAAF,CAAQhB,EAAEiB,SAAF,CAAYf,gBAAgBY,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;AAC1F,aAAW,KAD+E;AAE1F,oBAAkB,IAFwE;AAG1F,eAAa,KAH6E;AAI1F,YAAU,YAJgF;AAK1FG,SAAO;AACLC,WAAO;AADF,GALmF;AAQ1FC,sBAAoB;AAClBC,UAAM,IADY;AAElBC,gBAAY;AAFM,GARsE;AAY1FC,eAAa;AACXC,mBAAe,KADJ;AAEXC,oBAAgB;AAFL,GAZ6E;AAgB1FC,sBAAoB,KAhBsE;AAiB1FC,gBAAc,KAjB4E;AAkB1FC,oBAAkB,YAlBwE;AAmB1FC,QAAM;AAnBoF,CAAzD,CAAnC;;AAsBA1B,kBAAkBW,SAAlB,CAA4BgB,cAA5B,GAA6C,OAA7C;AACAtB,cAAcM,SAAd,CAAwBV,KAAxB,GAAgCA,KAAhC;AACAI,cAAcM,SAAd,CAAwBR,SAAxB,GAAoCA,SAApC;AACAE,cAAcM,SAAd,CAAwBiB,IAAxB,GAA+B,QAA/B;AACAvB,cAAcM,SAAd,CAAwBkB,SAAxB,GAAoC,GAApC;AACAxB,cAAcM,SAAd,CAAwBmB,cAAxB,GAAyCzB,cAAcM,SAAd,CAAwBkB,SAAjE;AACAxB,cAAcM,SAAd,CAAwBoB,eAAxB,GAA0C1B,cAAcM,SAAd,CAAwBkB,SAAlE;;AAEAG,OAAOC,OAAP,GAAiB5B,aAAjB;AACA2B,OAAOC,OAAP,CAAe5B,aAAf,GAA+BA,aAA/B;AACA2B,OAAOC,OAAP,CAAeC,OAAf,GAAyB7B,aAAzB","file":"index.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = _.extend({}, QueryGenerator, {\n      options: sequelize.options,\n      _dialect: this,\n      sequelize\n    });\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': false,\n  'DEFAULT VALUES': true,\n  'UNION ALL': false,\n  'IGNORE': ' OR IGNORE',\n  index: {\n    using: false\n  },\n  transactionOptions: {\n    type: true,\n    autocommit: false\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  joinTableDependent: false,\n  groupedLimit: false,\n  ignoreDuplicates: ' OR IGNORE',\n  JSON: true\n});\n\nConnectionManager.prototype.defaultVersion = '3.8.0';\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"]}