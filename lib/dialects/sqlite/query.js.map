{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/sqlite/query.js"],"names":["_","require","Utils","debug","getLogger","debugContext","Promise","AbstractQuery","QueryTypes","sequelizeErrors","parserStore","Query","database","sequelize","options","instance","model","extend","logging","console","log","plain","raw","checkLoggingOption","include","prefix","ret","_include","key","as","merge","_collectModels","sql","parameters","method","getDatabaseMethod","formatBindParameters","bind","dialect","skipUnescape","benchmark","queryBegin","Date","now","uuid","columnTypes","serialize","executeSql","indexOf","resolve","reject","query","afterExecute","err","results","formatError","metaData","result","isInsertQuery","handleInsertQuery","constructor","name","autoIncrementField","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","changes","i","push","field","parseConstraintsFromSql","map","resultSet","isSelectQuery","prefixes","mapValues","value","lastind","lastIndexOf","substr","tableName","getTableName","toString","replace","tableTypes","forOwn","attribute","applyParsers","handleSelectQuery","isShowOrDescribeQuery","handleShowIndexesQuery","defaultValue","_result","dflt_value","undefined","type","allowNull","notnull","primaryKey","pk","BULKUPDATE","BULKDELETE","UPSERT","VERSION","version","RAW","isUpdateQuery","tableNames","exec","filter","length","all","then","constraints","split","referenceTableName","referenceTableKeys","updateAction","deleteAction","splice","constraintSql","match","referencesRegex","referenceConditions","removeTicks","columnNames","column","constraintCondition","constraint","constraintName","constraintType","trim","toUpperCase","parse","get","timezone","code","message","ForeignKeyConstraintError","parent","fields","columnWithTable","errors","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","isEqual","msg","UniqueConstraintError","TimeoutError","DatabaseError","data","reverse","item","primary","unique","run","columns","seqno","order","isUpsertQuery","isBulkUpdateQuery","toLowerCase","values","bindParam","Array","isArray","forEach","v","skipValueReplace","Object","keys","k","module","exports","default"],"mappings":"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","file":"query.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:sqlite');\nconst Promise = require('../../promise');\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors.js');\nconst parserStore = require('../parserStore')('sqlite');\n\nclass Query extends AbstractQuery {\n\n  constructor(database, sequelize, options) {\n    super();\n    this.database = database;\n    this.sequelize = sequelize;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  getInsertIdField() {\n    return 'lastID';\n  }\n\n  /**\n   * rewrite query with parameters\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = {};\n      values.forEach((v, i) => {\n        bindParam['$'+(i+1)] = v;\n      });\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = {};\n      if (typeof values === 'object') {\n        for (const k of Object.keys(values)) {\n          bindParam['$'+k] = values[k];\n        }\n      }\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    }\n    return [sql, bindParam];\n  }\n\n  _collectModels(include, prefix) {\n    const ret = {};\n\n    if (include) {\n      for (const _include of include) {\n        let key;\n        if (!prefix) {\n          key = _include.as;\n        } else {\n          key = prefix + '.' + _include.as;\n        }\n        ret[key] = _include.model;\n\n        if (_include.include) {\n          _.merge(ret, this._collectModels(_include.include, key));\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const method = this.getDatabaseMethod();\n    if (method === 'exec') {\n      // exec does not support bind parameter\n      sql = AbstractQuery.formatBindParameters(sql, this.options.bind, this.options.dialect, { skipUnescape: true })[0];\n      this.sql = sql;\n    }\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.database.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.database.uuid || 'default'}) : ${this.sql}`);\n\n    return new Promise(resolve => {\n      const columnTypes = {};\n      this.database.serialize(() => {\n        const executeSql = () => {\n          if (this.sql.indexOf('-- ') === 0) {\n            return resolve();\n          } else {\n            resolve(new Promise((resolve, reject) => {\n              const query = this;\n              // cannot use arrow function here because the function is bound to the statement\n              function afterExecute(err, results) {\n                debug(`executed(${query.database.uuid || 'default'}) : ${query.sql}`);\n\n                if (benchmark) {\n                  query.sequelize.log('Executed (' + (query.database.uuid || 'default') + '): ' + query.sql, Date.now() - queryBegin, query.options);\n                }\n\n                if (err) {\n                  err.sql = query.sql;\n                  reject(query.formatError(err));\n                } else {\n                  const metaData = this;\n                  let result = query.instance;\n\n                  // add the inserted row id to the instance\n                  if (query.isInsertQuery(results, metaData)) {\n                    query.handleInsertQuery(results, metaData);\n                    if (!query.instance) {\n                      // handle bulkCreate AI primary key\n                      if (\n                        metaData.constructor.name === 'Statement'\n                        && query.model\n                        && query.model.autoIncrementField\n                        && query.model.autoIncrementField === query.model.primaryKeyAttribute\n                        && query.model.rawAttributes[query.model.primaryKeyAttribute]\n                      ) {\n                        const startId = metaData[query.getInsertIdField()] - metaData.changes + 1;\n                        result = [];\n                        for (let i = startId; i < startId + metaData.changes; i++) {\n                          result.push({ [query.model.rawAttributes[query.model.primaryKeyAttribute].field]: i });\n                        }\n                      } else {\n                        result = metaData[query.getInsertIdField()];\n                      }\n                    }\n                  }\n\n                  if (query.sql.indexOf('sqlite_master') !== -1) {\n                    if (query.sql.indexOf('SELECT sql FROM sqlite_master WHERE tbl_name') !== -1) {\n                      result = results;\n                      if (result && result[0] && result[0].sql.indexOf('CONSTRAINT') !== -1) {\n                        result = query.parseConstraintsFromSql(results[0].sql);\n                      }\n                    } else {\n                      result = results.map(resultSet => resultSet.name);\n                    }\n                  } else if (query.isSelectQuery()) {\n                    if (!query.options.raw) {\n                      // This is a map of prefix strings to models, e.g. user.projects -> Project model\n                      const prefixes = query._collectModels(query.options.include);\n\n                      results = results.map(result => {\n                        return _.mapValues(result, (value, name) => {\n                          let model;\n                          if (name.indexOf('.') !== -1) {\n                            const lastind = name.lastIndexOf('.');\n\n                            model = prefixes[name.substr(0, lastind)];\n\n                            name = name.substr(lastind + 1);\n                          } else {\n                            model = query.options.model;\n                          }\n\n                          const tableName = model.getTableName().toString().replace(/`/g, '');\n                          const tableTypes = columnTypes[tableName] || {};\n\n                          if (tableTypes && !(name in tableTypes)) {\n                            // The column is aliased\n                            _.forOwn(model.rawAttributes, (attribute, key) => {\n                              if (name === key && attribute.field) {\n                                name = attribute.field;\n                                return false;\n                              }\n                            });\n                          }\n\n                          return tableTypes[name]\n                                  ? query.applyParsers(tableTypes[name], value)\n                                  : value;\n                        });\n                      });\n                    }\n\n                    result = query.handleSelectQuery(results);\n                  } else if (query.isShowOrDescribeQuery()) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA INDEX_LIST') !== -1) {\n                    result = query.handleShowIndexesQuery(results);\n                  } else if (query.sql.indexOf('PRAGMA INDEX_INFO') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA TABLE_INFO') !== -1) {\n                    // this is the sqlite way of getting the metadata of a table\n                    result = {};\n\n                    let defaultValue;\n                    for (const _result of results) {\n                      if (_result.dflt_value === null) {\n                        // Column schema omits any \"DEFAULT ...\"\n                        defaultValue = undefined;\n                      } else if (_result.dflt_value === 'NULL') {\n                        // Column schema is a \"DEFAULT NULL\"\n                        defaultValue = null;\n                      } else {\n                        defaultValue = _result.dflt_value;\n                      }\n\n                      result[_result.name] = {\n                        type: _result.type,\n                        allowNull: _result.notnull === 0,\n                        defaultValue,\n                        primaryKey: _result.pk !== 0\n                      };\n\n                      if (result[_result.name].type === 'TINYINT(1)') {\n                        result[_result.name].defaultValue = { '0': false, '1': true }[result[_result.name].defaultValue];\n                      }\n\n                      if (typeof result[_result.name].defaultValue === 'string') {\n                        result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, '');\n                      }\n                    }\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys;') !== -1) {\n                    result = results[0];\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA foreign_key_list') !== -1) {\n                    result = results;\n                  } else if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].indexOf(query.options.type) !== -1) {\n                    result = metaData.changes;\n                  } else if (query.options.type === QueryTypes.UPSERT) {\n                    result = undefined;\n                  } else if (query.options.type === QueryTypes.VERSION) {\n                    result = results[0].version;\n                  } else if (query.options.type === QueryTypes.RAW) {\n                    result = [results, metaData];\n                  } else if (query.isUpdateQuery() || query.isInsertQuery()) {\n                    result = [result, metaData.changes];\n                  }\n\n                  resolve(result);\n                }\n              }\n\n              if (method === 'exec') {\n                // exec does not support bind parameter\n                this.database[method](this.sql, afterExecute);\n              } else {\n                if (!parameters) parameters = [];\n                this.database[method](this.sql, parameters, afterExecute);\n              }\n            }));\n            return null;\n          }\n        };\n\n        if (this.getDatabaseMethod() === 'all') {\n          let tableNames = [];\n          if (this.options && this.options.tableNames) {\n            tableNames = this.options.tableNames;\n          } else if (/FROM `(.*?)`/i.exec(this.sql)) {\n            tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);\n          }\n\n          // If we already have the metadata for the table, there's no need to ask for it again\n          tableNames = _.filter(tableNames, tableName => !(tableName in columnTypes) && tableName !== 'sqlite_master');\n\n          if (!tableNames.length) {\n            return executeSql();\n          } else {\n            return Promise.map(tableNames, tableName =>\n              new Promise(resolve => {\n                tableName = tableName.replace(/`/g, '');\n                columnTypes[tableName] = {};\n\n                this.database.all('PRAGMA table_info(`' + tableName + '`)', (err, results) => {\n                  if (!err) {\n                    for (const result of results) {\n                      columnTypes[tableName][result.name] = result.type;\n                    }\n                  }\n                  resolve();\n                });\n              })\n            ).then(executeSql);\n          }\n        } else {\n          return executeSql();\n        }\n      });\n    });\n  }\n\n  parseConstraintsFromSql(sql) {\n    let constraints = sql.split('CONSTRAINT ');\n    let referenceTableName, referenceTableKeys, updateAction, deleteAction;\n    constraints.splice(0, 1);\n    constraints = constraints.map(constraintSql => {\n      //Parse foreign key snippets\n      if (constraintSql.indexOf('REFERENCES') !== -1) {\n        //Parse out the constraint condition form sql string\n        updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n        deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n\n        if (updateAction) {\n          updateAction = updateAction[1];\n        }\n\n        if (deleteAction) {\n          deleteAction = deleteAction[1];\n        }\n\n        const referencesRegex = /REFERENCES.+\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/;\n        const referenceConditions = constraintSql.match(referencesRegex)[0].split(' ');\n        referenceTableName = Utils.removeTicks(referenceConditions[1]);\n        let columnNames = referenceConditions[2];\n        columnNames = columnNames.replace(/\\(|\\)/g, '').split(', ');\n        referenceTableKeys = columnNames.map(column => Utils.removeTicks(column));\n      }\n\n      const constraintCondition = constraintSql.match(/\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/)[0];\n      constraintSql = constraintSql.replace(/\\(.+\\)/, '');\n      const constraint = constraintSql.split(' ');\n\n      if (constraint[1] === 'PRIMARY' || constraint[1] === 'FOREIGN') {\n        constraint[1]+= ' KEY';\n      }\n\n      return {\n        constraintName: Utils.removeTicks(constraint[0]),\n        constraintType: constraint[1],\n        updateAction,\n        deleteAction,\n        sql: sql.replace(/\\\"/g, '\\`'), //Sqlite returns double quotes for table name\n        constraintCondition,\n        referenceTableName,\n        referenceTableKeys\n      };\n    });\n\n    return constraints;\n  }\n\n  applyParsers(type, value) {\n    if (type.indexOf('(') !== -1) {\n      // Remove the length part\n      type = type.substr(0, type.indexOf('('));\n    }\n    type = type.replace('UNSIGNED', '').replace('ZEROFILL', '');\n    type = type.trim().toUpperCase();\n    const parse = parserStore.get(type);\n\n    if (value !== null && parse) {\n      return parse(value, { timezone: this.sequelize.options.timezone });\n    }\n    return value;\n  }\n\n  formatError(err) {\n\n    switch (err.code) {\n      case 'SQLITE_CONSTRAINT': {\n        let match = err.message.match(/FOREIGN KEY constraint failed/);\n        if (match !== null) {\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            parent :err\n          });\n        }\n\n        let fields = [];\n\n        // Sqlite pre 2.2 behavior - Error: SQLITE_CONSTRAINT: columns x, y are not unique\n        match = err.message.match(/columns (.*?) are/);\n        if (match !== null && match.length >= 2) {\n          fields = match[1].split(', ');\n        } else {\n\n          // Sqlite post 2.2 behavior - Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: table.x, table.y\n          match = err.message.match(/UNIQUE constraint failed: (.*)/);\n          if (match !== null && match.length >= 2) {\n            fields = match[1].split(', ').map(columnWithTable => columnWithTable.split('.')[1]);\n          }\n        }\n\n        const errors = [];\n        let message = 'Validation error';\n\n        for (const field of fields) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', field, this.instance && this.instance[field]));\n        }\n\n        if (this.model) {\n          _.forOwn(this.model.uniqueKeys, constraint => {\n            if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {\n              message = constraint.msg;\n              return false;\n            }\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({message, errors, parent: err, fields});\n      }\n      case 'SQLITE_BUSY':\n        return new sequelizeErrors.TimeoutError(err);\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n\n    // Sqlite returns indexes so the one that was defined last is returned first. Lets reverse that!\n    return this.sequelize.Promise.map(data.reverse(), item => {\n      item.fields = [];\n      item.primary = false;\n      item.unique = !!item.unique;\n      item.constraintName = item.name;\n      return this.run('PRAGMA INDEX_INFO(`' + item.name + '`)').then(columns => {\n        for (const column of columns) {\n          item.fields[column.seqno] = {\n            attribute: column.name,\n            length: undefined,\n            order: undefined\n          };\n        }\n\n        return item;\n      });\n    });\n  }\n\n  getDatabaseMethod() {\n    if (this.isUpsertQuery()) {\n      return 'exec'; // Needed to run multiple queries in one\n    } else if (this.isInsertQuery() || this.isUpdateQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().indexOf('CREATE TEMPORARY TABLE'.toLowerCase()) !== -1 || this.options.type === QueryTypes.BULKDELETE) {\n      return 'run';\n    } else {\n      return 'all';\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]}