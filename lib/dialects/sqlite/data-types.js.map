{"version":3,"sources":["../../../../sequelize-es6/lib/dialects/sqlite/data-types.js"],"names":["_","require","inherits","module","exports","warn","BaseTypes","ABSTRACT","bind","undefined","DATE","types","sqlite","STRING","CHAR","TEXT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","JSONTYPE","apply","arguments","parse","data","length","date","options","indexOf","Date","timezone","binary","prototype","toSql","_binary","_length","call","NUMBER","result","key","_unsigned","_zerofill","_decimals","decimals","forEach","floating","value","isString","NaN","Infinity","obj","Object","create","forIn","DataType","extend","oldType"],"mappings":"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","file":"data-types.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  function JSONTYPE() {\n    if (!(this instanceof JSONTYPE)) return new JSONTYPE();\n    BaseTypes.JSON.apply(this, arguments);\n  }\n  inherits(JSONTYPE, BaseTypes.JSON);\n\n  JSONTYPE.parse = function parse(data) {\n    return JSON.parse(data);\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.parse = function parse(date, options) {\n    if (date.indexOf('+') === -1) {\n      // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n      return new Date(date + options.timezone);\n    } else {\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function parse(date) {\n    return date;\n  };\n\n  function STRING(length, binary) {\n    if (!(this instanceof STRING)) return new STRING(length, binary);\n    BaseTypes.STRING.apply(this, arguments);\n  }\n  inherits(STRING, BaseTypes.STRING);\n\n  STRING.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'VARCHAR BINARY(' + this._length + ')';\n    } else {\n      return BaseTypes.STRING.prototype.toSql.call(this);\n    }\n  };\n\n  function TEXT(length) {\n    if (!(this instanceof TEXT)) return new TEXT(length);\n    BaseTypes.TEXT.apply(this, arguments);\n  }\n  inherits(TEXT, BaseTypes.TEXT);\n\n  TEXT.prototype.toSql = function toSql() {\n    if (this._length) {\n      warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n      this._length = undefined;\n    }\n    return 'TEXT';\n  };\n\n  function CHAR(length, binary) {\n    if (!(this instanceof CHAR)) return new CHAR(length, binary);\n    BaseTypes.CHAR.apply(this, arguments);\n  }\n  inherits(CHAR, BaseTypes.CHAR);\n\n  CHAR.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'CHAR BINARY(' + this._length + ')';\n    } else {\n      return BaseTypes.CHAR.prototype.toSql.call(this);\n    }\n  };\n\n  function NUMBER(options) {\n    if (!(this instanceof NUMBER)) return new NUMBER(options);\n    BaseTypes.NUMBER.apply(this, arguments);\n  }\n  inherits(NUMBER, BaseTypes.NUMBER);\n\n  NUMBER.prototype.toSql = function toSql() {\n    let result = this.key;\n\n    if (this._unsigned) {\n      result += ' UNSIGNED';\n    }\n    if (this._zerofill) {\n      result += ' ZEROFILL';\n    }\n\n    if (this._length) {\n      result += '(' + this._length;\n      if (typeof this._decimals === 'number') {\n        result += ',' + this._decimals;\n      }\n      result += ')';\n    }\n    return result;\n  };\n\n  function INTEGER(length) {\n    if (!(this instanceof INTEGER)) return new INTEGER(length);\n    BaseTypes.INTEGER.apply(this, arguments);\n  }\n  inherits(INTEGER, BaseTypes.INTEGER);\n\n  INTEGER.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function BIGINT(length) {\n    if (!(this instanceof BIGINT)) return new BIGINT(length);\n    BaseTypes.BIGINT.apply(this, arguments);\n  }\n  inherits(BIGINT, BaseTypes.BIGINT);\n\n  BIGINT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function FLOAT(length, decimals) {\n    if (!(this instanceof FLOAT)) return new FLOAT(length, decimals);\n    BaseTypes.FLOAT.apply(this, arguments);\n  }\n  inherits(FLOAT, BaseTypes.FLOAT);\n  FLOAT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function DOUBLE(length, decimals) {\n    if (!(this instanceof DOUBLE)) return new DOUBLE(length, decimals);\n    BaseTypes.DOUBLE.apply(this, arguments);\n  }\n  inherits(DOUBLE, BaseTypes.DOUBLE);\n  DOUBLE.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function REAL(length, decimals) {\n    if (!(this instanceof REAL)) return new REAL(length, decimals);\n    BaseTypes.REAL.apply(this, arguments);\n  }\n  inherits(REAL, BaseTypes.REAL);\n  REAL.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  [FLOAT, DOUBLE, REAL].forEach(floating => {\n    floating.parse = function parse(value) {\n      if (_.isString(value)) {\n        if (value === 'NaN') {\n          return NaN;\n        } else if (value === 'Infinity') {\n          return Infinity;\n        } else if (value === '-Infinity') {\n          return -Infinity;\n        }\n      }\n      return value;\n    };\n  });\n\n  function ENUM() {\n    if (!(this instanceof ENUM)) {\n      const obj = Object.create(ENUM.prototype);\n      ENUM.apply(obj, arguments);\n      return obj;\n    }\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.prototype.toSql = function toSql() {\n    return 'TEXT';\n  };\n\n  const exports = {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n    if (!DataType.extend) {\n      DataType.extend = oldType => {\n        return new DataType(oldType.options);\n      };\n    }\n  });\n\n  return exports;\n\n};\n"]}